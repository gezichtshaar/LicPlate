/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Histogram : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Histogram(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Histogram obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Histogram() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VisionLabPINVOKE.delete_Histogram(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Histogram() : this(VisionLabPINVOKE.new_Histogram__SWIG_0(), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Histogram(int min, int max, HistogramType state) : this(VisionLabPINVOKE.new_Histogram__SWIG_1(min, max, (int)state), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Histogram(int min, int max) : this(VisionLabPINVOKE.new_Histogram__SWIG_2(min, max), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Histogram(Histogram his) : this(VisionLabPINVOKE.new_Histogram__SWIG_3(Histogram.getCPtr(his)), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsEqual_Op(Histogram his) {
    bool ret = VisionLabPINVOKE.Histogram_IsEqual_Op(swigCPtr, Histogram.getCPtr(his));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Not(Histogram his) {
    bool ret = VisionLabPINVOKE.Histogram_Not(swigCPtr, Histogram.getCPtr(his));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Histogram Assign_Op(Histogram his) {
    Histogram ret = new Histogram(VisionLabPINVOKE.Histogram_Assign_Op(swigCPtr, Histogram.getCPtr(his)), false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double ValueAtIndex(int i) {
    SWIGTYPE_p_double ret = new SWIGTYPE_p_double(VisionLabPINVOKE.Histogram_ValueAtIndex(swigCPtr, i), false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public HistogramType State() {
    HistogramType ret = (HistogramType)VisionLabPINVOKE.Histogram_State(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Size() {
    int ret = VisionLabPINVOKE.Histogram_Size(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int MinValue() {
    int ret = VisionLabPINVOKE.Histogram_MinValue(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int MaxValue() {
    int ret = VisionLabPINVOKE.Histogram_MaxValue(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int NearestHisPixel(int t) {
    int ret = VisionLabPINVOKE.Histogram_NearestHisPixel(swigCPtr, t);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reset(HistogramType state) {
    VisionLabPINVOKE.Histogram_Reset__SWIG_0(swigCPtr, (int)state);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Reset() {
    VisionLabPINVOKE.Histogram_Reset__SWIG_1(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PartialSum() {
    VisionLabPINVOKE.Histogram_PartialSum(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void OpticalDensity() {
    VisionLabPINVOKE.Histogram_OpticalDensity(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IntegratedOpticalDensity() {
    VisionLabPINVOKE.Histogram_IntegratedOpticalDensity(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public double Sum() {
    double ret = VisionLabPINVOKE.Histogram_Sum(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double NrElms() {
    double ret = VisionLabPINVOKE.Histogram_NrElms(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Mean() {
    double ret = VisionLabPINVOKE.Histogram_Mean(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Median() {
    int ret = VisionLabPINVOKE.Histogram_Median(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Modal() {
    int ret = VisionLabPINVOKE.Histogram_Modal(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double StdDeviation() {
    double ret = VisionLabPINVOKE.Histogram_StdDeviation(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int IsoData() {
    int ret = VisionLabPINVOKE.Histogram_IsoData(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
