/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Mask_Int8 : MaskBase {
  private HandleRef swigCPtr;

  internal Mask_Int8(IntPtr cPtr, bool cMemoryOwn) : base(VisionLabPINVOKE.Mask_Int8_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Mask_Int8 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Mask_Int8() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VisionLabPINVOKE.delete_Mask_Int8(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Mask_Int8() : this(VisionLabPINVOKE.new_Mask_Int8__SWIG_0(), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Mask_Int8(Mask_Int8 mask) : this(VisionLabPINVOKE.new_Mask_Int8__SWIG_1(Mask_Int8.getCPtr(mask)), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Mask_Int8(int height, int width) : this(VisionLabPINVOKE.new_Mask_Int8__SWIG_2(height, width), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Mask_Int8(int height, int width, char v) : this(VisionLabPINVOKE.new_Mask_Int8__SWIG_3(height, width, v), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Mask_Int8(int height, int width, int orgX, int orgY, char v) : this(VisionLabPINVOKE.new_Mask_Int8__SWIG_4(height, width, orgX, orgY, v), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Mask_Int8(int height, int width, int orgX, int orgY) : this(VisionLabPINVOKE.new_Mask_Int8__SWIG_5(height, width, orgX, orgY), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsEqual_Op(Mask_Int8 mask) {
    bool ret = VisionLabPINVOKE.Mask_Int8_IsEqual_Op(swigCPtr, Mask_Int8.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Not(Mask_Int8 mask) {
    bool ret = VisionLabPINVOKE.Mask_Int8_Not(swigCPtr, Mask_Int8.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Mask_Int8 Assign_Op(Mask_Int8 mask) {
    Mask_Int8 ret = new Mask_Int8(VisionLabPINVOKE.Mask_Int8_Assign_Op(swigCPtr, Mask_Int8.getCPtr(mask)), false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMask(int height, int width, int orgX, int orgY) {
    VisionLabPINVOKE.Mask_Int8_SetMask(swigCPtr, height, width, orgX, orgY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public char GetMaskValue(int x, int y) {
    char ret = VisionLabPINVOKE.Mask_Int8_GetMaskValue(swigCPtr, x, y);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMaskValue(int x, int y, char v) {
    VisionLabPINVOKE.Mask_Int8_SetMaskValue(swigCPtr, x, y, v);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public string tab {
    set {
      VisionLabPINVOKE.Mask_Int8_tab_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = VisionLabPINVOKE.Mask_Int8_tab_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
