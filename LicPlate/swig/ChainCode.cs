/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ChainCode : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChainCode(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ChainCode obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChainCode() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VisionLabPINVOKE.delete_ChainCode(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public ChainCode(ChainCodeType t) : this(VisionLabPINVOKE.new_ChainCode__SWIG_0((int)t), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainCode() : this(VisionLabPINVOKE.new_ChainCode__SWIG_1(), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsEqual_Op(ChainCode c) {
    bool ret = VisionLabPINVOKE.ChainCode_IsEqual_Op(swigCPtr, ChainCode.getCPtr(c));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Not(ChainCode c) {
    bool ret = VisionLabPINVOKE.ChainCode_Not(swigCPtr, ChainCode.getCPtr(c));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int ConvToXYCoordTab(vector_XYCoord tab) {
    int ret = VisionLabPINVOKE.ChainCode_ConvToXYCoordTab(swigCPtr, vector_XYCoord.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LineXY MaxCord() {
    LineXY ret = new LineXY(VisionLabPINVOKE.ChainCode_MaxCord(swigCPtr), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Perimeter() {
    double ret = VisionLabPINVOKE.ChainCode_Perimeter(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int ApproxPolygon(double minDistance, int maxVertices, vector_XYCoord tab) {
    int ret = VisionLabPINVOKE.ChainCode_ApproxPolygon(swigCPtr, minDistance, maxVertices, vector_XYCoord.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChainCodeType type {
    set {
      VisionLabPINVOKE.ChainCode_type_set(swigCPtr, (int)value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ChainCodeType ret = (ChainCodeType)VisionLabPINVOKE.ChainCode_type_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public XYCoord topMostLeft {
    set {
      VisionLabPINVOKE.ChainCode_topMostLeft_set(swigCPtr, XYCoord.getCPtr(value));
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = VisionLabPINVOKE.ChainCode_topMostLeft_get(swigCPtr);
      XYCoord ret = (cPtr == IntPtr.Zero) ? null : new XYCoord(cPtr, false);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_int chain {
    set {
      VisionLabPINVOKE.ChainCode_chain_set(swigCPtr, vector_int.getCPtr(value));
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = VisionLabPINVOKE.ChainCode_chain_get(swigCPtr);
      vector_int ret = (cPtr == IntPtr.Zero) ? null : new vector_int(cPtr, false);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
