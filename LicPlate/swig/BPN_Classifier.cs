/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class BPN_Classifier : BPN {
  private HandleRef swigCPtr;

  internal BPN_Classifier(IntPtr cPtr, bool cMemoryOwn) : base(VisionLabPINVOKE.BPN_Classifier_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BPN_Classifier obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BPN_Classifier() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VisionLabPINVOKE.delete_BPN_Classifier(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public BPN_Classifier() : this(VisionLabPINVOKE.new_BPN_Classifier__SWIG_0(), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public BPN_Classifier(int nrInputs, int nrHiddens1, int nrHiddens2, int nrOutputs, BiasNodes bias, vector_MinMaxInput minMaxInputTab) : this(VisionLabPINVOKE.new_BPN_Classifier__SWIG_1(nrInputs, nrHiddens1, nrHiddens2, nrOutputs, (int)bias, vector_MinMaxInput.getCPtr(minMaxInputTab)), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public double TrainClass(double learnRate, double momentum, vector_double input, int classNr) {
    double ret = VisionLabPINVOKE.BPN_Classifier_TrainClass(swigCPtr, learnRate, momentum, vector_double.getCPtr(input), classNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TrainClassSet(int nrOfEpochs, double learnRate, double momentum, vector_vector_double inputs, vector_int classes, ref double meanError) {
    double ret = VisionLabPINVOKE.BPN_Classifier_TrainClassSet(swigCPtr, nrOfEpochs, learnRate, momentum, vector_vector_double.getCPtr(inputs), vector_int.getCPtr(classes), ref meanError);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Classify(vector_double input, ref double confidency) {
    int ret = VisionLabPINVOKE.BPN_Classifier_Classify(swigCPtr, vector_double.getCPtr(input), ref confidency);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double ClassifyOutputTab(vector_double input, vector_ClassOutput outputTab) {
    double ret = VisionLabPINVOKE.BPN_Classifier_ClassifyOutputTab(swigCPtr, vector_double.getCPtr(input), vector_ClassOutput.getCPtr(outputTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double EvaluateClass(vector_double input, int classExp, ref int classRes, ref double confidency, vector_double output) {
    double ret = VisionLabPINVOKE.BPN_Classifier_EvaluateClass(swigCPtr, vector_double.getCPtr(input), classExp, ref classRes, ref confidency, vector_double.getCPtr(output));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double EvaluateClassSet(vector_vector_double inputs, vector_int classesExp, vector_int classesRes, vector_double confidencies, vector_vector_double outputs, ref double meanError) {
    double ret = VisionLabPINVOKE.BPN_Classifier_EvaluateClassSet(swigCPtr, vector_vector_double.getCPtr(inputs), vector_int.getCPtr(classesExp), vector_int.getCPtr(classesRes), vector_double.getCPtr(confidencies), vector_vector_double.getCPtr(outputs), ref meanError);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
