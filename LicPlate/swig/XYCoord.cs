/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class XYCoord : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XYCoord(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(XYCoord obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~XYCoord() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VisionLabPINVOKE.delete_XYCoord(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public XYCoord(int xx, int yy) : this(VisionLabPINVOKE.new_XYCoord__SWIG_0(xx, yy), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public XYCoord(int xx) : this(VisionLabPINVOKE.new_XYCoord__SWIG_1(xx), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public XYCoord() : this(VisionLabPINVOKE.new_XYCoord__SWIG_2(), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsEqual_Op(XYCoord c) {
    bool ret = VisionLabPINVOKE.XYCoord_IsEqual_Op(swigCPtr, XYCoord.getCPtr(c));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Not(XYCoord c) {
    bool ret = VisionLabPINVOKE.XYCoord_Not(swigCPtr, XYCoord.getCPtr(c));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XYCoord Add_Op(XYCoord c) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.XYCoord_Add_Op(swigCPtr, XYCoord.getCPtr(c)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XYCoord Subtract_Op(XYCoord c) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.XYCoord_Subtract_Op(swigCPtr, XYCoord.getCPtr(c)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XYCoord Multiply_Op(double f) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.XYCoord_Multiply_Op(swigCPtr, f), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XYCoord Divide_Op(double f) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.XYCoord_Divide_Op(swigCPtr, f), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XYCoord Add(XYCoord c) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.XYCoord_Add(swigCPtr, XYCoord.getCPtr(c)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XYCoord Subtract(XYCoord c) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.XYCoord_Subtract(swigCPtr, XYCoord.getCPtr(c)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XYCoord Multiply(double f) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.XYCoord_Multiply(swigCPtr, f), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XYCoord Divide(double f) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.XYCoord_Divide(swigCPtr, f), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SmallerThan(XYCoord arg0) {
    bool ret = VisionLabPINVOKE.XYCoord_SmallerThan(swigCPtr, XYCoord.getCPtr(arg0));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int x {
    set {
      VisionLabPINVOKE.XYCoord_x_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = VisionLabPINVOKE.XYCoord_x_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int y {
    set {
      VisionLabPINVOKE.XYCoord_y_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = VisionLabPINVOKE.XYCoord_y_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
