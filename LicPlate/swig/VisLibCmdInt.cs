/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class VisLibCmdInt : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VisLibCmdInt(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(VisLibCmdInt obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~VisLibCmdInt() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VisionLabPINVOKE.delete_VisLibCmdInt(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public VisLibCmdInt(CmdIntCallBackCmd callBack, int maxHisSize, EchoMode echo, bool debug, string test) : this(VisionLabPINVOKE.new_VisLibCmdInt__SWIG_0(CmdIntCallBackCmd.getCPtr(callBack), maxHisSize, (int)echo, debug, test), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public VisLibCmdInt(CmdIntCallBackCmd callBack, int maxHisSize, EchoMode echo, bool debug) : this(VisionLabPINVOKE.new_VisLibCmdInt__SWIG_1(CmdIntCallBackCmd.getCPtr(callBack), maxHisSize, (int)echo, debug), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public VisLibCmdInt(CmdIntCallBackCmd callBack, int maxHisSize, EchoMode echo) : this(VisionLabPINVOKE.new_VisLibCmdInt__SWIG_2(CmdIntCallBackCmd.getCPtr(callBack), maxHisSize, (int)echo), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public VisLibCmdInt(CmdIntCallBackCmd callBack, int maxHisSize) : this(VisionLabPINVOKE.new_VisLibCmdInt__SWIG_3(CmdIntCallBackCmd.getCPtr(callBack), maxHisSize), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public VisLibCmdInt(CmdIntCallBackCmd callBack) : this(VisionLabPINVOKE.new_VisLibCmdInt__SWIG_4(CmdIntCallBackCmd.getCPtr(callBack)), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public string ExecRequest(string request) {
    string ret = VisionLabPINVOKE.VisLibCmdInt_ExecRequest(swigCPtr, request);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void StartTimer() {
    VisionLabPINVOKE.VisLibCmdInt_StartTimer(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void StopTimer() {
    VisionLabPINVOKE.VisLibCmdInt_StopTimer(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ResetTimer() {
    VisionLabPINVOKE.VisLibCmdInt_ResetTimer(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetTimer() {
    string ret = VisionLabPINVOKE.VisLibCmdInt_GetTimer(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetMicroTimer() {
    string ret = VisionLabPINVOKE.VisLibCmdInt_GetMicroTimer(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetLastTime() {
    string ret = VisionLabPINVOKE.VisLibCmdInt_GetLastTime(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetTimerAccumulate() {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetTimerAccumulate(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetTimerAccumulate(bool accum) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_SetTimerAccumulate(swigCPtr, accum);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void CalibrateTimerOverhead() {
    VisionLabPINVOKE.VisLibCmdInt_CalibrateTimerOverhead(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsCmd(string cmdName) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_IsCmd(swigCPtr, cmdName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void InsertCmd(string cmdName, SWIGTYPE_p_CmdInterpreter__Command svrCmd, string helpMsg, bool arg3) {
    VisionLabPINVOKE.VisLibCmdInt_InsertCmd__SWIG_0(swigCPtr, cmdName, SWIGTYPE_p_CmdInterpreter__Command.getCPtr(svrCmd), helpMsg, arg3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertCmd(string cmdName, SWIGTYPE_p_CmdInterpreter__Command svrCmd, string helpMsg) {
    VisionLabPINVOKE.VisLibCmdInt_InsertCmd__SWIG_1(swigCPtr, cmdName, SWIGTYPE_p_CmdInterpreter__Command.getCPtr(svrCmd), helpMsg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EraseCmd(string cmdName) {
    VisionLabPINVOKE.VisLibCmdInt_EraseCmd(swigCPtr, cmdName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public int NrCmds() {
    int ret = VisionLabPINVOKE.VisLibCmdInt_NrCmds(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsImage(string imageName) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_IsImage(swigCPtr, imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void InsertImage(string imageName, Image image, SWIGTYPE_p_DisplayLUT lut, string oldHistory, bool arg4) {
    VisionLabPINVOKE.VisLibCmdInt_InsertImage__SWIG_0(swigCPtr, imageName, Image.getCPtr(image), SWIGTYPE_p_DisplayLUT.getCPtr(lut), oldHistory, arg4);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertImage(string imageName, Image image, SWIGTYPE_p_DisplayLUT lut, string oldHistory) {
    VisionLabPINVOKE.VisLibCmdInt_InsertImage__SWIG_1(swigCPtr, imageName, Image.getCPtr(image), SWIGTYPE_p_DisplayLUT.getCPtr(lut), oldHistory);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EraseImage(string imageName) {
    VisionLabPINVOKE.VisLibCmdInt_EraseImage(swigCPtr, imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EraseAllImages() {
    VisionLabPINVOKE.VisLibCmdInt_EraseAllImages(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ChangeImageName(string oldName, string newName) {
    VisionLabPINVOKE.VisLibCmdInt_ChangeImageName(swigCPtr, oldName, newName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Image GetImage(string imageName) {
    IntPtr cPtr = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_0(swigCPtr, imageName);
    Image ret = (cPtr == IntPtr.Zero) ? null : new Image(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, ByteImage image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_1(swigCPtr, imageName, ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, Int8Image image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_2(swigCPtr, imageName, Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, Int16Image image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_3(swigCPtr, imageName, Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, Int32Image image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_4(swigCPtr, imageName, Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, FloatImage image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_5(swigCPtr, imageName, FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, DoubleImage image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_6(swigCPtr, imageName, DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, RGB888Image image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_7(swigCPtr, imageName, RGB888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, RGB161616Image image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_8(swigCPtr, imageName, RGB161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, HSV888Image image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_9(swigCPtr, imageName, HSV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, HSV161616Image image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_10(swigCPtr, imageName, HSV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, YUV888Image image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_11(swigCPtr, imageName, YUV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, YUV161616Image image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_12(swigCPtr, imageName, YUV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, ComplexFloatImage image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_13(swigCPtr, imageName, ComplexFloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetImage(string imageName, ComplexDoubleImage image) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_GetImage__SWIG_14(swigCPtr, imageName, ComplexDoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ImageInfo(string imageName) {
    string ret = VisionLabPINVOKE.VisLibCmdInt_ImageInfo(swigCPtr, imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ListAllImages() {
    string ret = VisionLabPINVOKE.VisLibCmdInt_ListAllImages(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetHistory(string imageName) {
    string ret = VisionLabPINVOKE.VisLibCmdInt_GetHistory(swigCPtr, imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddToHistory(string imageName, string hisLine) {
    VisionLabPINVOKE.VisLibCmdInt_AddToHistory(swigCPtr, imageName, hisLine);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add2ndToHistory(string imageName, string image2Name) {
    VisionLabPINVOKE.VisLibCmdInt_Add2ndToHistory(swigCPtr, imageName, image2Name);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddLastCmdToHistory(string imageName) {
    VisionLabPINVOKE.VisLibCmdInt_AddLastCmdToHistory(swigCPtr, imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDisplayLUT(string imageName, SWIGTYPE_p_DisplayLUT lut) {
    VisionLabPINVOKE.VisLibCmdInt_SetDisplayLUT(swigCPtr, imageName, SWIGTYPE_p_DisplayLUT.getCPtr(lut));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_DisplayLUT GetDisplayLUT(string imageName) {
    SWIGTYPE_p_DisplayLUT ret = new SWIGTYPE_p_DisplayLUT(VisionLabPINVOKE.VisLibCmdInt_GetDisplayLUT(swigCPtr, imageName), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetLastAnswer() {
    string ret = VisionLabPINVOKE.VisLibCmdInt_GetLastAnswer(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IntPtr GetPatternMatcher(string pmName) { return VisionLabPINVOKE.VisLibCmdInt_GetPatternMatcher(swigCPtr, pmName); }

  public BPN GetBPN(string bpnName) {
    IntPtr cPtr = VisionLabPINVOKE.VisLibCmdInt_GetBPN(swigCPtr, bpnName);
    BPN ret = (cPtr == IntPtr.Zero) ? null : new BPN(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IntPtr GetCFS(string cfsName) { return VisionLabPINVOKE.VisLibCmdInt_GetCFS(swigCPtr, cfsName); }

  public IntPtr GetCIS(string cisName) { return VisionLabPINVOKE.VisLibCmdInt_GetCIS(swigCPtr, cisName); }

  public void RegisterCamera(string camType, CamInstallCmd cmd) {
    VisionLabPINVOKE.VisLibCmdInt_RegisterCamera(swigCPtr, camType, CamInstallCmd.getCPtr(cmd));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetRegisteredCameras() {
    string ret = VisionLabPINVOKE.VisLibCmdInt_GetRegisteredCameras(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void InstallCamera(string camName, string camType, SWIGTYPE_p_std__istream arg2, SWIGTYPE_p_std__ostream os) {
    VisionLabPINVOKE.VisLibCmdInt_InstallCamera(swigCPtr, camName, camType, SWIGTYPE_p_std__istream.getCPtr(arg2), SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetInstalledCameras() {
    string ret = VisionLabPINVOKE.VisLibCmdInt_GetInstalledCameras(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CameraBase GetCamera(string camName) {
    IntPtr cPtr = VisionLabPINVOKE.VisLibCmdInt_GetCamera(swigCPtr, camName);
    CameraBase ret = (cPtr == IntPtr.Zero) ? null : new CameraBase(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RemoveCamera(string camName) {
    VisionLabPINVOKE.VisLibCmdInt_RemoveCamera(swigCPtr, camName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsVar(string name) {
    bool ret = VisionLabPINVOKE.VisLibCmdInt_IsVar(swigCPtr, name);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetVar(string name) {
    string ret = VisionLabPINVOKE.VisLibCmdInt_GetVar(swigCPtr, name);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetVar(string name, string value) {
    VisionLabPINVOKE.VisLibCmdInt_SetVar(swigCPtr, name, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetArrayStr(string name) {
    string ret = VisionLabPINVOKE.VisLibCmdInt_GetArrayStr(swigCPtr, name);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetArrayStr(string name, string value) {
    VisionLabPINVOKE.VisLibCmdInt_SetArrayStr(swigCPtr, name, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSizeArray(string name, int size) {
    VisionLabPINVOKE.VisLibCmdInt_SetSizeArray(swigCPtr, name, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetSizeArray(string name) {
    int ret = VisionLabPINVOKE.VisLibCmdInt_GetSizeArray(swigCPtr, name);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetArrayVar(string name, int index) {
    string ret = VisionLabPINVOKE.VisLibCmdInt_GetArrayVar(swigCPtr, name, index);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetArrayVar(string name, int index, string value) {
    VisionLabPINVOKE.VisLibCmdInt_SetArrayVar(swigCPtr, name, index, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void CopyVar(string src, string dest) {
    VisionLabPINVOKE.VisLibCmdInt_CopyVar(swigCPtr, src, dest);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public int VarToArray(string var, string array) {
    int ret = VisionLabPINVOKE.VisLibCmdInt_VarToArray(swigCPtr, var, array);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ArrayToVar(string array, string var) {
    VisionLabPINVOKE.VisLibCmdInt_ArrayToVar(swigCPtr, array, var);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveVar(string name) {
    VisionLabPINVOKE.VisLibCmdInt_RemoveVar(swigCPtr, name);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllVars() {
    VisionLabPINVOKE.VisLibCmdInt_RemoveAllVars(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetArray(string name, vector_string vs) {
    VisionLabPINVOKE.VisLibCmdInt_GetArray(swigCPtr, name, vector_string.getCPtr(vs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetArray(string name, vector_string vs) {
    VisionLabPINVOKE.VisLibCmdInt_SetArray(swigCPtr, name, vector_string.getCPtr(vs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public string SubstituteVars(string istr) {
    string ret = VisionLabPINVOKE.VisLibCmdInt_SubstituteVars(swigCPtr, istr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ListAllVars() {
    string ret = VisionLabPINVOKE.VisLibCmdInt_ListAllVars(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNewLocalVarNr() {
    int ret = VisionLabPINVOKE.VisLibCmdInt_GetNewLocalVarNr(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ExecuteScript(string scriptName, string arg1, vector_string lines) {
    string ret = VisionLabPINVOKE.VisLibCmdInt_ExecuteScript(swigCPtr, scriptName, arg1, vector_string.getCPtr(lines));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_string GetScript(string name) {
    vector_string ret = new vector_string(VisionLabPINVOKE.VisLibCmdInt_GetScript(swigCPtr, name), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetScript(string name, vector_string script) {
    VisionLabPINVOKE.VisLibCmdInt_SetScript(swigCPtr, name, vector_string.getCPtr(script));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveScript(string name) {
    VisionLabPINVOKE.VisLibCmdInt_RemoveScript(swigCPtr, name);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public string ListAllScripts() {
    string ret = VisionLabPINVOKE.VisLibCmdInt_ListAllScripts(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LogMode logMode {
    set {
      VisionLabPINVOKE.VisLibCmdInt_logMode_set(swigCPtr, (int)value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      LogMode ret = (LogMode)VisionLabPINVOKE.VisLibCmdInt_logMode_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool logNewCmds {
    set {
      VisionLabPINVOKE.VisLibCmdInt_logNewCmds_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = VisionLabPINVOKE.VisLibCmdInt_logNewCmds_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int precision {
    set {
      VisionLabPINVOKE.VisLibCmdInt_precision_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = VisionLabPINVOKE.VisLibCmdInt_precision_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string test {
    set {
      VisionLabPINVOKE.VisLibCmdInt_test_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = VisionLabPINVOKE.VisLibCmdInt_test_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
