/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class VisionLab {
  public static bool DefCallBackProc() {
    bool ret = VisionLabPINVOKE.DefCallBackProc();
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VisLibCmdInt VisLibCmdIntCreate(int maxHisSize, EchoMode echo, bool debug) {
    IntPtr cPtr = VisionLabPINVOKE.VisLibCmdIntCreate(maxHisSize, (int)echo, debug);
    VisLibCmdInt ret = (cPtr == IntPtr.Zero) ? null : new VisLibCmdInt(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void GetByteImage(VisLibCmdInt cmdInt, string name, ByteImage image) {
    VisionLabPINVOKE.GetByteImage(VisLibCmdInt.getCPtr(cmdInt), name, ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetInt8Image(VisLibCmdInt cmdInt, string name, Int8Image image) {
    VisionLabPINVOKE.GetInt8Image(VisLibCmdInt.getCPtr(cmdInt), name, Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetInt16Image(VisLibCmdInt cmdInt, string name, Int16Image image) {
    VisionLabPINVOKE.GetInt16Image(VisLibCmdInt.getCPtr(cmdInt), name, Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetInt32Image(VisLibCmdInt cmdInt, string name, Int32Image image) {
    VisionLabPINVOKE.GetInt32Image(VisLibCmdInt.getCPtr(cmdInt), name, Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetFloatImage(VisLibCmdInt cmdInt, string name, FloatImage image) {
    VisionLabPINVOKE.GetFloatImage(VisLibCmdInt.getCPtr(cmdInt), name, FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetDoubleImage(VisLibCmdInt cmdInt, string name, DoubleImage image) {
    VisionLabPINVOKE.GetDoubleImage(VisLibCmdInt.getCPtr(cmdInt), name, DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetRGB888Image(VisLibCmdInt cmdInt, string name, RGB888Image image) {
    VisionLabPINVOKE.GetRGB888Image(VisLibCmdInt.getCPtr(cmdInt), name, RGB888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetRGB161616Image(VisLibCmdInt cmdInt, string name, RGB161616Image image) {
    VisionLabPINVOKE.GetRGB161616Image(VisLibCmdInt.getCPtr(cmdInt), name, RGB161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetHSV888Image(VisLibCmdInt cmdInt, string name, HSV888Image image) {
    VisionLabPINVOKE.GetHSV888Image(VisLibCmdInt.getCPtr(cmdInt), name, HSV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetHSV161616Image(VisLibCmdInt cmdInt, string name, HSV161616Image image) {
    VisionLabPINVOKE.GetHSV161616Image(VisLibCmdInt.getCPtr(cmdInt), name, HSV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetYUV888Image(VisLibCmdInt cmdInt, string name, YUV888Image image) {
    VisionLabPINVOKE.GetYUV888Image(VisLibCmdInt.getCPtr(cmdInt), name, YUV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetYUV161616Image(VisLibCmdInt cmdInt, string name, YUV161616Image image) {
    VisionLabPINVOKE.GetYUV161616Image(VisLibCmdInt.getCPtr(cmdInt), name, YUV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetComplexFloatImage(VisLibCmdInt cmdInt, string name, ComplexFloatImage image) {
    VisionLabPINVOKE.GetComplexFloatImage(VisLibCmdInt.getCPtr(cmdInt), name, ComplexFloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetComplexDoubleImage(VisLibCmdInt cmdInt, string name, ComplexDoubleImage image) {
    VisionLabPINVOKE.GetComplexDoubleImage(VisLibCmdInt.getCPtr(cmdInt), name, ComplexDoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetByteImage(VisLibCmdInt cmdInt, string name, ByteImage image) {
    VisionLabPINVOKE.SetByteImage(VisLibCmdInt.getCPtr(cmdInt), name, ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetInt8Image(VisLibCmdInt cmdInt, string name, Int8Image image) {
    VisionLabPINVOKE.SetInt8Image(VisLibCmdInt.getCPtr(cmdInt), name, Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetInt16Image(VisLibCmdInt cmdInt, string name, Int16Image image) {
    VisionLabPINVOKE.SetInt16Image(VisLibCmdInt.getCPtr(cmdInt), name, Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetInt32Image(VisLibCmdInt cmdInt, string name, Int32Image image) {
    VisionLabPINVOKE.SetInt32Image(VisLibCmdInt.getCPtr(cmdInt), name, Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetFloatImage(VisLibCmdInt cmdInt, string name, FloatImage image) {
    VisionLabPINVOKE.SetFloatImage(VisLibCmdInt.getCPtr(cmdInt), name, FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetDoubleImage(VisLibCmdInt cmdInt, string name, DoubleImage image) {
    VisionLabPINVOKE.SetDoubleImage(VisLibCmdInt.getCPtr(cmdInt), name, DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetRGB888Image(VisLibCmdInt cmdInt, string name, RGB888Image image) {
    VisionLabPINVOKE.SetRGB888Image(VisLibCmdInt.getCPtr(cmdInt), name, RGB888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetRGB161616Image(VisLibCmdInt cmdInt, string name, RGB161616Image image) {
    VisionLabPINVOKE.SetRGB161616Image(VisLibCmdInt.getCPtr(cmdInt), name, RGB161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetHSV888Image(VisLibCmdInt cmdInt, string name, HSV888Image image) {
    VisionLabPINVOKE.SetHSV888Image(VisLibCmdInt.getCPtr(cmdInt), name, HSV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetHSV161616Image(VisLibCmdInt cmdInt, string name, HSV161616Image image) {
    VisionLabPINVOKE.SetHSV161616Image(VisLibCmdInt.getCPtr(cmdInt), name, HSV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetYUV888Image(VisLibCmdInt cmdInt, string name, YUV888Image image) {
    VisionLabPINVOKE.SetYUV888Image(VisLibCmdInt.getCPtr(cmdInt), name, YUV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetYUV161616Image(VisLibCmdInt cmdInt, string name, YUV161616Image image) {
    VisionLabPINVOKE.SetYUV161616Image(VisLibCmdInt.getCPtr(cmdInt), name, YUV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetComplexFloatImage(VisLibCmdInt cmdInt, string name, ComplexFloatImage image) {
    VisionLabPINVOKE.SetComplexFloatImage(VisLibCmdInt.getCPtr(cmdInt), name, ComplexFloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetComplexDoubleImage(VisLibCmdInt cmdInt, string name, ComplexDoubleImage image) {
    VisionLabPINVOKE.SetComplexDoubleImage(VisLibCmdInt.getCPtr(cmdInt), name, ComplexDoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string OpCodeToStr(OpCode oc) {
    string ret = VisionLabPINVOKE.OpCodeToStr((int)oc);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OpCode StrToOpCode(string str) {
    OpCode ret = (OpCode)VisionLabPINVOKE.StrToOpCode(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double Angle(XYCoord m, XYCoord c1, XYCoord c2) {
    double ret = VisionLabPINVOKE.Angle(XYCoord.getCPtr(m), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Coord2D NearestPoint(Line2D line, Coord2D p) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.NearestPoint(Line2D.getCPtr(line), Coord2D.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DistanceSQ(Line2D line, Coord2D p) {
    double ret = VisionLabPINVOKE.DistanceSQ__SWIG_0(Line2D.getCPtr(line), Coord2D.getCPtr(p));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double Distance(Line2D line, Coord2D p) {
    double ret = VisionLabPINVOKE.Distance__SWIG_0(Line2D.getCPtr(line), Coord2D.getCPtr(p));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DistanceSQ(LineXY line, XYCoord p) {
    double ret = VisionLabPINVOKE.DistanceSQ__SWIG_1(LineXY.getCPtr(line), XYCoord.getCPtr(p));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double Distance(LineXY line, XYCoord p) {
    double ret = VisionLabPINVOKE.Distance__SWIG_1(LineXY.getCPtr(line), XYCoord.getCPtr(p));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double Distance(XYCoord p1, XYCoord p2) {
    double ret = VisionLabPINVOKE.Distance__SWIG_2(XYCoord.getCPtr(p1), XYCoord.getCPtr(p2));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double Distance(Coord2D p1, Coord2D p2) {
    double ret = VisionLabPINVOKE.Distance__SWIG_3(Coord2D.getCPtr(p1), Coord2D.getCPtr(p2));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double Distance(Coord3D p1, Coord3D p2) {
    double ret = VisionLabPINVOKE.Distance__SWIG_4(Coord3D.getCPtr(p1), Coord3D.getCPtr(p2));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static LineXY LongestLineBetweenCoords(vector_XYCoord tab, ref int startIndex, ref int endIndex) {
    LineXY ret = new LineXY(VisionLabPINVOKE.LongestLineBetweenCoords__SWIG_0(vector_XYCoord.getCPtr(tab), ref startIndex, ref endIndex), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Line2D LongestLineBetweenCoords(vector_Coord2D tab, ref int startIndex, ref int endIndex) {
    Line2D ret = new Line2D(VisionLabPINVOKE.LongestLineBetweenCoords__SWIG_1(vector_Coord2D.getCPtr(tab), ref startIndex, ref endIndex), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Line3D LongestLineBetweenCoords(vector_Coord3D tab, ref int startIndex, ref int endIndex) {
    Line3D ret = new Line3D(VisionLabPINVOKE.LongestLineBetweenCoords__SWIG_2(vector_Coord3D.getCPtr(tab), ref startIndex, ref endIndex), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void RotateCoord(XYCoord xy, XYCoord centre, double phi) {
    VisionLabPINVOKE.RotateCoord__SWIG_0(XYCoord.getCPtr(xy), XYCoord.getCPtr(centre), phi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RotateCoord(XYCoord xy, XYCoord centre, double sinPhi, double cosPhi) {
    VisionLabPINVOKE.RotateCoord__SWIG_1(XYCoord.getCPtr(xy), XYCoord.getCPtr(centre), sinPhi, cosPhi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RotateCoord(Coord2D xy, Coord2D centre, double phi) {
    VisionLabPINVOKE.RotateCoord__SWIG_2(Coord2D.getCPtr(xy), Coord2D.getCPtr(centre), phi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Coord2D PolarLinesIntersection(PolarCoord pc1, PolarCoord pc2) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.PolarLinesIntersection(PolarCoord.getCPtr(pc1), PolarCoord.getCPtr(pc2)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Line2D LineairRegression(vector_Coord2D tab) {
    Line2D ret = new Line2D(VisionLabPINVOKE.LineairRegression(vector_Coord2D.getCPtr(tab)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void CircleRegression(vector_Coord2D tab, Coord2D center, ref double radius) {
    VisionLabPINVOKE.CircleRegression(vector_Coord2D.getCPtr(tab), Coord2D.getCPtr(center), ref radius);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static XYCoord Coord2DToXYCoord(Coord2D c, CoordConversion conv) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.Coord2DToXYCoord__SWIG_0(Coord2D.getCPtr(c), (int)conv), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord Coord2DToXYCoord(Coord2D c) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.Coord2DToXYCoord__SWIG_1(Coord2D.getCPtr(c)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_XYCoord LineXYToCoords(XYCoord startOrg, XYCoord endOrg) {
    vector_XYCoord ret = new vector_XYCoord(VisionLabPINVOKE.LineXYToCoords__SWIG_0(XYCoord.getCPtr(startOrg), XYCoord.getCPtr(endOrg)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_XYCoord LineXYToCoords(LineXY xy) {
    vector_XYCoord ret = new vector_XYCoord(VisionLabPINVOKE.LineXYToCoords__SWIG_1(LineXY.getCPtr(xy)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void LineXYToCoords(XYCoord startOrg, XYCoord endOrg, vector_XYCoord tab) {
    VisionLabPINVOKE.LineXYToCoords__SWIG_2(XYCoord.getCPtr(startOrg), XYCoord.getCPtr(endOrg), vector_XYCoord.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LineXYToCoords(LineXY xy, vector_XYCoord tab) {
    VisionLabPINVOKE.LineXYToCoords__SWIG_3(LineXY.getCPtr(xy), vector_XYCoord.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static vector_Coord2D Line2DToCoords(Coord2D start, Coord2D end, int nrCoords) {
    vector_Coord2D ret = new vector_Coord2D(VisionLabPINVOKE.Line2DToCoords__SWIG_0(Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrCoords), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_Coord2D Line2DToCoords(Line2D line, int nrCoords) {
    vector_Coord2D ret = new vector_Coord2D(VisionLabPINVOKE.Line2DToCoords__SWIG_1(Line2D.getCPtr(line), nrCoords), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Line2DToCoords(Coord2D start, Coord2D end, int nrCoords, vector_Coord2D res) {
    VisionLabPINVOKE.Line2DToCoords__SWIG_2(Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrCoords, vector_Coord2D.getCPtr(res));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Line2DToCoords(Line2D line, int nrCoords, vector_Coord2D res) {
    VisionLabPINVOKE.Line2DToCoords__SWIG_3(Line2D.getCPtr(line), nrCoords, vector_Coord2D.getCPtr(res));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string UseXOrYToStr(UseXOrY xy) {
    string ret = VisionLabPINVOKE.UseXOrYToStr((int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UseXOrY StrToUseXOrY(string str) {
    UseXOrY ret = (UseXOrY)VisionLabPINVOKE.StrToUseXOrY(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string XYCoordToStr(XYCoord xy) {
    string ret = VisionLabPINVOKE.XYCoordToStr(XYCoord.getCPtr(xy));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord StrToXYCoord(string str) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.StrToXYCoord(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Coord2DToStr(Coord2D xy) {
    string ret = VisionLabPINVOKE.Coord2DToStr(Coord2D.getCPtr(xy));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Coord2D StrToCoord2D(string str) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.StrToCoord2D(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Coord3DToStr(Coord3D xyz) {
    string ret = VisionLabPINVOKE.Coord3DToStr(Coord3D.getCPtr(xyz));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Coord3D StrToCoord3D(string str) {
    Coord3D ret = new Coord3D(VisionLabPINVOKE.StrToCoord3D(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string PolarCoordToStr(PolarCoord polar) {
    string ret = VisionLabPINVOKE.PolarCoordToStr(PolarCoord.getCPtr(polar));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PolarCoord StrToPolarCoord(string str) {
    PolarCoord ret = new PolarCoord(VisionLabPINVOKE.StrToPolarCoord(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string XYCoordTabToStr(vector_XYCoord tab) {
    string ret = VisionLabPINVOKE.XYCoordTabToStr(vector_XYCoord.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_XYCoord StrToXYCoordTab(string str) {
    vector_XYCoord ret = new vector_XYCoord(VisionLabPINVOKE.StrToXYCoordTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Coord2DTabToStr(vector_Coord2D tab) {
    string ret = VisionLabPINVOKE.Coord2DTabToStr(vector_Coord2D.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_Coord2D StrToCoord2DTab(string str) {
    vector_Coord2D ret = new vector_Coord2D(VisionLabPINVOKE.StrToCoord2DTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Coord3DTabToStr(vector_Coord3D tab) {
    string ret = VisionLabPINVOKE.Coord3DTabToStr(vector_Coord3D.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_Coord3D StrToCoord3DTab(string str) {
    vector_Coord3D ret = new vector_Coord3D(VisionLabPINVOKE.StrToCoord3DTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string PolarCoordTabToStr(vector_PolarCoord tab) {
    string ret = VisionLabPINVOKE.PolarCoordTabToStr(vector_PolarCoord.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_PolarCoord StrToPolarCoordTab(string str) {
    vector_PolarCoord ret = new vector_PolarCoord(VisionLabPINVOKE.StrToPolarCoordTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string CoordConversionToStr(CoordConversion conv) {
    string ret = VisionLabPINVOKE.CoordConversionToStr((int)conv);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CoordConversion StrToCoordConversion(string str) {
    CoordConversion ret = (CoordConversion)VisionLabPINVOKE.StrToCoordConversion(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int InitVisionLib() {
    int ret = VisionLabPINVOKE.InitVisionLib();
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FreeVisionLib() {
    VisionLabPINVOKE.FreeVisionLib();
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool CheckImage(Image image) {
    bool ret = VisionLabPINVOKE.CheckImage(Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckHeightWidth(Image image1, Image image2) {
    bool ret = VisionLabPINVOKE.CheckHeightWidth__SWIG_0(Image.getCPtr(image1), Image.getCPtr(image2));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckHeightWidth(Image image, int height, int width) {
    bool ret = VisionLabPINVOKE.CheckHeightWidth__SWIG_1(Image.getCPtr(image), height, width);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckHeightWidth(Image image, HeightWidth hw) {
    bool ret = VisionLabPINVOKE.CheckHeightWidth__SWIG_2(Image.getCPtr(image), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckXYCoordInImage(Image image, XYCoord xy) {
    bool ret = VisionLabPINVOKE.CheckXYCoordInImage(Image.getCPtr(image), XYCoord.getCPtr(xy));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckCoord2DInImage(Image image, Coord2D xy) {
    bool ret = VisionLabPINVOKE.CheckCoord2DInImage(Image.getCPtr(image), Coord2D.getCPtr(xy));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SameImage(Image image1, Image image2) {
    bool ret = VisionLabPINVOKE.SameImage(Image.getCPtr(image1), Image.getCPtr(image2));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string IOTypeToStr(IOType b) {
    string ret = VisionLabPINVOKE.IOTypeToStr((int)b);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IOType StrToIOType(string str) {
    IOType ret = (IOType)VisionLabPINVOKE.StrToIOType(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth AddBorderHW(Image src, int top, int left, int right, int bottom) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.AddBorderHW(Image.getCPtr(src), top, left, right, bottom), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth Enlarge2HW(Image src) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.Enlarge2HW(Image.getCPtr(src)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth ExtendBorderHW(Image src, int top, int left, int right, int bottom) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.ExtendBorderHW__SWIG_0(Image.getCPtr(src), top, left, right, bottom), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth ExtendBorderHW(Image src, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.ExtendBorderHW__SWIG_1(Image.getCPtr(src), MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth Reduce2HW(Image src) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.Reduce2HW(Image.getCPtr(src)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth RotateFullHW(Image src, double phi, XYCoord trans) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.RotateFullHW(Image.getCPtr(src), phi, XYCoord.getCPtr(trans)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool WarpCoordsValid(Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom) {
    bool ret = VisionLabPINVOKE.WarpCoordsValid(Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string AxisTypeToStr(AxisType at) {
    string ret = VisionLabPINVOKE.AxisTypeToStr((int)at);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AxisType StrToAxisType(string at) {
    AxisType ret = (AxisType)VisionLabPINVOKE.StrToAxisType(at);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string AxisMappingToStr(AxisMapping am) {
    string ret = VisionLabPINVOKE.AxisMappingToStr((int)am);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AxisMapping StrToAxisMapping(string am) {
    AxisMapping ret = (AxisMapping)VisionLabPINVOKE.StrToAxisMapping(am);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string FixEdgeToStr(FixEdge edge) {
    string ret = VisionLabPINVOKE.FixEdgeToStr((int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FixEdge StrToFixEdge(string str) {
    FixEdge ret = (FixEdge)VisionLabPINVOKE.StrToFixEdge(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string PixelInterpolationToStr(PixelInterpolation pi) {
    string ret = VisionLabPINVOKE.PixelInterpolationToStr((int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PixelInterpolation StrToPixelInterpolation(string str) {
    PixelInterpolation ret = (PixelInterpolation)VisionLabPINVOKE.StrToPixelInterpolation(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MirrorOperationToStr(MirrorOperation m) {
    string ret = VisionLabPINVOKE.MirrorOperationToStr((int)m);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MirrorOperation StrToMirrorOperation(string str) {
    MirrorOperation ret = (MirrorOperation)VisionLabPINVOKE.StrToMirrorOperation(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string OrientationToStr(Orientation orien) {
    string ret = VisionLabPINVOKE.OrientationToStr((int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Orientation StrToOrientation(string str) {
    Orientation ret = (Orientation)VisionLabPINVOKE.StrToOrientation(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BorderToStr(Border b) {
    string ret = VisionLabPINVOKE.BorderToStr((int)b);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Border StrToBorder(string str) {
    Border ret = (Border)VisionLabPINVOKE.StrToBorder(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string TransformDirectionToStr(TransformDirection dir) {
    string ret = VisionLabPINVOKE.TransformDirectionToStr((int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TransformDirection StrToTransformDirection(string str) {
    TransformDirection ret = (TransformDirection)VisionLabPINVOKE.StrToTransformDirection(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ZeroOrOriginalToStr(ZeroOrOriginal dir) {
    string ret = VisionLabPINVOKE.ZeroOrOriginalToStr((int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ZeroOrOriginal StrToZeroOrOriginal(string str) {
    ZeroOrOriginal ret = (ZeroOrOriginal)VisionLabPINVOKE.StrToZeroOrOriginal(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ObjectBrightnessToStr(ObjectBrightness o) {
    string ret = VisionLabPINVOKE.ObjectBrightnessToStr((int)o);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ObjectBrightness StrToObjectBrightness(string str) {
    ObjectBrightness ret = (ObjectBrightness)VisionLabPINVOKE.StrToObjectBrightness(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BinningModeToStr(BinningMode m) {
    string ret = VisionLabPINVOKE.BinningModeToStr((int)m);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BinningMode StrToBinningMode(string str) {
    BinningMode ret = (BinningMode)VisionLabPINVOKE.StrToBinningMode(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ViewPointToStr(ViewPoint vp) {
    string ret = VisionLabPINVOKE.ViewPointToStr((int)vp);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ViewPoint StrToViewPoint(string vp) {
    ViewPoint ret = (ViewPoint)VisionLabPINVOKE.StrToViewPoint(vp);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ConnectedToStr(Connected con) {
    string ret = VisionLabPINVOKE.ConnectedToStr((int)con);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Connected StrToConnected(string str) {
    Connected ret = (Connected)VisionLabPINVOKE.StrToConnected(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ConvComplexToStr(ConvComplex kind) {
    string ret = VisionLabPINVOKE.ConvComplexToStr((int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ConvComplex StrToConvComplex(string str) {
    ConvComplex ret = (ConvComplex)VisionLabPINVOKE.StrToConvComplex(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ConvertRGB888PixelToInt(RGB888Pixel rgb) {
    int ret = VisionLabPINVOKE.ConvertRGB888PixelToInt(RGB888Pixel.getCPtr(rgb));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RGB888Pixel ConvertIntToRGB888Pixel(int i) {
    RGB888Pixel ret = new RGB888Pixel(VisionLabPINVOKE.ConvertIntToRGB888Pixel(i), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ConvertRGB161616PixelToInt(RGB161616Pixel rgb) {
    int ret = VisionLabPINVOKE.ConvertRGB161616PixelToInt(RGB161616Pixel.getCPtr(rgb));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RGB161616Pixel ConvertIntToRGB161616Pixel(int i) {
    RGB161616Pixel ret = new RGB161616Pixel(VisionLabPINVOKE.ConvertIntToRGB161616Pixel(i), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RGB161616Pixel ConvertRGB888PixelTo161616(RGB888Pixel pixel) {
    RGB161616Pixel ret = new RGB161616Pixel(VisionLabPINVOKE.ConvertRGB888PixelTo161616(RGB888Pixel.getCPtr(pixel)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RGB888Pixel ConvertRGB161616PixelTo888(RGB161616Pixel pixel) {
    RGB888Pixel ret = new RGB888Pixel(VisionLabPINVOKE.ConvertRGB161616PixelTo888(RGB161616Pixel.getCPtr(pixel)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string RGB888PixelToStr(RGB888Pixel p) {
    string ret = VisionLabPINVOKE.RGB888PixelToStr(RGB888Pixel.getCPtr(p));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RGB888Pixel StrToRGB888Pixel(string str) {
    RGB888Pixel ret = new RGB888Pixel(VisionLabPINVOKE.StrToRGB888Pixel(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string RGB161616PixelToStr(RGB161616Pixel p) {
    string ret = VisionLabPINVOKE.RGB161616PixelToStr(RGB161616Pixel.getCPtr(p));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RGB161616Pixel StrToRGB161616Pixel(string str) {
    RGB161616Pixel ret = new RGB161616Pixel(VisionLabPINVOKE.StrToRGB161616Pixel(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string RGBColorToStr(RGBColor col) {
    string ret = VisionLabPINVOKE.RGBColorToStr((int)col);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RGBColor StrToRGBColor(string str) {
    RGBColor ret = (RGBColor)VisionLabPINVOKE.StrToRGBColor(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ConvertRGB888To161616Image(RGB888Image src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertRGB888To161616Image(RGB888Image.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB161616To888Image(RGB161616Image src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertRGB161616To888Image(RGB161616Image.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static CFAType CFATypeROIConversion(CFAType type, int topLeftX, int topLeftY) {
    CFAType ret = (CFAType)VisionLabPINVOKE.CFATypeROIConversion((int)type, topLeftX, topLeftY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string CFATypeToStr(CFAType cfa) {
    string ret = VisionLabPINVOKE.CFATypeToStr((int)cfa);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CFAType StrToCFAType(string str) {
    CFAType ret = (CFAType)VisionLabPINVOKE.StrToCFAType(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ConvertYUV888PixelToInt(YUV888Pixel yuv) {
    int ret = VisionLabPINVOKE.ConvertYUV888PixelToInt(YUV888Pixel.getCPtr(yuv));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static YUV888Pixel ConvertIntToYUV888Pixel(int i) {
    YUV888Pixel ret = new YUV888Pixel(VisionLabPINVOKE.ConvertIntToYUV888Pixel(i), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ConvertYUV161616PixelToInt(YUV161616Pixel yuv) {
    int ret = VisionLabPINVOKE.ConvertYUV161616PixelToInt(YUV161616Pixel.getCPtr(yuv));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static YUV161616Pixel ConvertIntToYUV161616Pixel(int i) {
    YUV161616Pixel ret = new YUV161616Pixel(VisionLabPINVOKE.ConvertIntToYUV161616Pixel(i), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static YUV161616Pixel ConvertYUV888PixelTo161616(YUV888Pixel pixel) {
    YUV161616Pixel ret = new YUV161616Pixel(VisionLabPINVOKE.ConvertYUV888PixelTo161616(YUV888Pixel.getCPtr(pixel)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static YUV888Pixel ConvertYUV161616PixelTo888(YUV161616Pixel pixel) {
    YUV888Pixel ret = new YUV888Pixel(VisionLabPINVOKE.ConvertYUV161616PixelTo888(YUV161616Pixel.getCPtr(pixel)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string YUV888PixelToStr(YUV888Pixel p) {
    string ret = VisionLabPINVOKE.YUV888PixelToStr(YUV888Pixel.getCPtr(p));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static YUV888Pixel StrToYUV888Pixel(string str) {
    YUV888Pixel ret = new YUV888Pixel(VisionLabPINVOKE.StrToYUV888Pixel(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string YUV161616PixelToStr(YUV161616Pixel p) {
    string ret = VisionLabPINVOKE.YUV161616PixelToStr(YUV161616Pixel.getCPtr(p));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static YUV161616Pixel StrToYUV161616Pixel(string str) {
    YUV161616Pixel ret = new YUV161616Pixel(VisionLabPINVOKE.StrToYUV161616Pixel(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string YUVColorToStr(YUVColor col) {
    string ret = VisionLabPINVOKE.YUVColorToStr((int)col);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static YUVColor StrToYUVColor(string str) {
    YUVColor ret = (YUVColor)VisionLabPINVOKE.StrToYUVColor(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RGB888Pixel ConvertYUV888ToRGB888Pixel(YUV888Pixel yuv) {
    RGB888Pixel ret = new RGB888Pixel(VisionLabPINVOKE.ConvertYUV888ToRGB888Pixel(YUV888Pixel.getCPtr(yuv)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static YUV888Pixel ConvertRGB888ToYUV888Pixel(RGB888Pixel rgb) {
    YUV888Pixel ret = new YUV888Pixel(VisionLabPINVOKE.ConvertRGB888ToYUV888Pixel(RGB888Pixel.getCPtr(rgb)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RGB161616Pixel ConvertYUV161616ToRGB161616Pixel(YUV161616Pixel yuv) {
    RGB161616Pixel ret = new RGB161616Pixel(VisionLabPINVOKE.ConvertYUV161616ToRGB161616Pixel(YUV161616Pixel.getCPtr(yuv)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static YUV161616Pixel ConvertRGB161616ToYUV161616Pixel(RGB161616Pixel rgb) {
    YUV161616Pixel ret = new YUV161616Pixel(VisionLabPINVOKE.ConvertRGB161616ToYUV161616Pixel(RGB161616Pixel.getCPtr(rgb)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ConvertYUV888ToRGB888Image(YUV888Image src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertYUV888ToRGB888Image(YUV888Image.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB888ToYUV888Image(RGB888Image src, YUV888Image dest) {
    VisionLabPINVOKE.ConvertRGB888ToYUV888Image(RGB888Image.getCPtr(src), YUV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertYUV161616ToRGB161616Image(YUV161616Image src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertYUV161616ToRGB161616Image(YUV161616Image.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB161616ToYUV161616Image(RGB161616Image src, YUV161616Image dest) {
    VisionLabPINVOKE.ConvertRGB161616ToYUV161616Image(RGB161616Image.getCPtr(src), YUV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertYUV888To161616Image(YUV888Image src, YUV161616Image dest) {
    VisionLabPINVOKE.ConvertYUV888To161616Image(YUV888Image.getCPtr(src), YUV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertYUV161616To888Image(YUV161616Image src, YUV888Image dest) {
    VisionLabPINVOKE.ConvertYUV161616To888Image(YUV161616Image.getCPtr(src), YUV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static short MaxHue16 {
    get {
      short ret = VisionLabPINVOKE.MaxHue16_get();
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static short MaxSaturation16 {
    get {
      short ret = VisionLabPINVOKE.MaxSaturation16_get();
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static short ModuloHue16(int value) {
    short ret = VisionLabPINVOKE.ModuloHue16(value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ConvertHSV888PixelToInt(HSV888Pixel pixel) {
    int ret = VisionLabPINVOKE.ConvertHSV888PixelToInt(HSV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HSV888Pixel ConvertIntToHSV888Pixel(int i) {
    HSV888Pixel ret = new HSV888Pixel(VisionLabPINVOKE.ConvertIntToHSV888Pixel(i), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ConvertHSV161616PixelToInt(HSV161616Pixel pixel) {
    int ret = VisionLabPINVOKE.ConvertHSV161616PixelToInt(HSV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HSV161616Pixel ConvertIntToHSV161616Pixel(int i) {
    HSV161616Pixel ret = new HSV161616Pixel(VisionLabPINVOKE.ConvertIntToHSV161616Pixel(i), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HSV161616Pixel ConvertHSV888PixelTo161616(HSV888Pixel pixel) {
    HSV161616Pixel ret = new HSV161616Pixel(VisionLabPINVOKE.ConvertHSV888PixelTo161616(HSV888Pixel.getCPtr(pixel)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HSV888Pixel ConvertHSV161616PixelTo888(HSV161616Pixel pixel) {
    HSV888Pixel ret = new HSV888Pixel(VisionLabPINVOKE.ConvertHSV161616PixelTo888(HSV161616Pixel.getCPtr(pixel)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string HSV888PixelToStr(HSV888Pixel p) {
    string ret = VisionLabPINVOKE.HSV888PixelToStr(HSV888Pixel.getCPtr(p));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HSV888Pixel StrToHSV888Pixel(string str) {
    HSV888Pixel ret = new HSV888Pixel(VisionLabPINVOKE.StrToHSV888Pixel(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string HSV161616PixelToStr(HSV161616Pixel p) {
    string ret = VisionLabPINVOKE.HSV161616PixelToStr(HSV161616Pixel.getCPtr(p));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HSV161616Pixel StrToHSV161616Pixel(string str) {
    HSV161616Pixel ret = new HSV161616Pixel(VisionLabPINVOKE.StrToHSV161616Pixel(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string HSVColorToStr(HSVColor col) {
    string ret = VisionLabPINVOKE.HSVColorToStr((int)col);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HSVColor StrToHSVColor(string str) {
    HSVColor ret = (HSVColor)VisionLabPINVOKE.StrToHSVColor(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RGB888Pixel ConvertHSV888ToRGB888Pixel(HSV888Pixel hsv) {
    RGB888Pixel ret = new RGB888Pixel(VisionLabPINVOKE.ConvertHSV888ToRGB888Pixel(HSV888Pixel.getCPtr(hsv)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HSV888Pixel ConvertRGB888ToHSV888Pixel(RGB888Pixel rgb) {
    HSV888Pixel ret = new HSV888Pixel(VisionLabPINVOKE.ConvertRGB888ToHSV888Pixel(RGB888Pixel.getCPtr(rgb)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RGB161616Pixel ConvertHSV161616ToRGB161616Pixel(HSV161616Pixel hsv) {
    RGB161616Pixel ret = new RGB161616Pixel(VisionLabPINVOKE.ConvertHSV161616ToRGB161616Pixel(HSV161616Pixel.getCPtr(hsv)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HSV161616Pixel ConvertRGB161616ToHSV161616Pixel(RGB161616Pixel rgb) {
    HSV161616Pixel ret = new HSV161616Pixel(VisionLabPINVOKE.ConvertRGB161616ToHSV161616Pixel(RGB161616Pixel.getCPtr(rgb)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ConvertHSV888ToRGB888Image(HSV888Image src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertHSV888ToRGB888Image(HSV888Image.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB888ToHSV888Image(RGB888Image src, HSV888Image dest) {
    VisionLabPINVOKE.ConvertRGB888ToHSV888Image(RGB888Image.getCPtr(src), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertHSV161616ToRGB161616Image(HSV161616Image src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertHSV161616ToRGB161616Image(HSV161616Image.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB161616ToHSV161616Image(RGB161616Image src, HSV161616Image dest) {
    VisionLabPINVOKE.ConvertRGB161616ToHSV161616Image(RGB161616Image.getCPtr(src), HSV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertHSV888To161616Image(HSV888Image src, HSV161616Image dest) {
    VisionLabPINVOKE.ConvertHSV888To161616Image(HSV888Image.getCPtr(src), HSV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertHSV161616To888Image(HSV161616Image src, HSV888Image dest) {
    VisionLabPINVOKE.ConvertHSV161616To888Image(HSV161616Image.getCPtr(src), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InitFastYUVToHSV() {
    VisionLabPINVOKE.InitFastYUVToHSV();
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InitFastRGBToHSV() {
    VisionLabPINVOKE.InitFastRGBToHSV();
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreeFastYUVToHSV() {
    VisionLabPINVOKE.FreeFastYUVToHSV();
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreeFastRGBToHSV() {
    VisionLabPINVOKE.FreeFastRGBToHSV();
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastYUVToHSV(YUV888Image src, HSV888Image dest) {
    VisionLabPINVOKE.FastYUVToHSV(YUV888Image.getCPtr(src), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastRGBToHSV(RGB888Image src, HSV888Image dest) {
    VisionLabPINVOKE.FastRGBToHSV(RGB888Image.getCPtr(src), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string EDTMaskToStr(EDTMask mask) {
    string ret = VisionLabPINVOKE.EDTMaskToStr((int)mask);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EDTMask StrToEDTMask(string str) {
    EDTMask ret = (EDTMask)VisionLabPINVOKE.StrToEDTMask(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string EDTScaleToStr(EDTScale scale) {
    string ret = VisionLabPINVOKE.EDTScaleToStr((int)scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EDTScale StrToEDTScale(string str) {
    EDTScale ret = (EDTScale)VisionLabPINVOKE.StrToEDTScale(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ChainCodeTypeToStr(ChainCodeType c) {
    string ret = VisionLabPINVOKE.ChainCodeTypeToStr((int)c);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChainCodeType StrToChainCodeType(string str) {
    ChainCodeType ret = (ChainCodeType)VisionLabPINVOKE.StrToChainCodeType(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ChainCode4DirToStr(ChainCode4Dir c) {
    string ret = VisionLabPINVOKE.ChainCode4DirToStr((int)c);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChainCode4Dir StrToChainCode4Dir(string str) {
    ChainCode4Dir ret = (ChainCode4Dir)VisionLabPINVOKE.StrToChainCode4Dir(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ChainCode8DirToStr(ChainCode8Dir c) {
    string ret = VisionLabPINVOKE.ChainCode8DirToStr((int)c);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChainCode8Dir StrToChainCode8Dir(string str) {
    ChainCode8Dir ret = (ChainCode8Dir)VisionLabPINVOKE.StrToChainCode8Dir(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GradientToStr(Gradient edge) {
    string ret = VisionLabPINVOKE.GradientToStr((int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Gradient StrToGradient(string str) {
    Gradient ret = (Gradient)VisionLabPINVOKE.StrToGradient(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth ConvolutionHW(Image src, FixEdge edge, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.ConvolutionHW(Image.getCPtr(src), (int)edge, MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Convolution(ComplexFloatImage image, ComplexFloatImage mask) {
    VisionLabPINVOKE.Convolution__SWIG_2(ComplexFloatImage.getCPtr(image), ComplexFloatImage.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(ComplexDoubleImage image, ComplexDoubleImage mask) {
    VisionLabPINVOKE.Convolution__SWIG_3(ComplexDoubleImage.getCPtr(image), ComplexDoubleImage.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(RGB888Image image, RGB888Image mask) {
    VisionLabPINVOKE.Convolution__SWIG_4(RGB888Image.getCPtr(image), RGB888Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(RGB161616Image image, RGB161616Image mask) {
    VisionLabPINVOKE.Convolution__SWIG_5(RGB161616Image.getCPtr(image), RGB161616Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(HSV888Image image, HSV888Image mask) {
    VisionLabPINVOKE.Convolution__SWIG_6(HSV888Image.getCPtr(image), HSV888Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(HSV161616Image image, HSV161616Image mask) {
    VisionLabPINVOKE.Convolution__SWIG_7(HSV161616Image.getCPtr(image), HSV161616Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(YUV888Image image, YUV888Image mask) {
    VisionLabPINVOKE.Convolution__SWIG_8(YUV888Image.getCPtr(image), YUV888Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(YUV161616Image image, YUV161616Image mask) {
    VisionLabPINVOKE.Convolution__SWIG_9(YUV161616Image.getCPtr(image), YUV161616Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static HeightWidth LocalMaxFilterHW(Image src, FixEdge edge, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.LocalMaxFilterHW(Image.getCPtr(src), (int)edge, MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth MaximumFilterHW(Image src, FixEdge edge, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.MaximumFilterHW(Image.getCPtr(src), (int)edge, MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth MeanFilterHW(Image src, FixEdge edge, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.MeanFilterHW(Image.getCPtr(src), (int)edge, MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth MedianFilterHW(Image src, FixEdge edge, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.MedianFilterHW(Image.getCPtr(src), (int)edge, MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth MinimumFilterHW(Image src, FixEdge edge, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.MinimumFilterHW(Image.getCPtr(src), (int)edge, MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth ModeFilterHW(Image src, FixEdge edge, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.ModeFilterHW(Image.getCPtr(src), (int)edge, MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth NthFilterHW(Image src, FixEdge edge, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.NthFilterHW(Image.getCPtr(src), (int)edge, MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth RangeFilterHW(Image src, FixEdge edge, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.RangeFilterHW(Image.getCPtr(src), (int)edge, MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth SigmaFilterHW(Image src, FixEdge edge, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.SigmaFilterHW(Image.getCPtr(src), (int)edge, MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HeightWidth VarianceFilterHW(Image src, FixEdge edge, MaskBase mask) {
    HeightWidth ret = new HeightWidth(VisionLabPINVOKE.VarianceFilterHW(Image.getCPtr(src), (int)edge, MaskBase.getCPtr(mask)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string HistogramToStr(Histogram his) {
    string ret = VisionLabPINVOKE.HistogramToStr(Histogram.getCPtr(his));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram StrToHistogram(string str) {
    Histogram ret = new Histogram(VisionLabPINVOKE.StrToHistogram(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string HistogramTypeToStr(HistogramType t) {
    string ret = VisionLabPINVOKE.HistogramTypeToStr((int)t);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HistogramType StrToHistogramType(string str) {
    HistogramType ret = (HistogramType)VisionLabPINVOKE.StrToHistogramType(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string CamCalibrationToStr(CamCalibration cal) {
    string ret = VisionLabPINVOKE.CamCalibrationToStr(CamCalibration.getCPtr(cal));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CamCalibration StrToCamCalibration(string str) {
    CamCalibration ret = new CamCalibration(VisionLabPINVOKE.StrToCamCalibration(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord CorrectXYCoord(XYCoord xy, int height, int width, Coord2D principlePoint, double sx, double dx, double dy, double k1, double k2, double k3) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.CorrectXYCoord(XYCoord.getCPtr(xy), height, width, Coord2D.getCPtr(principlePoint), sx, dx, dy, k1, k2, k3), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Coord2D CorrectCoord2D(Coord2D xy, int height, int width, Coord2D principlePoint, double sx, double dx, double dy, double k1, double k2, double k3) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.CorrectCoord2D(Coord2D.getCPtr(xy), height, width, Coord2D.getCPtr(principlePoint), sx, dx, dy, k1, k2, k3), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(SWIGTYPE_p_JL_VisionLib_V3__CameraT_JL_VisionLib_V3__ColorImageT_JL_VisionLib_V3__RGB888Pixel_t_t cam, XYCoord c1, XYCoord c2, RGB888Pixel low, RGB888Pixel high, int minPixels, RGB888Image image, int maxSnapShots) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_2(SWIGTYPE_p_JL_VisionLib_V3__CameraT_JL_VisionLib_V3__ColorImageT_JL_VisionLib_V3__RGB888Pixel_t_t.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), RGB888Pixel.getCPtr(low), RGB888Pixel.getCPtr(high), minPixels, RGB888Image.getCPtr(image), maxSnapShots);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(SWIGTYPE_p_JL_VisionLib_V3__CameraT_JL_VisionLib_V3__ColorImageT_JL_VisionLib_V3__RGB888Pixel_t_t cam, XYCoord c1, XYCoord c2, RGB888Pixel low, RGB888Pixel high, int minPixels, RGB888Image image) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_3(SWIGTYPE_p_JL_VisionLib_V3__CameraT_JL_VisionLib_V3__ColorImageT_JL_VisionLib_V3__RGB888Pixel_t_t.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), RGB888Pixel.getCPtr(low), RGB888Pixel.getCPtr(high), minPixels, RGB888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BarCodeTypeToStr(BarCodeType t) {
    string ret = VisionLabPINVOKE.BarCodeTypeToStr((int)t);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeType StrToBarCodeType(string str) {
    BarCodeType ret = (BarCodeType)VisionLabPINVOKE.StrToBarCodeType(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BarCodeResToStr(BarCodeRes r) {
    string ret = VisionLabPINVOKE.BarCodeResToStr((int)r);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes StrToBarCodeRes(string str) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.StrToBarCodeRes(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BarCodeScanDirToStr(BarCodeScanDir s) {
    string ret = VisionLabPINVOKE.BarCodeScanDirToStr((int)s);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeScanDir StrToBarCodeScanDir(string str) {
    BarCodeScanDir ret = (BarCodeScanDir)VisionLabPINVOKE.StrToBarCodeScanDir(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BarCodeCheckToStr(BarCodeCheck s) {
    string ret = VisionLabPINVOKE.BarCodeCheckToStr((int)s);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeCheck StrToBarCodeCheck(string str) {
    BarCodeCheck ret = (BarCodeCheck)VisionLabPINVOKE.StrToBarCodeCheck(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void GetCounter(SWIGTYPE_p_unsigned_long_long t) {
    VisionLabPINVOKE.GetCounter(SWIGTYPE_p_unsigned_long_long.getCPtr(t));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetCounterFreq(SWIGTYPE_p_unsigned_long_long f) {
    VisionLabPINVOKE.GetCounterFreq(SWIGTYPE_p_unsigned_long_long.getCPtr(f));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ParamsToArrayStr(vector_double p, vector_string vs) {
    VisionLabPINVOKE.ParamsToArrayStr(vector_double.getCPtr(p), vector_string.getCPtr(vs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string ParamsToStr(vector_double v) {
    string ret = VisionLabPINVOKE.ParamsToStr(vector_double.getCPtr(v));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_double StrToParams(string str) {
    vector_double ret = new vector_double(VisionLabPINVOKE.StrToParams(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string PopulationToStr(vector_vector_double v) {
    string ret = VisionLabPINVOKE.PopulationToStr(vector_vector_double.getCPtr(v));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_vector_double StrToPopulation(string str) {
    vector_vector_double ret = new vector_vector_double(VisionLabPINVOKE.StrToPopulation(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string FPParamDescToStr(FPParamDesc v) {
    string ret = VisionLabPINVOKE.FPParamDescToStr(FPParamDesc.getCPtr(v));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FPParamDesc StrToFPParamDesc(string str) {
    FPParamDesc ret = new FPParamDesc(VisionLabPINVOKE.StrToFPParamDesc(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string FPParamDescTabToStr(vector_FPParamDesc v) {
    string ret = VisionLabPINVOKE.FPParamDescTabToStr(vector_FPParamDesc.getCPtr(v));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_FPParamDesc StrToFPParamDescTab(string str) {
    vector_FPParamDesc ret = new vector_FPParamDesc(VisionLabPINVOKE.StrToFPParamDescTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCPCalib calibMCP {
    set {
      VisionLabPINVOKE.calibMCP_set(MCPCalib.getCPtr(value));
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = VisionLabPINVOKE.calibMCP_get();
      MCPCalib ret = (cPtr == IntPtr.Zero) ? null : new MCPCalib(cPtr, false);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MCPCalibTabToStr(vector_MCPCalibTabElm tab) {
    string ret = VisionLabPINVOKE.MCPCalibTabToStr(vector_MCPCalibTabElm.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_MCPCalibTabElm StrToMCPCalibTab(string str) {
    vector_MCPCalibTabElm ret = new vector_MCPCalibTabElm(VisionLabPINVOKE.StrToMCPCalibTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MCPCalibToStr(MCPCalib cal) {
    string ret = VisionLabPINVOKE.MCPCalibToStr(MCPCalib.getCPtr(cal));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCPCalib StrToMCPCalib(string str) {
    MCPCalib ret = new MCPCalib(VisionLabPINVOKE.StrToMCPCalib(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_double GetSelectedFeatures(vector_double features, vector_bool selected) {
    vector_double ret = new vector_double(VisionLabPINVOKE.GetSelectedFeatures(vector_double.getCPtr(features), vector_bool.getCPtr(selected)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ActivationFunctionToStr(ActivationFunction t) {
    string ret = VisionLabPINVOKE.ActivationFunctionToStr((int)t);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ActivationFunction StrToActivationFunction(string str) {
    ActivationFunction ret = (ActivationFunction)VisionLabPINVOKE.StrToActivationFunction(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BiasNodesToStr(BiasNodes b) {
    string ret = VisionLabPINVOKE.BiasNodesToStr((int)b);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string VectorOfDoublesToStr(vector_double v) {
    string ret = VisionLabPINVOKE.VectorOfDoublesToStr(vector_double.getCPtr(v));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_double StrToVectorOfDoubles(string str) {
    vector_double ret = new vector_double(VisionLabPINVOKE.StrToVectorOfDoubles(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string VectorOfBoolsToStr(vector_bool v) {
    string ret = VisionLabPINVOKE.VectorOfBoolsToStr(vector_bool.getCPtr(v));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_bool StrToVectorOfBools(string str) {
    vector_bool ret = new vector_bool(VisionLabPINVOKE.StrToVectorOfBools(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MinMaxInputToStr(MinMaxInput xy) {
    string ret = VisionLabPINVOKE.MinMaxInputToStr(MinMaxInput.getCPtr(xy));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MinMaxInput StrToMinMaxInput(string str) {
    MinMaxInput ret = new MinMaxInput(VisionLabPINVOKE.StrToMinMaxInput(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MinMaxInputTabToStr(vector_MinMaxInput tab) {
    string ret = VisionLabPINVOKE.MinMaxInputTabToStr(vector_MinMaxInput.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_MinMaxInput StrToMinMaxInputTab(string str) {
    vector_MinMaxInput ret = new vector_MinMaxInput(VisionLabPINVOKE.StrToMinMaxInputTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ClassTabToStr(SWIGTYPE_p_std__mapT_std__string_int_t t) {
    string ret = VisionLabPINVOKE.ClassTabToStr(SWIGTYPE_p_std__mapT_std__string_int_t.getCPtr(t));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__mapT_std__string_int_t StrToClassTab(string str) {
    SWIGTYPE_p_std__mapT_std__string_int_t ret = new SWIGTYPE_p_std__mapT_std__string_int_t(VisionLabPINVOKE.StrToClassTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BlobAnalyseModifier defaultBAModifier {
    set {
      VisionLabPINVOKE.defaultBAModifier_set(BlobAnalyseModifier.getCPtr(value));
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = VisionLabPINVOKE.defaultBAModifier_get();
      BlobAnalyseModifier ret = (cPtr == IntPtr.Zero) ? null : new BlobAnalyseModifier(cPtr, false);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double BlobFieldToDouble(Blob b, BlobAnalyse ba, UseXOrY xy) {
    double ret = VisionLabPINVOKE.BlobFieldToDouble__SWIG_0(Blob.getCPtr(b), (int)ba, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double BlobFieldToDouble(Blob b, BlobAnalyse ba) {
    double ret = VisionLabPINVOKE.BlobFieldToDouble__SWIG_1(Blob.getCPtr(b), (int)ba);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int BlobFieldToInt(Blob b, BlobAnalyse ba, int scale, UseXOrY xy) {
    int ret = VisionLabPINVOKE.BlobFieldToInt__SWIG_0(Blob.getCPtr(b), (int)ba, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int BlobFieldToInt(Blob b, BlobAnalyse ba, int scale) {
    int ret = VisionLabPINVOKE.BlobFieldToInt__SWIG_1(Blob.getCPtr(b), (int)ba, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int BlobFieldToInt(Blob b, BlobAnalyse ba) {
    int ret = VisionLabPINVOKE.BlobFieldToInt__SWIG_2(Blob.getCPtr(b), (int)ba);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsTheSame(vector_Blob b1, vector_Blob b2, double dev) {
    bool ret = VisionLabPINVOKE.IsTheSame__SWIG_1(vector_Blob.getCPtr(b1), vector_Blob.getCPtr(b2), dev);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BlobToStr(Blob b) {
    string ret = VisionLabPINVOKE.BlobToStr(Blob.getCPtr(b));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Blob StrToBlob(string str) {
    Blob ret = new Blob(VisionLabPINVOKE.StrToBlob(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string SortOrderToStr(SortOrder s) {
    string ret = VisionLabPINVOKE.SortOrderToStr((int)s);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SortOrder StrToSortOrder(string str) {
    SortOrder ret = (SortOrder)VisionLabPINVOKE.StrToSortOrder(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BlobAnalyseToStr(BlobAnalyse b) {
    string ret = VisionLabPINVOKE.BlobAnalyseToStr((int)b);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BlobAnalyse StrToBlobAnalyse(string str) {
    BlobAnalyse ret = (BlobAnalyse)VisionLabPINVOKE.StrToBlobAnalyse(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BlobAnalyseSetToStr(SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s) {
    string ret = VisionLabPINVOKE.BlobAnalyseSetToStr(SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t StrToBlobAnalyseSet(string str) {
    SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t ret = new SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t(VisionLabPINVOKE.StrToBlobAnalyseSet(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BlobAnalyseHeaderText(SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, bool csv) {
    string ret = VisionLabPINVOKE.BlobAnalyseHeaderText__SWIG_0(SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), csv);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BlobAnalyseHeaderText(SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s) {
    string ret = VisionLabPINVOKE.BlobAnalyseHeaderText__SWIG_1(SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BlobAnalyseTabToStr(SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, vector_Blob blobs, int precision) {
    string ret = VisionLabPINVOKE.BlobAnalyseTabToStr__SWIG_0(SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), vector_Blob.getCPtr(blobs), precision);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BlobAnalyseTabToStr(SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, vector_Blob blobs) {
    string ret = VisionLabPINVOKE.BlobAnalyseTabToStr__SWIG_1(SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), vector_Blob.getCPtr(blobs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void BlobAnalyseTabToVectorStr(vector_string vs, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, vector_Blob blobs, int precision) {
    VisionLabPINVOKE.BlobAnalyseTabToVectorStr__SWIG_0(vector_string.getCPtr(vs), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), vector_Blob.getCPtr(blobs), precision);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalyseTabToVectorStr(vector_string vs, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, vector_Blob blobs) {
    VisionLabPINVOKE.BlobAnalyseTabToVectorStr__SWIG_1(vector_string.getCPtr(vs), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), vector_Blob.getCPtr(blobs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int NoPatternFound {
    get {
      int ret = VisionLabPINVOKE.NoPatternFound_get();
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string PatternIdToName(SWIGTYPE_p_std__mapT_std__string_int_t tab, int id) {
    string ret = VisionLabPINVOKE.PatternIdToName(SWIGTYPE_p_std__mapT_std__string_int_t.getCPtr(tab), id);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string PatternMatchResultToStr(PatternMatchResult mr) {
    string ret = VisionLabPINVOKE.PatternMatchResultToStr(PatternMatchResult.getCPtr(mr));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PatternMatchResult StrToPatternMatchResult(string str) {
    PatternMatchResult ret = new PatternMatchResult(VisionLabPINVOKE.StrToPatternMatchResult(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string PatternMatchResultTabToStr(vector_PatternMatchResult tab) {
    string ret = VisionLabPINVOKE.PatternMatchResultTabToStr(vector_PatternMatchResult.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_PatternMatchResult StrToPatternMatchResultTab(string str) {
    vector_PatternMatchResult ret = new vector_PatternMatchResult(VisionLabPINVOKE.StrToPatternMatchResultTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string PatternLabelTabToStr(vector_vector_int tab) {
    string ret = VisionLabPINVOKE.PatternLabelTabToStr(vector_vector_int.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_vector_int StrToPatternLabelTab(string str) {
    vector_vector_int ret = new vector_vector_int(VisionLabPINVOKE.StrToPatternLabelTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string PatternNamesTabToStr(SWIGTYPE_p_std__mapT_std__string_int_t t) {
    string ret = VisionLabPINVOKE.PatternNamesTabToStr(SWIGTYPE_p_std__mapT_std__string_int_t.getCPtr(t));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__mapT_std__string_int_t StrToPatternNamesTab(string str) {
    SWIGTYPE_p_std__mapT_std__string_int_t ret = new SWIGTYPE_p_std__mapT_std__string_int_t(VisionLabPINVOKE.StrToPatternNamesTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string PatternEvalResultToStr(PatternEvalResult mr) {
    string ret = VisionLabPINVOKE.PatternEvalResultToStr(PatternEvalResult.getCPtr(mr));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PatternEvalResult StrToPatternEvalResult(string str) {
    PatternEvalResult ret = new PatternEvalResult(VisionLabPINVOKE.StrToPatternEvalResult(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string PatternEvalResultTabToStr(vector_PatternEvalResult tab) {
    string ret = VisionLabPINVOKE.PatternEvalResultTabToStr(vector_PatternEvalResult.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_PatternEvalResult StrToPatternEvalResultTab(string str) {
    vector_PatternEvalResult ret = new vector_PatternEvalResult(VisionLabPINVOKE.StrToPatternEvalResultTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetImageType(Image image) {
    string ret = VisionLabPINVOKE.GetImageType__SWIG_0(Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ConvImageType(string typeIdName) {
    string ret = VisionLabPINVOKE.ConvImageType(typeIdName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image CreateNewImage(string typeName, int height, int width) {
    IntPtr cPtr = VisionLabPINVOKE.CreateNewImage__SWIG_0(typeName, height, width);
    Image ret = (cPtr == IntPtr.Zero) ? null : new Image(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image CreateNewImage(string typeName, int height) {
    IntPtr cPtr = VisionLabPINVOKE.CreateNewImage__SWIG_1(typeName, height);
    Image ret = (cPtr == IntPtr.Zero) ? null : new Image(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image CreateNewImage(string typeName) {
    IntPtr cPtr = VisionLabPINVOKE.CreateNewImage__SWIG_2(typeName);
    Image ret = (cPtr == IntPtr.Zero) ? null : new Image(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image CreateNewImage(string typeName, HeightWidth wh) {
    IntPtr cPtr = VisionLabPINVOKE.CreateNewImage__SWIG_3(typeName, HeightWidth.getCPtr(wh));
    Image ret = (cPtr == IntPtr.Zero) ? null : new Image(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Convert(Image src, Image dest) {
    VisionLabPINVOKE.Convert(Image.getCPtr(src), Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InstallFonts(string fontsFileName) {
    VisionLabPINVOKE.InstallFonts(fontsFileName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string AvailableFonts() {
    string ret = VisionLabPINVOKE.AvailableFonts();
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FontHeight(string font) {
    int ret = VisionLabPINVOKE.FontHeight(font);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string OptimizeToStr(Optimize opt) {
    string ret = VisionLabPINVOKE.OptimizeToStr((int)opt);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Optimize StrToOptimize(string str) {
    Optimize ret = (Optimize)VisionLabPINVOKE.StrToOptimize(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string CamParamTypeToStr(CamParamType t) {
    string ret = VisionLabPINVOKE.CamParamTypeToStr((int)t);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CamParamType StrToCamParamType(string str) {
    CamParamType ret = (CamParamType)VisionLabPINVOKE.StrToCamParamType(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string CamROIToStr(CamROI r) {
    string ret = VisionLabPINVOKE.CamROIToStr(CamROI.getCPtr(r));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CamROI StrToCamROI(string str) {
    CamROI ret = new CamROI(VisionLabPINVOKE.StrToCamROI(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string CamROIsTabToStr(vector_CamROI tab) {
    string ret = VisionLabPINVOKE.CamROIsTabToStr(vector_CamROI.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_CamROI StrToCamROIsTab(string str) {
    vector_CamROI ret = new vector_CamROI(VisionLabPINVOKE.StrToCamROIsTab(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_char_t VectorToSet_char(vector_char v) {
    SWIGTYPE_p_std__setT_char_t ret = new SWIGTYPE_p_std__setT_char_t(VisionLabPINVOKE.VectorToSet_char(vector_char.getCPtr(v)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_double_t VectorToSet_double(vector_double v) {
    SWIGTYPE_p_std__setT_double_t ret = new SWIGTYPE_p_std__setT_double_t(VisionLabPINVOKE.VectorToSet_double(vector_double.getCPtr(v)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_float_t VectorToSet_float(vector_float v) {
    SWIGTYPE_p_std__setT_float_t ret = new SWIGTYPE_p_std__setT_float_t(VisionLabPINVOKE.VectorToSet_float(vector_float.getCPtr(v)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_int_t VectorToSet_int(vector_int v) {
    SWIGTYPE_p_std__setT_int_t ret = new SWIGTYPE_p_std__setT_int_t(VisionLabPINVOKE.VectorToSet_int(vector_int.getCPtr(v)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t VectorToSet_BlobAnalyse(vector_BlobAnalyse v) {
    SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t ret = new SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t(VisionLabPINVOKE.VectorToSet_BlobAnalyse(vector_BlobAnalyse.getCPtr(v)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_short_t VectorToSet_short(vector_short v) {
    SWIGTYPE_p_std__setT_short_t ret = new SWIGTYPE_p_std__setT_short_t(VisionLabPINVOKE.VectorToSet_short(vector_short.getCPtr(v)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_unsigned_char_t VectorToSet_uchar(vector_uchar v) {
    SWIGTYPE_p_std__setT_unsigned_char_t ret = new SWIGTYPE_p_std__setT_unsigned_char_t(VisionLabPINVOKE.VectorToSet_uchar(vector_uchar.getCPtr(v)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__mapT_std__string_int_t VectorsToMap_string_int(vector_string key, vector_int value) {
    SWIGTYPE_p_std__mapT_std__string_int_t ret = new SWIGTYPE_p_std__mapT_std__string_int_t(VisionLabPINVOKE.VectorsToMap_string_int(vector_string.getCPtr(key), vector_int.getCPtr(value)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void MapToVectors_string_int(SWIGTYPE_p_std__mapT_std__string_int_t keyvalue, vector_string key, vector_int value) {
    VisionLabPINVOKE.MapToVectors_string_int(SWIGTYPE_p_std__mapT_std__string_int_t.getCPtr(keyvalue), vector_string.getCPtr(key), vector_int.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumByteImage dest, __NumByteImage source) {
    VisionLabPINVOKE.Add__SWIG_2(__NumByteImage.getCPtr(dest), __NumByteImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumByteImage image, byte pixel) {
    VisionLabPINVOKE.Add__SWIG_3(__NumByteImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumInt8Pixel dest, __NumInt8Pixel source) {
    VisionLabPINVOKE.Add__SWIG_4(__NumInt8Pixel.getCPtr(dest), __NumInt8Pixel.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumInt8Pixel image, char pixel) {
    VisionLabPINVOKE.Add__SWIG_5(__NumInt8Pixel.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumInt16Image dest, __NumInt16Image source) {
    VisionLabPINVOKE.Add__SWIG_6(__NumInt16Image.getCPtr(dest), __NumInt16Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumInt16Image image, short pixel) {
    VisionLabPINVOKE.Add__SWIG_7(__NumInt16Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumInt32Image dest, __NumInt32Image source) {
    VisionLabPINVOKE.Add__SWIG_8(__NumInt32Image.getCPtr(dest), __NumInt32Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumInt32Image image, int pixel) {
    VisionLabPINVOKE.Add__SWIG_9(__NumInt32Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumRGB888Image dest, __NumRGB888Image source) {
    VisionLabPINVOKE.Add__SWIG_10(__NumRGB888Image.getCPtr(dest), __NumRGB888Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumRGB888Image image, RGB888Pixel pixel) {
    VisionLabPINVOKE.Add__SWIG_11(__NumRGB888Image.getCPtr(image), RGB888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumRGB161616Image dest, __NumRGB161616Image source) {
    VisionLabPINVOKE.Add__SWIG_12(__NumRGB161616Image.getCPtr(dest), __NumRGB161616Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumRGB161616Image image, RGB161616Pixel pixel) {
    VisionLabPINVOKE.Add__SWIG_13(__NumRGB161616Image.getCPtr(image), RGB161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumHSV888Image dest, __NumHSV888Image source) {
    VisionLabPINVOKE.Add__SWIG_14(__NumHSV888Image.getCPtr(dest), __NumHSV888Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumHSV888Image image, HSV888Pixel pixel) {
    VisionLabPINVOKE.Add__SWIG_15(__NumHSV888Image.getCPtr(image), HSV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumHSV161616Image dest, __NumHSV161616Image source) {
    VisionLabPINVOKE.Add__SWIG_16(__NumHSV161616Image.getCPtr(dest), __NumHSV161616Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumHSV161616Image image, HSV161616Pixel pixel) {
    VisionLabPINVOKE.Add__SWIG_17(__NumHSV161616Image.getCPtr(image), HSV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumYUV888Image dest, __NumYUV888Image source) {
    VisionLabPINVOKE.Add__SWIG_18(__NumYUV888Image.getCPtr(dest), __NumYUV888Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumYUV888Image image, YUV888Pixel pixel) {
    VisionLabPINVOKE.Add__SWIG_19(__NumYUV888Image.getCPtr(image), YUV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumYUV161616Image dest, __NumYUV161616Image source) {
    VisionLabPINVOKE.Add__SWIG_20(__NumYUV161616Image.getCPtr(dest), __NumYUV161616Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumYUV161616Image image, YUV161616Pixel pixel) {
    VisionLabPINVOKE.Add__SWIG_21(__NumYUV161616Image.getCPtr(image), YUV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumFloatImage dest, __NumFloatImage source) {
    VisionLabPINVOKE.Add__SWIG_22(__NumFloatImage.getCPtr(dest), __NumFloatImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumFloatImage image, float pixel) {
    VisionLabPINVOKE.Add__SWIG_23(__NumFloatImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumDoubleImage dest, __NumDoubleImage source) {
    VisionLabPINVOKE.Add__SWIG_24(__NumDoubleImage.getCPtr(dest), __NumDoubleImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumDoubleImage image, double pixel) {
    VisionLabPINVOKE.Add__SWIG_25(__NumDoubleImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumComplexFloatImage dest, __NumComplexFloatImage source) {
    VisionLabPINVOKE.Add__SWIG_26(__NumComplexFloatImage.getCPtr(dest), __NumComplexFloatImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumComplexFloatImage image, SWIGTYPE_p_std__complexT_float_t pixel) {
    VisionLabPINVOKE.Add__SWIG_27(__NumComplexFloatImage.getCPtr(image), SWIGTYPE_p_std__complexT_float_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumComplexDoubleImage dest, __NumComplexDoubleImage source) {
    VisionLabPINVOKE.Add__SWIG_28(__NumComplexDoubleImage.getCPtr(dest), __NumComplexDoubleImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(__NumComplexDoubleImage image, SWIGTYPE_p_std__complexT_double_t pixel) {
    VisionLabPINVOKE.Add__SWIG_29(__NumComplexDoubleImage.getCPtr(image), SWIGTYPE_p_std__complexT_double_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumByteImage dest, __NumByteImage source) {
    VisionLabPINVOKE.Subtract__SWIG_2(__NumByteImage.getCPtr(dest), __NumByteImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumByteImage image, byte pixel) {
    VisionLabPINVOKE.Subtract__SWIG_3(__NumByteImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumInt8Pixel dest, __NumInt8Pixel source) {
    VisionLabPINVOKE.Subtract__SWIG_4(__NumInt8Pixel.getCPtr(dest), __NumInt8Pixel.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumInt8Pixel image, char pixel) {
    VisionLabPINVOKE.Subtract__SWIG_5(__NumInt8Pixel.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumInt16Image dest, __NumInt16Image source) {
    VisionLabPINVOKE.Subtract__SWIG_6(__NumInt16Image.getCPtr(dest), __NumInt16Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumInt16Image image, short pixel) {
    VisionLabPINVOKE.Subtract__SWIG_7(__NumInt16Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumInt32Image dest, __NumInt32Image source) {
    VisionLabPINVOKE.Subtract__SWIG_8(__NumInt32Image.getCPtr(dest), __NumInt32Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumInt32Image image, int pixel) {
    VisionLabPINVOKE.Subtract__SWIG_9(__NumInt32Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumRGB888Image dest, __NumRGB888Image source) {
    VisionLabPINVOKE.Subtract__SWIG_10(__NumRGB888Image.getCPtr(dest), __NumRGB888Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumRGB888Image image, RGB888Pixel pixel) {
    VisionLabPINVOKE.Subtract__SWIG_11(__NumRGB888Image.getCPtr(image), RGB888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumRGB161616Image dest, __NumRGB161616Image source) {
    VisionLabPINVOKE.Subtract__SWIG_12(__NumRGB161616Image.getCPtr(dest), __NumRGB161616Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumRGB161616Image image, RGB161616Pixel pixel) {
    VisionLabPINVOKE.Subtract__SWIG_13(__NumRGB161616Image.getCPtr(image), RGB161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumHSV888Image dest, __NumHSV888Image source) {
    VisionLabPINVOKE.Subtract__SWIG_14(__NumHSV888Image.getCPtr(dest), __NumHSV888Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumHSV888Image image, HSV888Pixel pixel) {
    VisionLabPINVOKE.Subtract__SWIG_15(__NumHSV888Image.getCPtr(image), HSV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumHSV161616Image dest, __NumHSV161616Image source) {
    VisionLabPINVOKE.Subtract__SWIG_16(__NumHSV161616Image.getCPtr(dest), __NumHSV161616Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumHSV161616Image image, HSV161616Pixel pixel) {
    VisionLabPINVOKE.Subtract__SWIG_17(__NumHSV161616Image.getCPtr(image), HSV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumYUV888Image dest, __NumYUV888Image source) {
    VisionLabPINVOKE.Subtract__SWIG_18(__NumYUV888Image.getCPtr(dest), __NumYUV888Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumYUV888Image image, YUV888Pixel pixel) {
    VisionLabPINVOKE.Subtract__SWIG_19(__NumYUV888Image.getCPtr(image), YUV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumYUV161616Image dest, __NumYUV161616Image source) {
    VisionLabPINVOKE.Subtract__SWIG_20(__NumYUV161616Image.getCPtr(dest), __NumYUV161616Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumYUV161616Image image, YUV161616Pixel pixel) {
    VisionLabPINVOKE.Subtract__SWIG_21(__NumYUV161616Image.getCPtr(image), YUV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumFloatImage dest, __NumFloatImage source) {
    VisionLabPINVOKE.Subtract__SWIG_22(__NumFloatImage.getCPtr(dest), __NumFloatImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumFloatImage image, float pixel) {
    VisionLabPINVOKE.Subtract__SWIG_23(__NumFloatImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumDoubleImage dest, __NumDoubleImage source) {
    VisionLabPINVOKE.Subtract__SWIG_24(__NumDoubleImage.getCPtr(dest), __NumDoubleImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumDoubleImage image, double pixel) {
    VisionLabPINVOKE.Subtract__SWIG_25(__NumDoubleImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumComplexFloatImage dest, __NumComplexFloatImage source) {
    VisionLabPINVOKE.Subtract__SWIG_26(__NumComplexFloatImage.getCPtr(dest), __NumComplexFloatImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumComplexFloatImage image, SWIGTYPE_p_std__complexT_float_t pixel) {
    VisionLabPINVOKE.Subtract__SWIG_27(__NumComplexFloatImage.getCPtr(image), SWIGTYPE_p_std__complexT_float_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumComplexDoubleImage dest, __NumComplexDoubleImage source) {
    VisionLabPINVOKE.Subtract__SWIG_28(__NumComplexDoubleImage.getCPtr(dest), __NumComplexDoubleImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(__NumComplexDoubleImage image, SWIGTYPE_p_std__complexT_double_t pixel) {
    VisionLabPINVOKE.Subtract__SWIG_29(__NumComplexDoubleImage.getCPtr(image), SWIGTYPE_p_std__complexT_double_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumByteImage image, __NumByteImage divider) {
    VisionLabPINVOKE.Divide__SWIG_2(__NumByteImage.getCPtr(image), __NumByteImage.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumByteImage image, byte pixel) {
    VisionLabPINVOKE.Divide__SWIG_3(__NumByteImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumInt8Pixel image, __NumInt8Pixel divider) {
    VisionLabPINVOKE.Divide__SWIG_4(__NumInt8Pixel.getCPtr(image), __NumInt8Pixel.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumInt8Pixel image, char pixel) {
    VisionLabPINVOKE.Divide__SWIG_5(__NumInt8Pixel.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumInt16Image image, __NumInt16Image divider) {
    VisionLabPINVOKE.Divide__SWIG_6(__NumInt16Image.getCPtr(image), __NumInt16Image.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumInt16Image image, short pixel) {
    VisionLabPINVOKE.Divide__SWIG_7(__NumInt16Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumInt32Image image, __NumInt32Image divider) {
    VisionLabPINVOKE.Divide__SWIG_8(__NumInt32Image.getCPtr(image), __NumInt32Image.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumInt32Image image, int pixel) {
    VisionLabPINVOKE.Divide__SWIG_9(__NumInt32Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumRGB888Image image, __NumRGB888Image divider) {
    VisionLabPINVOKE.Divide__SWIG_10(__NumRGB888Image.getCPtr(image), __NumRGB888Image.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumRGB888Image image, RGB888Pixel pixel) {
    VisionLabPINVOKE.Divide__SWIG_11(__NumRGB888Image.getCPtr(image), RGB888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumRGB161616Image image, __NumRGB161616Image divider) {
    VisionLabPINVOKE.Divide__SWIG_12(__NumRGB161616Image.getCPtr(image), __NumRGB161616Image.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumRGB161616Image image, RGB161616Pixel pixel) {
    VisionLabPINVOKE.Divide__SWIG_13(__NumRGB161616Image.getCPtr(image), RGB161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumHSV888Image image, __NumHSV888Image divider) {
    VisionLabPINVOKE.Divide__SWIG_14(__NumHSV888Image.getCPtr(image), __NumHSV888Image.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumHSV888Image image, HSV888Pixel pixel) {
    VisionLabPINVOKE.Divide__SWIG_15(__NumHSV888Image.getCPtr(image), HSV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumHSV161616Image image, __NumHSV161616Image divider) {
    VisionLabPINVOKE.Divide__SWIG_16(__NumHSV161616Image.getCPtr(image), __NumHSV161616Image.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumHSV161616Image image, HSV161616Pixel pixel) {
    VisionLabPINVOKE.Divide__SWIG_17(__NumHSV161616Image.getCPtr(image), HSV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumYUV888Image image, __NumYUV888Image divider) {
    VisionLabPINVOKE.Divide__SWIG_18(__NumYUV888Image.getCPtr(image), __NumYUV888Image.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumYUV888Image image, YUV888Pixel pixel) {
    VisionLabPINVOKE.Divide__SWIG_19(__NumYUV888Image.getCPtr(image), YUV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumYUV161616Image image, __NumYUV161616Image divider) {
    VisionLabPINVOKE.Divide__SWIG_20(__NumYUV161616Image.getCPtr(image), __NumYUV161616Image.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumYUV161616Image image, YUV161616Pixel pixel) {
    VisionLabPINVOKE.Divide__SWIG_21(__NumYUV161616Image.getCPtr(image), YUV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumFloatImage image, __NumFloatImage divider) {
    VisionLabPINVOKE.Divide__SWIG_22(__NumFloatImage.getCPtr(image), __NumFloatImage.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumFloatImage image, float pixel) {
    VisionLabPINVOKE.Divide__SWIG_23(__NumFloatImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumDoubleImage image, __NumDoubleImage divider) {
    VisionLabPINVOKE.Divide__SWIG_24(__NumDoubleImage.getCPtr(image), __NumDoubleImage.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumDoubleImage image, double pixel) {
    VisionLabPINVOKE.Divide__SWIG_25(__NumDoubleImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumComplexFloatImage image, __NumComplexFloatImage divider) {
    VisionLabPINVOKE.Divide__SWIG_26(__NumComplexFloatImage.getCPtr(image), __NumComplexFloatImage.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumComplexFloatImage image, SWIGTYPE_p_std__complexT_float_t pixel) {
    VisionLabPINVOKE.Divide__SWIG_27(__NumComplexFloatImage.getCPtr(image), SWIGTYPE_p_std__complexT_float_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumComplexDoubleImage image, __NumComplexDoubleImage divider) {
    VisionLabPINVOKE.Divide__SWIG_28(__NumComplexDoubleImage.getCPtr(image), __NumComplexDoubleImage.getCPtr(divider));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(__NumComplexDoubleImage image, SWIGTYPE_p_std__complexT_double_t pixel) {
    VisionLabPINVOKE.Divide__SWIG_29(__NumComplexDoubleImage.getCPtr(image), SWIGTYPE_p_std__complexT_double_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumByteImage dest, __NumByteImage source) {
    VisionLabPINVOKE.Multiply__SWIG_2(__NumByteImage.getCPtr(dest), __NumByteImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumByteImage image, byte pixel) {
    VisionLabPINVOKE.Multiply__SWIG_3(__NumByteImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumInt8Pixel dest, __NumInt8Pixel source) {
    VisionLabPINVOKE.Multiply__SWIG_4(__NumInt8Pixel.getCPtr(dest), __NumInt8Pixel.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumInt8Pixel image, char pixel) {
    VisionLabPINVOKE.Multiply__SWIG_5(__NumInt8Pixel.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumInt16Image dest, __NumInt16Image source) {
    VisionLabPINVOKE.Multiply__SWIG_6(__NumInt16Image.getCPtr(dest), __NumInt16Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumInt16Image image, short pixel) {
    VisionLabPINVOKE.Multiply__SWIG_7(__NumInt16Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumInt32Image dest, __NumInt32Image source) {
    VisionLabPINVOKE.Multiply__SWIG_8(__NumInt32Image.getCPtr(dest), __NumInt32Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumInt32Image image, int pixel) {
    VisionLabPINVOKE.Multiply__SWIG_9(__NumInt32Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumRGB888Image dest, __NumRGB888Image source) {
    VisionLabPINVOKE.Multiply__SWIG_10(__NumRGB888Image.getCPtr(dest), __NumRGB888Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumRGB888Image image, RGB888Pixel pixel) {
    VisionLabPINVOKE.Multiply__SWIG_11(__NumRGB888Image.getCPtr(image), RGB888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumRGB161616Image dest, __NumRGB161616Image source) {
    VisionLabPINVOKE.Multiply__SWIG_12(__NumRGB161616Image.getCPtr(dest), __NumRGB161616Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumRGB161616Image image, RGB161616Pixel pixel) {
    VisionLabPINVOKE.Multiply__SWIG_13(__NumRGB161616Image.getCPtr(image), RGB161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumHSV888Image dest, __NumHSV888Image source) {
    VisionLabPINVOKE.Multiply__SWIG_14(__NumHSV888Image.getCPtr(dest), __NumHSV888Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumHSV888Image image, HSV888Pixel pixel) {
    VisionLabPINVOKE.Multiply__SWIG_15(__NumHSV888Image.getCPtr(image), HSV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumHSV161616Image dest, __NumHSV161616Image source) {
    VisionLabPINVOKE.Multiply__SWIG_16(__NumHSV161616Image.getCPtr(dest), __NumHSV161616Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumHSV161616Image image, HSV161616Pixel pixel) {
    VisionLabPINVOKE.Multiply__SWIG_17(__NumHSV161616Image.getCPtr(image), HSV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumYUV888Image dest, __NumYUV888Image source) {
    VisionLabPINVOKE.Multiply__SWIG_18(__NumYUV888Image.getCPtr(dest), __NumYUV888Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumYUV888Image image, YUV888Pixel pixel) {
    VisionLabPINVOKE.Multiply__SWIG_19(__NumYUV888Image.getCPtr(image), YUV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumYUV161616Image dest, __NumYUV161616Image source) {
    VisionLabPINVOKE.Multiply__SWIG_20(__NumYUV161616Image.getCPtr(dest), __NumYUV161616Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumYUV161616Image image, YUV161616Pixel pixel) {
    VisionLabPINVOKE.Multiply__SWIG_21(__NumYUV161616Image.getCPtr(image), YUV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumFloatImage dest, __NumFloatImage source) {
    VisionLabPINVOKE.Multiply__SWIG_22(__NumFloatImage.getCPtr(dest), __NumFloatImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumFloatImage image, float pixel) {
    VisionLabPINVOKE.Multiply__SWIG_23(__NumFloatImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumDoubleImage dest, __NumDoubleImage source) {
    VisionLabPINVOKE.Multiply__SWIG_24(__NumDoubleImage.getCPtr(dest), __NumDoubleImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumDoubleImage image, double pixel) {
    VisionLabPINVOKE.Multiply__SWIG_25(__NumDoubleImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumComplexFloatImage dest, __NumComplexFloatImage source) {
    VisionLabPINVOKE.Multiply__SWIG_26(__NumComplexFloatImage.getCPtr(dest), __NumComplexFloatImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumComplexFloatImage image, SWIGTYPE_p_std__complexT_float_t pixel) {
    VisionLabPINVOKE.Multiply__SWIG_27(__NumComplexFloatImage.getCPtr(image), SWIGTYPE_p_std__complexT_float_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumComplexDoubleImage dest, __NumComplexDoubleImage source) {
    VisionLabPINVOKE.Multiply__SWIG_28(__NumComplexDoubleImage.getCPtr(dest), __NumComplexDoubleImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(__NumComplexDoubleImage image, SWIGTYPE_p_std__complexT_double_t pixel) {
    VisionLabPINVOKE.Multiply__SWIG_29(__NumComplexDoubleImage.getCPtr(image), SWIGTYPE_p_std__complexT_double_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Or(ByteImage dest, ByteImage source) {
    VisionLabPINVOKE.Or__SWIG_2(ByteImage.getCPtr(dest), ByteImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Or(ByteImage image, byte pixel) {
    VisionLabPINVOKE.Or__SWIG_3(ByteImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Or(Int8Image dest, Int8Image source) {
    VisionLabPINVOKE.Or__SWIG_4(Int8Image.getCPtr(dest), Int8Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Or(Int8Image image, char pixel) {
    VisionLabPINVOKE.Or__SWIG_5(Int8Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Or(Int16Image dest, Int16Image source) {
    VisionLabPINVOKE.Or__SWIG_6(Int16Image.getCPtr(dest), Int16Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Or(Int16Image image, short pixel) {
    VisionLabPINVOKE.Or__SWIG_7(Int16Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Or(Int32Image dest, Int32Image source) {
    VisionLabPINVOKE.Or__SWIG_8(Int32Image.getCPtr(dest), Int32Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Or(Int32Image image, int pixel) {
    VisionLabPINVOKE.Or__SWIG_9(Int32Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void And(ByteImage dest, ByteImage source) {
    VisionLabPINVOKE.And__SWIG_2(ByteImage.getCPtr(dest), ByteImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void And(ByteImage image, byte pixel) {
    VisionLabPINVOKE.And__SWIG_3(ByteImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void And(Int8Image dest, Int8Image source) {
    VisionLabPINVOKE.And__SWIG_4(Int8Image.getCPtr(dest), Int8Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void And(Int8Image image, char pixel) {
    VisionLabPINVOKE.And__SWIG_5(Int8Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void And(Int16Image dest, Int16Image source) {
    VisionLabPINVOKE.And__SWIG_6(Int16Image.getCPtr(dest), Int16Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void And(Int16Image image, short pixel) {
    VisionLabPINVOKE.And__SWIG_7(Int16Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void And(Int32Image dest, Int32Image source) {
    VisionLabPINVOKE.And__SWIG_8(Int32Image.getCPtr(dest), Int32Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void And(Int32Image image, int pixel) {
    VisionLabPINVOKE.And__SWIG_9(Int32Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ByteImage Modulo_Op(ByteImage image1, ByteImage image2) {
    ByteImage ret = new ByteImage(VisionLabPINVOKE.Modulo_Op__SWIG_3(ByteImage.getCPtr(image1), ByteImage.getCPtr(image2)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ByteImage Modulo_Op(ByteImage image, byte pixel) {
    ByteImage ret = new ByteImage(VisionLabPINVOKE.Modulo_Op__SWIG_4(ByteImage.getCPtr(image), pixel), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ByteImage Modulo_Op(byte pixel, ByteImage image) {
    ByteImage ret = new ByteImage(VisionLabPINVOKE.Modulo_Op__SWIG_5(pixel, ByteImage.getCPtr(image)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int8Image Modulo_Op(Int8Image image1, Int8Image image2) {
    Int8Image ret = new Int8Image(VisionLabPINVOKE.Modulo_Op__SWIG_6(Int8Image.getCPtr(image1), Int8Image.getCPtr(image2)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int8Image Modulo_Op(Int8Image image, char pixel) {
    Int8Image ret = new Int8Image(VisionLabPINVOKE.Modulo_Op__SWIG_7(Int8Image.getCPtr(image), pixel), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int8Image Modulo_Op(char pixel, Int8Image image) {
    Int8Image ret = new Int8Image(VisionLabPINVOKE.Modulo_Op__SWIG_8(pixel, Int8Image.getCPtr(image)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int16Image Modulo_Op(Int16Image image1, Int16Image image2) {
    Int16Image ret = new Int16Image(VisionLabPINVOKE.Modulo_Op__SWIG_9(Int16Image.getCPtr(image1), Int16Image.getCPtr(image2)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int16Image Modulo_Op(Int16Image image, short pixel) {
    Int16Image ret = new Int16Image(VisionLabPINVOKE.Modulo_Op__SWIG_10(Int16Image.getCPtr(image), pixel), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int16Image Modulo_Op(short pixel, Int16Image image) {
    Int16Image ret = new Int16Image(VisionLabPINVOKE.Modulo_Op__SWIG_11(pixel, Int16Image.getCPtr(image)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int32Image Modulo_Op(Int32Image image1, Int32Image image2) {
    Int32Image ret = new Int32Image(VisionLabPINVOKE.Modulo_Op__SWIG_12(Int32Image.getCPtr(image1), Int32Image.getCPtr(image2)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int32Image Modulo_Op(Int32Image image, int pixel) {
    Int32Image ret = new Int32Image(VisionLabPINVOKE.Modulo_Op__SWIG_13(Int32Image.getCPtr(image), pixel), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int32Image Modulo_Op(int pixel, Int32Image image) {
    Int32Image ret = new Int32Image(VisionLabPINVOKE.Modulo_Op__SWIG_14(pixel, Int32Image.getCPtr(image)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Power(ByteImage dest, ByteImage source) {
    VisionLabPINVOKE.Power__SWIG_2(ByteImage.getCPtr(dest), ByteImage.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Power(ByteImage image, byte pixel) {
    VisionLabPINVOKE.Power__SWIG_3(ByteImage.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Power(Int8Image dest, Int8Image source) {
    VisionLabPINVOKE.Power__SWIG_4(Int8Image.getCPtr(dest), Int8Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Power(Int8Image image, char pixel) {
    VisionLabPINVOKE.Power__SWIG_5(Int8Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Power(Int16Image dest, Int16Image source) {
    VisionLabPINVOKE.Power__SWIG_6(Int16Image.getCPtr(dest), Int16Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Power(Int16Image image, short pixel) {
    VisionLabPINVOKE.Power__SWIG_7(Int16Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Power(Int32Image dest, Int32Image source) {
    VisionLabPINVOKE.Power__SWIG_8(Int32Image.getCPtr(dest), Int32Image.getCPtr(source));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Power(Int32Image image, int pixel) {
    VisionLabPINVOKE.Power__SWIG_9(Int32Image.getCPtr(image), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static BarCodeRes IdentifyBarCode(ByteImage image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance, BarCodeScanDir dir, BarCodeCheck check) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_5(ByteImage.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance, (int)dir, (int)check);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(ByteImage image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance, BarCodeScanDir dir) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_6(ByteImage.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance, (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(ByteImage image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_7(ByteImage.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(ByteImage image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_8(ByteImage.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(ByteImage image, BarCodeType type, SWIGTYPE_p_std__string code) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_9(ByteImage.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int8Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance, BarCodeScanDir dir, BarCodeCheck check) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_10(Int8Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance, (int)dir, (int)check);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int8Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance, BarCodeScanDir dir) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_11(Int8Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance, (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int8Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_12(Int8Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int8Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_13(Int8Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int8Image image, BarCodeType type, SWIGTYPE_p_std__string code) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_14(Int8Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int16Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance, BarCodeScanDir dir, BarCodeCheck check) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_15(Int16Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance, (int)dir, (int)check);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int16Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance, BarCodeScanDir dir) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_16(Int16Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance, (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int16Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_17(Int16Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int16Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_18(Int16Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int16Image image, BarCodeType type, SWIGTYPE_p_std__string code) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_19(Int16Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int32Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance, BarCodeScanDir dir, BarCodeCheck check) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_20(Int32Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance, (int)dir, (int)check);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int32Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance, BarCodeScanDir dir) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_21(Int32Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance, (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int32Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars, int lineDistance) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_22(Int32Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars, lineDistance);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int32Image image, BarCodeType type, SWIGTYPE_p_std__string code, int nrOfChars) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_23(Int32Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code), nrOfChars);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BarCodeRes IdentifyBarCode(Int32Image image, BarCodeType type, SWIGTYPE_p_std__string code) {
    BarCodeRes ret = (BarCodeRes)VisionLabPINVOKE.IdentifyBarCode__SWIG_24(Int32Image.getCPtr(image), (int)type, SWIGTYPE_p_std__string.getCPtr(code));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ApproxPolygon(ByteImage image, Connected connected, double minDistance, int maxVertices, vector_XYCoord tab) {
    int ret = VisionLabPINVOKE.ApproxPolygon__SWIG_1(ByteImage.getCPtr(image), (int)connected, minDistance, maxVertices, vector_XYCoord.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ApproxPolygon(Int8Image image, Connected connected, double minDistance, int maxVertices, vector_XYCoord tab) {
    int ret = VisionLabPINVOKE.ApproxPolygon__SWIG_2(Int8Image.getCPtr(image), (int)connected, minDistance, maxVertices, vector_XYCoord.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ApproxPolygon(Int16Image image, Connected connected, double minDistance, int maxVertices, vector_XYCoord tab) {
    int ret = VisionLabPINVOKE.ApproxPolygon__SWIG_3(Int16Image.getCPtr(image), (int)connected, minDistance, maxVertices, vector_XYCoord.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ApproxPolygon(Int32Image image, Connected connected, double minDistance, int maxVertices, vector_XYCoord tab) {
    int ret = VisionLabPINVOKE.ApproxPolygon__SWIG_4(Int32Image.getCPtr(image), (int)connected, minDistance, maxVertices, vector_XYCoord.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void BlobAnd(ByteImage image, ByteImage maskImage, Connected connected) {
    VisionLabPINVOKE.BlobAnd__SWIG_1(ByteImage.getCPtr(image), ByteImage.getCPtr(maskImage), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnd(Int8Image image, Int8Image maskImage, Connected connected) {
    VisionLabPINVOKE.BlobAnd__SWIG_2(Int8Image.getCPtr(image), Int8Image.getCPtr(maskImage), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnd(Int16Image image, Int16Image maskImage, Connected connected) {
    VisionLabPINVOKE.BlobAnd__SWIG_3(Int16Image.getCPtr(image), Int16Image.getCPtr(maskImage), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnd(Int32Image image, Int32Image maskImage, Connected connected) {
    VisionLabPINVOKE.BlobAnd__SWIG_4(Int32Image.getCPtr(image), Int32Image.getCPtr(maskImage), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DistanceT(ByteImage image, Connected connected) {
    VisionLabPINVOKE.DistanceT__SWIG_2(ByteImage.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DistanceT(ByteImage image, Mask_Int32 downMaskOrg, Mask_Int32 upMaskOrg) {
    VisionLabPINVOKE.DistanceT__SWIG_3(ByteImage.getCPtr(image), Mask_Int32.getCPtr(downMaskOrg), Mask_Int32.getCPtr(upMaskOrg));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DistanceT(Int8Image image, Connected connected) {
    VisionLabPINVOKE.DistanceT__SWIG_4(Int8Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DistanceT(Int8Image image, Mask_Int32 downMaskOrg, Mask_Int32 upMaskOrg) {
    VisionLabPINVOKE.DistanceT__SWIG_5(Int8Image.getCPtr(image), Mask_Int32.getCPtr(downMaskOrg), Mask_Int32.getCPtr(upMaskOrg));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DistanceT(Int16Image image, Connected connected) {
    VisionLabPINVOKE.DistanceT__SWIG_6(Int16Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DistanceT(Int16Image image, Mask_Int32 downMaskOrg, Mask_Int32 upMaskOrg) {
    VisionLabPINVOKE.DistanceT__SWIG_7(Int16Image.getCPtr(image), Mask_Int32.getCPtr(downMaskOrg), Mask_Int32.getCPtr(upMaskOrg));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DistanceT(Int32Image image, Connected connected) {
    VisionLabPINVOKE.DistanceT__SWIG_8(Int32Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DistanceT(Int32Image image, Mask_Int32 downMaskOrg, Mask_Int32 upMaskOrg) {
    VisionLabPINVOKE.DistanceT__SWIG_9(Int32Image.getCPtr(image), Mask_Int32.getCPtr(downMaskOrg), Mask_Int32.getCPtr(upMaskOrg));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(ByteImage image, EDTMask mask, EDTScale scale, double precision, double ydivx) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_3(ByteImage.getCPtr(image), (int)mask, (int)scale, precision, ydivx);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(ByteImage image, EDTMask mask, EDTScale scale, double precision) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_4(ByteImage.getCPtr(image), (int)mask, (int)scale, precision);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(ByteImage image, EDTMask mask, EDTScale scale) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_5(ByteImage.getCPtr(image), (int)mask, (int)scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(Int8Image image, EDTMask mask, EDTScale scale, double precision, double ydivx) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_6(Int8Image.getCPtr(image), (int)mask, (int)scale, precision, ydivx);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(Int8Image image, EDTMask mask, EDTScale scale, double precision) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_7(Int8Image.getCPtr(image), (int)mask, (int)scale, precision);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(Int8Image image, EDTMask mask, EDTScale scale) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_8(Int8Image.getCPtr(image), (int)mask, (int)scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(Int16Image image, EDTMask mask, EDTScale scale, double precision, double ydivx) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_9(Int16Image.getCPtr(image), (int)mask, (int)scale, precision, ydivx);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(Int16Image image, EDTMask mask, EDTScale scale, double precision) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_10(Int16Image.getCPtr(image), (int)mask, (int)scale, precision);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(Int16Image image, EDTMask mask, EDTScale scale) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_11(Int16Image.getCPtr(image), (int)mask, (int)scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(Int32Image image, EDTMask mask, EDTScale scale, double precision, double ydivx) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_12(Int32Image.getCPtr(image), (int)mask, (int)scale, precision, ydivx);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(Int32Image image, EDTMask mask, EDTScale scale, double precision) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_13(Int32Image.getCPtr(image), (int)mask, (int)scale, precision);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void EuclideanDistanceT(Int32Image image, EDTMask mask, EDTScale scale) {
    VisionLabPINVOKE.EuclideanDistanceT__SWIG_14(Int32Image.getCPtr(image), (int)mask, (int)scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExactDistanceT(ByteImage image, int precision) {
    VisionLabPINVOKE.ExactDistanceT__SWIG_2(ByteImage.getCPtr(image), precision);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExactDistanceT(ByteImage image) {
    VisionLabPINVOKE.ExactDistanceT__SWIG_3(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExactDistanceT(Int8Image image, int precision) {
    VisionLabPINVOKE.ExactDistanceT__SWIG_4(Int8Image.getCPtr(image), precision);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExactDistanceT(Int8Image image) {
    VisionLabPINVOKE.ExactDistanceT__SWIG_5(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExactDistanceT(Int16Image image, int precision) {
    VisionLabPINVOKE.ExactDistanceT__SWIG_6(Int16Image.getCPtr(image), precision);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExactDistanceT(Int16Image image) {
    VisionLabPINVOKE.ExactDistanceT__SWIG_7(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExactDistanceT(Int32Image image, int precision) {
    VisionLabPINVOKE.ExactDistanceT__SWIG_8(Int32Image.getCPtr(image), precision);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExactDistanceT(Int32Image image) {
    VisionLabPINVOKE.ExactDistanceT__SWIG_9(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VectorDistanceT(ByteImage src, ComplexFloatImage dest) {
    VisionLabPINVOKE.VectorDistanceT__SWIG_1(ByteImage.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VectorDistanceT(Int8Image src, ComplexFloatImage dest) {
    VisionLabPINVOKE.VectorDistanceT__SWIG_2(Int8Image.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VectorDistanceT(Int16Image src, ComplexFloatImage dest) {
    VisionLabPINVOKE.VectorDistanceT__SWIG_3(Int16Image.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VectorDistanceT(Int32Image src, ComplexFloatImage dest) {
    VisionLabPINVOKE.VectorDistanceT__SWIG_4(Int32Image.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VectorDistanceT(ByteImage src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.VectorDistanceT__SWIG_5(ByteImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VectorDistanceT(Int8Image src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.VectorDistanceT__SWIG_6(Int8Image.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VectorDistanceT(Int16Image src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.VectorDistanceT__SWIG_7(Int16Image.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VectorDistanceT(Int32Image src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.VectorDistanceT__SWIG_8(Int32Image.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int FillHoles(ByteImage image, Connected connected) {
    int ret = VisionLabPINVOKE.FillHoles__SWIG_1(ByteImage.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillHoles(Int8Image image, Connected connected) {
    int ret = VisionLabPINVOKE.FillHoles__SWIG_2(Int8Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillHoles(Int16Image image, Connected connected) {
    int ret = VisionLabPINVOKE.FillHoles__SWIG_3(Int16Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillHoles(Int32Image image, Connected connected) {
    int ret = VisionLabPINVOKE.FillHoles__SWIG_4(Int32Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(ByteImage image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_3(ByteImage.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(ByteImage image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_4(ByteImage.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(ByteImage image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_5(ByteImage.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(Int8Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_6(Int8Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(Int8Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_7(Int8Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(Int8Image image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_8(Int8Image.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(Int16Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_9(Int16Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(Int16Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_10(Int16Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(Int16Image image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_11(Int16Image.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(Int32Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_12(Int32Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(Int32Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_13(Int32Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificHoles(Int32Image image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FillSpecificHoles__SWIG_14(Int32Image.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(ByteImage image, ByteImage grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_3(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(ByteImage image, ByteImage grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_4(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(ByteImage image, ByteImage grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_5(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(Int8Image image, Int8Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_6(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(Int8Image image, Int8Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_7(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(Int8Image image, Int8Image grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_8(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(Int16Image image, Int16Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_9(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(Int16Image image, Int16Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_10(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(Int16Image image, Int16Image grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_11(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(Int32Image image, Int32Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_12(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(Int32Image image, Int32Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_13(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FillSpecificGrayScaleHoles(Int32Image image, Int32Image grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FillSpecificGrayScaleHoles__SWIG_14(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindHoles(ByteImage image, Connected connected) {
    int ret = VisionLabPINVOKE.FindHoles__SWIG_1(ByteImage.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindHoles(Int8Image image, Connected connected) {
    int ret = VisionLabPINVOKE.FindHoles__SWIG_2(Int8Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindHoles(Int16Image image, Connected connected) {
    int ret = VisionLabPINVOKE.FindHoles__SWIG_3(Int16Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindHoles(Int32Image image, Connected connected) {
    int ret = VisionLabPINVOKE.FindHoles__SWIG_4(Int32Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindCornersRectangle(ByteImage image, Connected connected, double deltaPhi, Orientation orient, XYCoord leftTop, XYCoord rigthTop, XYCoord leftBottom, XYCoord rightBottom) {
    bool ret = VisionLabPINVOKE.FindCornersRectangle__SWIG_1(ByteImage.getCPtr(image), (int)connected, deltaPhi, (int)orient, XYCoord.getCPtr(leftTop), XYCoord.getCPtr(rigthTop), XYCoord.getCPtr(leftBottom), XYCoord.getCPtr(rightBottom));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindCornersRectangle(Int8Image image, Connected connected, double deltaPhi, Orientation orient, XYCoord leftTop, XYCoord rigthTop, XYCoord leftBottom, XYCoord rightBottom) {
    bool ret = VisionLabPINVOKE.FindCornersRectangle__SWIG_2(Int8Image.getCPtr(image), (int)connected, deltaPhi, (int)orient, XYCoord.getCPtr(leftTop), XYCoord.getCPtr(rigthTop), XYCoord.getCPtr(leftBottom), XYCoord.getCPtr(rightBottom));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindCornersRectangle(Int16Image image, Connected connected, double deltaPhi, Orientation orient, XYCoord leftTop, XYCoord rigthTop, XYCoord leftBottom, XYCoord rightBottom) {
    bool ret = VisionLabPINVOKE.FindCornersRectangle__SWIG_3(Int16Image.getCPtr(image), (int)connected, deltaPhi, (int)orient, XYCoord.getCPtr(leftTop), XYCoord.getCPtr(rigthTop), XYCoord.getCPtr(leftBottom), XYCoord.getCPtr(rightBottom));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindCornersRectangle(Int32Image image, Connected connected, double deltaPhi, Orientation orient, XYCoord leftTop, XYCoord rigthTop, XYCoord leftBottom, XYCoord rightBottom) {
    bool ret = VisionLabPINVOKE.FindCornersRectangle__SWIG_4(Int32Image.getCPtr(image), (int)connected, deltaPhi, (int)orient, XYCoord.getCPtr(leftTop), XYCoord.getCPtr(rigthTop), XYCoord.getCPtr(leftBottom), XYCoord.getCPtr(rightBottom));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindCornersRectangleSq(ByteImage image, Connected connected, XYCoord leftTop, XYCoord rigthTop, XYCoord leftBottom, XYCoord rightBottom) {
    bool ret = VisionLabPINVOKE.FindCornersRectangleSq__SWIG_1(ByteImage.getCPtr(image), (int)connected, XYCoord.getCPtr(leftTop), XYCoord.getCPtr(rigthTop), XYCoord.getCPtr(leftBottom), XYCoord.getCPtr(rightBottom));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindCornersRectangleSq(Int8Image image, Connected connected, XYCoord leftTop, XYCoord rigthTop, XYCoord leftBottom, XYCoord rightBottom) {
    bool ret = VisionLabPINVOKE.FindCornersRectangleSq__SWIG_2(Int8Image.getCPtr(image), (int)connected, XYCoord.getCPtr(leftTop), XYCoord.getCPtr(rigthTop), XYCoord.getCPtr(leftBottom), XYCoord.getCPtr(rightBottom));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindCornersRectangleSq(Int16Image image, Connected connected, XYCoord leftTop, XYCoord rigthTop, XYCoord leftBottom, XYCoord rightBottom) {
    bool ret = VisionLabPINVOKE.FindCornersRectangleSq__SWIG_3(Int16Image.getCPtr(image), (int)connected, XYCoord.getCPtr(leftTop), XYCoord.getCPtr(rigthTop), XYCoord.getCPtr(leftBottom), XYCoord.getCPtr(rightBottom));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindCornersRectangleSq(Int32Image image, Connected connected, XYCoord leftTop, XYCoord rigthTop, XYCoord leftBottom, XYCoord rightBottom) {
    bool ret = VisionLabPINVOKE.FindCornersRectangleSq__SWIG_4(Int32Image.getCPtr(image), (int)connected, XYCoord.getCPtr(leftTop), XYCoord.getCPtr(rigthTop), XYCoord.getCPtr(leftBottom), XYCoord.getCPtr(rightBottom));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(ByteImage image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_3(ByteImage.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(ByteImage image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_4(ByteImage.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(ByteImage image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_5(ByteImage.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(Int8Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_6(Int8Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(Int8Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_7(Int8Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(Int8Image image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_8(Int8Image.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(Int16Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_9(Int16Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(Int16Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_10(Int16Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(Int16Image image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_11(Int16Image.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(Int32Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_12(Int32Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(Int32Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_13(Int32Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificHoles(Int32Image image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FindSpecificHoles__SWIG_14(Int32Image.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(ByteImage image, ByteImage grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_3(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(ByteImage image, ByteImage grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_4(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(ByteImage image, ByteImage grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_5(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(Int8Image image, Int8Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_6(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(Int8Image image, Int8Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_7(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(Int8Image image, Int8Image grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_8(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(Int16Image image, Int16Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_9(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(Int16Image image, Int16Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_10(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(Int16Image image, Int16Image grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_11(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(Int32Image image, Int32Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_12(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(Int32Image image, Int32Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_13(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSpecificGrayScaleHoles(Int32Image image, Int32Image grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.FindSpecificGrayScaleHoles__SWIG_14(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void LabelAnd(ByteImage image, ByteImage maskImage) {
    VisionLabPINVOKE.LabelAnd__SWIG_1(ByteImage.getCPtr(image), ByteImage.getCPtr(maskImage));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LabelAnd(Int8Image image, Int8Image maskImage) {
    VisionLabPINVOKE.LabelAnd__SWIG_2(Int8Image.getCPtr(image), Int8Image.getCPtr(maskImage));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LabelAnd(Int16Image image, Int16Image maskImage) {
    VisionLabPINVOKE.LabelAnd__SWIG_3(Int16Image.getCPtr(image), Int16Image.getCPtr(maskImage));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LabelAnd(Int32Image image, Int32Image maskImage) {
    VisionLabPINVOKE.LabelAnd__SWIG_4(Int32Image.getCPtr(image), Int32Image.getCPtr(maskImage));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int LabelBlobs(ByteImage image, Connected connected) {
    int ret = VisionLabPINVOKE.LabelBlobs__SWIG_1(ByteImage.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int LabelBlobs(Int8Image image, Connected connected) {
    int ret = VisionLabPINVOKE.LabelBlobs__SWIG_2(Int8Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int LabelBlobs(Int16Image image, Connected connected) {
    int ret = VisionLabPINVOKE.LabelBlobs__SWIG_3(Int16Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int LabelBlobs(Int32Image image, Connected connected) {
    int ret = VisionLabPINVOKE.LabelBlobs__SWIG_4(Int32Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void NrOfNeighbours(ByteImage src, ByteImage dest, Connected connected) {
    VisionLabPINVOKE.NrOfNeighbours__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NrOfNeighbours(Int8Image src, Int8Image dest, Connected connected) {
    VisionLabPINVOKE.NrOfNeighbours__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NrOfNeighbours(Int16Image src, Int16Image dest, Connected connected) {
    VisionLabPINVOKE.NrOfNeighbours__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NrOfNeighbours(Int32Image src, Int32Image dest, Connected connected) {
    VisionLabPINVOKE.NrOfNeighbours__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int RemoveBlobs(ByteImage image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_3(ByteImage.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobs(ByteImage image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_4(ByteImage.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobs(ByteImage image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_5(ByteImage.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobs(Int8Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_6(Int8Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobs(Int8Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_7(Int8Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobs(Int8Image image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_8(Int8Image.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobs(Int16Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_9(Int16Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobs(Int16Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_10(Int16Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobs(Int16Image image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_11(Int16Image.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobs(Int32Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_12(Int32Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobs(Int32Image image, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_13(Int32Image.getCPtr(image), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobs(Int32Image image, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveBlobs__SWIG_14(Int32Image.getCPtr(image), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(ByteImage image, ByteImage grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_3(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(ByteImage image, ByteImage grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_4(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(ByteImage image, ByteImage grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_5(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(Int8Image image, Int8Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_6(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(Int8Image image, Int8Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_7(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(Int8Image image, Int8Image grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_8(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(Int16Image image, Int16Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_9(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(Int16Image image, Int16Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_10(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(Int16Image image, Int16Image grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_11(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(Int32Image image, Int32Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_12(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(Int32Image image, Int32Image grayImage, Connected connected, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_13(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)connected, (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobs(Int32Image image, Int32Image grayImage, Connected connected, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobs__SWIG_14(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)connected, (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobsExp(ByteImage image, Connected connected, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveBlobsExp__SWIG_2(ByteImage.getCPtr(image), (int)connected, SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobsExp(ByteImage image, Connected connected, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveBlobsExp__SWIG_3(ByteImage.getCPtr(image), (int)connected, SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobsExp(Int8Image image, Connected connected, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveBlobsExp__SWIG_4(Int8Image.getCPtr(image), (int)connected, SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobsExp(Int8Image image, Connected connected, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveBlobsExp__SWIG_5(Int8Image.getCPtr(image), (int)connected, SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobsExp(Int16Image image, Connected connected, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveBlobsExp__SWIG_6(Int16Image.getCPtr(image), (int)connected, SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobsExp(Int16Image image, Connected connected, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveBlobsExp__SWIG_7(Int16Image.getCPtr(image), (int)connected, SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobsExp(Int32Image image, Connected connected, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveBlobsExp__SWIG_8(Int32Image.getCPtr(image), (int)connected, SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveBlobsExp(Int32Image image, Connected connected, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveBlobsExp__SWIG_9(Int32Image.getCPtr(image), (int)connected, SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobsExp(ByteImage image, ByteImage grayImage, Connected connected, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobsExp__SWIG_2(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)connected, SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobsExp(ByteImage image, ByteImage grayImage, Connected connected, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobsExp__SWIG_3(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)connected, SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobsExp(Int8Image image, Int8Image grayImage, Connected connected, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobsExp__SWIG_4(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)connected, SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobsExp(Int8Image image, Int8Image grayImage, Connected connected, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobsExp__SWIG_5(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)connected, SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobsExp(Int16Image image, Int16Image grayImage, Connected connected, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobsExp__SWIG_6(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)connected, SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobsExp(Int16Image image, Int16Image grayImage, Connected connected, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobsExp__SWIG_7(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)connected, SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobsExp(Int32Image image, Int32Image grayImage, Connected connected, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobsExp__SWIG_8(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)connected, SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleBlobsExp(Int32Image image, Int32Image grayImage, Connected connected, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleBlobsExp__SWIG_9(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)connected, SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void RemoveBorderBlobs(ByteImage image, Connected connected, Border borders) {
    VisionLabPINVOKE.RemoveBorderBlobs__SWIG_2(ByteImage.getCPtr(image), (int)connected, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderBlobs(ByteImage image, Connected connected) {
    VisionLabPINVOKE.RemoveBorderBlobs__SWIG_3(ByteImage.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderBlobs(Int8Image image, Connected connected, Border borders) {
    VisionLabPINVOKE.RemoveBorderBlobs__SWIG_4(Int8Image.getCPtr(image), (int)connected, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderBlobs(Int8Image image, Connected connected) {
    VisionLabPINVOKE.RemoveBorderBlobs__SWIG_5(Int8Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderBlobs(Int16Image image, Connected connected, Border borders) {
    VisionLabPINVOKE.RemoveBorderBlobs__SWIG_6(Int16Image.getCPtr(image), (int)connected, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderBlobs(Int16Image image, Connected connected) {
    VisionLabPINVOKE.RemoveBorderBlobs__SWIG_7(Int16Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderBlobs(Int32Image image, Connected connected, Border borders) {
    VisionLabPINVOKE.RemoveBorderBlobs__SWIG_8(Int32Image.getCPtr(image), (int)connected, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderBlobs(Int32Image image, Connected connected) {
    VisionLabPINVOKE.RemoveBorderBlobs__SWIG_9(Int32Image.getCPtr(image), (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderLabels(ByteImage image, Border borders) {
    VisionLabPINVOKE.RemoveBorderLabels__SWIG_2(ByteImage.getCPtr(image), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderLabels(ByteImage image) {
    VisionLabPINVOKE.RemoveBorderLabels__SWIG_3(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderLabels(Int8Image image, Border borders) {
    VisionLabPINVOKE.RemoveBorderLabels__SWIG_4(Int8Image.getCPtr(image), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderLabels(Int8Image image) {
    VisionLabPINVOKE.RemoveBorderLabels__SWIG_5(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderLabels(Int16Image image, Border borders) {
    VisionLabPINVOKE.RemoveBorderLabels__SWIG_6(Int16Image.getCPtr(image), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderLabels(Int16Image image) {
    VisionLabPINVOKE.RemoveBorderLabels__SWIG_7(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderLabels(Int32Image image, Border borders) {
    VisionLabPINVOKE.RemoveBorderLabels__SWIG_8(Int32Image.getCPtr(image), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveBorderLabels(Int32Image image) {
    VisionLabPINVOKE.RemoveBorderLabels__SWIG_9(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int RemoveLabels(ByteImage image, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_3(ByteImage.getCPtr(image), (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabels(ByteImage image, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_4(ByteImage.getCPtr(image), (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabels(ByteImage image, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_5(ByteImage.getCPtr(image), (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabels(Int8Image image, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_6(Int8Image.getCPtr(image), (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabels(Int8Image image, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_7(Int8Image.getCPtr(image), (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabels(Int8Image image, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_8(Int8Image.getCPtr(image), (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabels(Int16Image image, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_9(Int16Image.getCPtr(image), (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabels(Int16Image image, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_10(Int16Image.getCPtr(image), (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabels(Int16Image image, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_11(Int16Image.getCPtr(image), (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabels(Int32Image image, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_12(Int32Image.getCPtr(image), (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabels(Int32Image image, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_13(Int32Image.getCPtr(image), (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabels(Int32Image image, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveLabels__SWIG_14(Int32Image.getCPtr(image), (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(ByteImage image, ByteImage grayImage, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_3(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(ByteImage image, ByteImage grayImage, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_4(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(ByteImage image, ByteImage grayImage, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_5(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(Int8Image image, Int8Image grayImage, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_6(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(Int8Image image, Int8Image grayImage, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_7(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(Int8Image image, Int8Image grayImage, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_8(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(Int16Image image, Int16Image grayImage, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_9(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(Int16Image image, Int16Image grayImage, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_10(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(Int16Image image, Int16Image grayImage, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_11(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(Int32Image image, Int32Image grayImage, BlobAnalyse ba, double low, double high, UseXOrY xy, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_12(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)ba, low, high, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(Int32Image image, Int32Image grayImage, BlobAnalyse ba, double low, double high, UseXOrY xy) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_13(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)ba, low, high, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabels(Int32Image image, Int32Image grayImage, BlobAnalyse ba, double low, double high) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabels__SWIG_14(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), (int)ba, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabelsExp(ByteImage image, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveLabelsExp__SWIG_2(ByteImage.getCPtr(image), SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabelsExp(ByteImage image, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveLabelsExp__SWIG_3(ByteImage.getCPtr(image), SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabelsExp(Int8Image image, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveLabelsExp__SWIG_4(Int8Image.getCPtr(image), SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabelsExp(Int8Image image, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveLabelsExp__SWIG_5(Int8Image.getCPtr(image), SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabelsExp(Int16Image image, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveLabelsExp__SWIG_6(Int16Image.getCPtr(image), SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabelsExp(Int16Image image, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveLabelsExp__SWIG_7(Int16Image.getCPtr(image), SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabelsExp(Int32Image image, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveLabelsExp__SWIG_8(Int32Image.getCPtr(image), SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveLabelsExp(Int32Image image, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveLabelsExp__SWIG_9(Int32Image.getCPtr(image), SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabelsExp(ByteImage image, ByteImage grayImage, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabelsExp__SWIG_2(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabelsExp(ByteImage image, ByteImage grayImage, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabelsExp__SWIG_3(ByteImage.getCPtr(image), ByteImage.getCPtr(grayImage), SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabelsExp(Int8Image image, Int8Image grayImage, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabelsExp__SWIG_4(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabelsExp(Int8Image image, Int8Image grayImage, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabelsExp__SWIG_5(Int8Image.getCPtr(image), Int8Image.getCPtr(grayImage), SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabelsExp(Int16Image image, Int16Image grayImage, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabelsExp__SWIG_6(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabelsExp(Int16Image image, Int16Image grayImage, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabelsExp__SWIG_7(Int16Image.getCPtr(image), Int16Image.getCPtr(grayImage), SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabelsExp(Int32Image image, Int32Image grayImage, SWIGTYPE_p_string exp, BlobAnalyseModifier baMod) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabelsExp__SWIG_8(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), SWIGTYPE_p_string.getCPtr(exp), BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int RemoveGrayScaleLabelsExp(Int32Image image, Int32Image grayImage, SWIGTYPE_p_string exp) {
    int ret = VisionLabPINVOKE.RemoveGrayScaleLabelsExp__SWIG_9(Int32Image.getCPtr(image), Int32Image.getCPtr(grayImage), SWIGTYPE_p_string.getCPtr(exp));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SeparateBlobs(Int16Image src, Int16Image dest, int size) {
    VisionLabPINVOKE.SeparateBlobs__SWIG_1(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SeparateBlobs(Int32Image src, Int32Image dest, int size) {
    VisionLabPINVOKE.SeparateBlobs__SWIG_2(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Closing(ByteImage src, ByteImage dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Closing__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Closing(Int8Image src, Int8Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Closing__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Closing(Int16Image src, Int16Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Closing__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Closing(Int32Image src, Int32Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Closing__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Dilation(ByteImage src, ByteImage dest, int nrNeighbours) {
    VisionLabPINVOKE.Dilation__SWIG_2(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), nrNeighbours);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Dilation(ByteImage src, ByteImage dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Dilation__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Dilation(Int8Image src, Int8Image dest, int nrNeighbours) {
    VisionLabPINVOKE.Dilation__SWIG_4(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), nrNeighbours);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Dilation(Int8Image src, Int8Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Dilation__SWIG_5(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Dilation(Int16Image src, Int16Image dest, int nrNeighbours) {
    VisionLabPINVOKE.Dilation__SWIG_6(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), nrNeighbours);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Dilation(Int16Image src, Int16Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Dilation__SWIG_7(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Dilation(Int32Image src, Int32Image dest, int nrNeighbours) {
    VisionLabPINVOKE.Dilation__SWIG_8(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), nrNeighbours);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Dilation(Int32Image src, Int32Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Dilation__SWIG_9(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Erosion(ByteImage src, ByteImage dest, int nrNeighbours) {
    VisionLabPINVOKE.Erosion__SWIG_2(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), nrNeighbours);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Erosion(ByteImage src, ByteImage dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Erosion__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Erosion(Int8Image src, Int8Image dest, int nrNeighbours) {
    VisionLabPINVOKE.Erosion__SWIG_4(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), nrNeighbours);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Erosion(Int8Image src, Int8Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Erosion__SWIG_5(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Erosion(Int16Image src, Int16Image dest, int nrNeighbours) {
    VisionLabPINVOKE.Erosion__SWIG_6(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), nrNeighbours);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Erosion(Int16Image src, Int16Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Erosion__SWIG_7(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Erosion(Int32Image src, Int32Image dest, int nrNeighbours) {
    VisionLabPINVOKE.Erosion__SWIG_8(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), nrNeighbours);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Erosion(Int32Image src, Int32Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Erosion__SWIG_9(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HitAndMiss(ByteImage src, ByteImage dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.HitAndMiss__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HitAndMiss(Int8Image src, Int8Image dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.HitAndMiss__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HitAndMiss(Int16Image src, Int16Image dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.HitAndMiss__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HitAndMiss(Int32Image src, Int32Image dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.HitAndMiss__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Opening(ByteImage src, ByteImage dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Opening__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Opening(Int8Image src, Int8Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Opening__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Opening(Int16Image src, Int16Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Opening__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Opening(Int32Image src, Int32Image dest, Mask_Int32 mask) {
    VisionLabPINVOKE.Opening__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Thickening(ByteImage src, ByteImage dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.Thickening__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Thickening(Int8Image src, Int8Image dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.Thickening__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Thickening(Int16Image src, Int16Image dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.Thickening__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Thickening(Int32Image src, Int32Image dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.Thickening__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Thinning(ByteImage src, ByteImage dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.Thinning__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Thinning(Int8Image src, Int8Image dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.Thinning__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Thinning(Int16Image src, Int16Image dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.Thinning__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Thinning(Int32Image src, Int32Image dest, Mask_Int32 hitMask, Mask_Int32 missMask) {
    VisionLabPINVOKE.Thinning__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), Mask_Int32.getCPtr(hitMask), Mask_Int32.getCPtr(missMask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Skeleton(ByteImage src, ByteImage dest) {
    VisionLabPINVOKE.Skeleton__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Skeleton(Int8Image src, Int8Image dest) {
    VisionLabPINVOKE.Skeleton__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Skeleton(Int16Image src, Int16Image dest) {
    VisionLabPINVOKE.Skeleton__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Skeleton(Int32Image src, Int32Image dest) {
    VisionLabPINVOKE.Skeleton__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(ByteImage labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_5(ByteImage.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(ByteImage labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_6(ByteImage.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(ByteImage labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_7(ByteImage.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(ByteImage labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_8(ByteImage.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(ByteImage labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_9(ByteImage.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int8Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_10(Int8Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int8Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_11(Int8Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int8Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_12(Int8Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int8Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_13(Int8Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int8Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_14(Int8Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int16Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_15(Int16Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int16Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_16(Int16Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int16Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_17(Int16Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int16Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_18(Int16Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int16Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_19(Int16Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int32Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_20(Int32Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int32Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_21(Int32Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int32Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_22(Int32Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int32Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_23(Int32Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobAnalysis(Int32Image labelledImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs) {
    VisionLabPINVOKE.BlobAnalysis__SWIG_24(Int32Image.getCPtr(labelledImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(ByteImage labelledImage, ByteImage grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_5(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(ByteImage labelledImage, ByteImage grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_6(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(ByteImage labelledImage, ByteImage grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_7(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(ByteImage labelledImage, ByteImage grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_8(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(ByteImage labelledImage, ByteImage grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_9(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int8Image labelledImage, Int8Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_10(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int8Image labelledImage, Int8Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_11(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int8Image labelledImage, Int8Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_12(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int8Image labelledImage, Int8Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_13(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int8Image labelledImage, Int8Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_14(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int16Image labelledImage, Int16Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_15(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int16Image labelledImage, Int16Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_16(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int16Image labelledImage, Int16Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_17(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int16Image labelledImage, Int16Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_18(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int16Image labelledImage, Int16Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_19(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int32Image labelledImage, Int32Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_20(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int32Image labelledImage, Int32Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA, UseXOrY xy) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_21(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int32Image labelledImage, Int32Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so, BlobAnalyse sortBA) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_22(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so, (int)sortBA);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int32Image labelledImage, Int32Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs, SortOrder so) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_23(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs), (int)so);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobAnalysis(Int32Image labelledImage, Int32Image grayImage, SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t s, int maxLabelNr, vector_Blob blobs) {
    VisionLabPINVOKE.GrayScaleBlobAnalysis__SWIG_24(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), SWIGTYPE_p_std__setT_JL_VisionLib_V3__BlobAnalyse_t.getCPtr(s), maxLabelNr, vector_Blob.getCPtr(blobs));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(ByteImage labelledImage, ByteImage grayImage, BlobAnalyse meas, byte scale, UseXOrY xy) {
    VisionLabPINVOKE.BlobMeasure__SWIG_7(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(ByteImage labelledImage, ByteImage grayImage, BlobAnalyse meas, byte scale) {
    VisionLabPINVOKE.BlobMeasure__SWIG_8(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(ByteImage labelledImage, ByteImage grayImage, BlobAnalyse meas) {
    VisionLabPINVOKE.BlobMeasure__SWIG_9(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(ByteImage labelledImage, BlobAnalyse meas, byte scale, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.BlobMeasure__SWIG_10(ByteImage.getCPtr(labelledImage), (int)meas, scale, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(ByteImage labelledImage, BlobAnalyse meas, byte scale, UseXOrY xy) {
    VisionLabPINVOKE.BlobMeasure__SWIG_11(ByteImage.getCPtr(labelledImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(ByteImage labelledImage, BlobAnalyse meas, byte scale) {
    VisionLabPINVOKE.BlobMeasure__SWIG_12(ByteImage.getCPtr(labelledImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(ByteImage labelledImage, BlobAnalyse meas) {
    VisionLabPINVOKE.BlobMeasure__SWIG_13(ByteImage.getCPtr(labelledImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int8Image labelledImage, Int8Image grayImage, BlobAnalyse meas, char scale, UseXOrY xy) {
    VisionLabPINVOKE.BlobMeasure__SWIG_14(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int8Image labelledImage, Int8Image grayImage, BlobAnalyse meas, char scale) {
    VisionLabPINVOKE.BlobMeasure__SWIG_15(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int8Image labelledImage, Int8Image grayImage, BlobAnalyse meas) {
    VisionLabPINVOKE.BlobMeasure__SWIG_16(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int8Image labelledImage, BlobAnalyse meas, char scale, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.BlobMeasure__SWIG_17(Int8Image.getCPtr(labelledImage), (int)meas, scale, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int8Image labelledImage, BlobAnalyse meas, char scale, UseXOrY xy) {
    VisionLabPINVOKE.BlobMeasure__SWIG_18(Int8Image.getCPtr(labelledImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int8Image labelledImage, BlobAnalyse meas, char scale) {
    VisionLabPINVOKE.BlobMeasure__SWIG_19(Int8Image.getCPtr(labelledImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int8Image labelledImage, BlobAnalyse meas) {
    VisionLabPINVOKE.BlobMeasure__SWIG_20(Int8Image.getCPtr(labelledImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int16Image labelledImage, Int16Image grayImage, BlobAnalyse meas, short scale, UseXOrY xy) {
    VisionLabPINVOKE.BlobMeasure__SWIG_21(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int16Image labelledImage, Int16Image grayImage, BlobAnalyse meas, short scale) {
    VisionLabPINVOKE.BlobMeasure__SWIG_22(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int16Image labelledImage, Int16Image grayImage, BlobAnalyse meas) {
    VisionLabPINVOKE.BlobMeasure__SWIG_23(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int16Image labelledImage, BlobAnalyse meas, short scale, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.BlobMeasure__SWIG_24(Int16Image.getCPtr(labelledImage), (int)meas, scale, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int16Image labelledImage, BlobAnalyse meas, short scale, UseXOrY xy) {
    VisionLabPINVOKE.BlobMeasure__SWIG_25(Int16Image.getCPtr(labelledImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int16Image labelledImage, BlobAnalyse meas, short scale) {
    VisionLabPINVOKE.BlobMeasure__SWIG_26(Int16Image.getCPtr(labelledImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int16Image labelledImage, BlobAnalyse meas) {
    VisionLabPINVOKE.BlobMeasure__SWIG_27(Int16Image.getCPtr(labelledImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int32Image labelledImage, Int32Image grayImage, BlobAnalyse meas, int scale, UseXOrY xy) {
    VisionLabPINVOKE.BlobMeasure__SWIG_28(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int32Image labelledImage, Int32Image grayImage, BlobAnalyse meas, int scale) {
    VisionLabPINVOKE.BlobMeasure__SWIG_29(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int32Image labelledImage, Int32Image grayImage, BlobAnalyse meas) {
    VisionLabPINVOKE.BlobMeasure__SWIG_30(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int32Image labelledImage, BlobAnalyse meas, int scale, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.BlobMeasure__SWIG_31(Int32Image.getCPtr(labelledImage), (int)meas, scale, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int32Image labelledImage, BlobAnalyse meas, int scale, UseXOrY xy) {
    VisionLabPINVOKE.BlobMeasure__SWIG_32(Int32Image.getCPtr(labelledImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int32Image labelledImage, BlobAnalyse meas, int scale) {
    VisionLabPINVOKE.BlobMeasure__SWIG_33(Int32Image.getCPtr(labelledImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlobMeasure(Int32Image labelledImage, BlobAnalyse meas) {
    VisionLabPINVOKE.BlobMeasure__SWIG_34(Int32Image.getCPtr(labelledImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(ByteImage labelledImage, ByteImage grayImage, BlobAnalyse meas, byte scale, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_4(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), (int)meas, scale, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(ByteImage labelledImage, ByteImage grayImage, BlobAnalyse meas, byte scale, UseXOrY xy) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_5(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(ByteImage labelledImage, ByteImage grayImage, BlobAnalyse meas, byte scale) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_6(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(ByteImage labelledImage, ByteImage grayImage, BlobAnalyse meas) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_7(ByteImage.getCPtr(labelledImage), ByteImage.getCPtr(grayImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int8Image labelledImage, Int8Image grayImage, BlobAnalyse meas, char scale, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_8(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), (int)meas, scale, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int8Image labelledImage, Int8Image grayImage, BlobAnalyse meas, char scale, UseXOrY xy) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_9(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int8Image labelledImage, Int8Image grayImage, BlobAnalyse meas, char scale) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_10(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int8Image labelledImage, Int8Image grayImage, BlobAnalyse meas) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_11(Int8Image.getCPtr(labelledImage), Int8Image.getCPtr(grayImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int16Image labelledImage, Int16Image grayImage, BlobAnalyse meas, short scale, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_12(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), (int)meas, scale, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int16Image labelledImage, Int16Image grayImage, BlobAnalyse meas, short scale, UseXOrY xy) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_13(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int16Image labelledImage, Int16Image grayImage, BlobAnalyse meas, short scale) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_14(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int16Image labelledImage, Int16Image grayImage, BlobAnalyse meas) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_15(Int16Image.getCPtr(labelledImage), Int16Image.getCPtr(grayImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int32Image labelledImage, Int32Image grayImage, BlobAnalyse meas, int scale, UseXOrY xy, BlobAnalyseModifier baMod) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_16(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), (int)meas, scale, (int)xy, BlobAnalyseModifier.getCPtr(baMod));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int32Image labelledImage, Int32Image grayImage, BlobAnalyse meas, int scale, UseXOrY xy) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_17(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), (int)meas, scale, (int)xy);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int32Image labelledImage, Int32Image grayImage, BlobAnalyse meas, int scale) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_18(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), (int)meas, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GrayScaleBlobMeasure(Int32Image labelledImage, Int32Image grayImage, BlobAnalyse meas) {
    VisionLabPINVOKE.GrayScaleBlobMeasure__SWIG_19(Int32Image.getCPtr(labelledImage), Int32Image.getCPtr(grayImage), (int)meas);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CamDistortion(ByteImage src, ByteImage dest, Coord2D principlePoint, double sx, double dx, double dy, double k1, double k2, double k3) {
    VisionLabPINVOKE.CamDistortion__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), Coord2D.getCPtr(principlePoint), sx, dx, dy, k1, k2, k3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CamDistortion(Int8Image src, Int8Image dest, Coord2D principlePoint, double sx, double dx, double dy, double k1, double k2, double k3) {
    VisionLabPINVOKE.CamDistortion__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), Coord2D.getCPtr(principlePoint), sx, dx, dy, k1, k2, k3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CamDistortion(Int16Image src, Int16Image dest, Coord2D principlePoint, double sx, double dx, double dy, double k1, double k2, double k3) {
    VisionLabPINVOKE.CamDistortion__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), Coord2D.getCPtr(principlePoint), sx, dx, dy, k1, k2, k3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CamDistortion(Int32Image src, Int32Image dest, Coord2D principlePoint, double sx, double dx, double dy, double k1, double k2, double k3) {
    VisionLabPINVOKE.CamDistortion__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), Coord2D.getCPtr(principlePoint), sx, dx, dy, k1, k2, k3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CamDistortion(FloatImage src, FloatImage dest, Coord2D principlePoint, double sx, double dx, double dy, double k1, double k2, double k3) {
    VisionLabPINVOKE.CamDistortion__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), Coord2D.getCPtr(principlePoint), sx, dx, dy, k1, k2, k3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CamDistortion(DoubleImage src, DoubleImage dest, Coord2D principlePoint, double sx, double dx, double dy, double k1, double k2, double k3) {
    VisionLabPINVOKE.CamDistortion__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), Coord2D.getCPtr(principlePoint), sx, dx, dy, k1, k2, k3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, byte low, byte high, int minPixels, ByteImage image, int maxSnapShots) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_4(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, ByteImage.getCPtr(image), maxSnapShots);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, byte low, byte high, int minPixels, ByteImage image) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_5(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, char low, char high, int minPixels, Int8Image image, int maxSnapShots) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_6(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, Int8Image.getCPtr(image), maxSnapShots);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, char low, char high, int minPixels, Int8Image image) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_7(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, short low, short high, int minPixels, Int16Image image, int maxSnapShots) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_8(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, Int16Image.getCPtr(image), maxSnapShots);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, short low, short high, int minPixels, Int16Image image) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_9(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, int low, int high, int minPixels, Int32Image image, int maxSnapShots) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_10(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, Int32Image.getCPtr(image), maxSnapShots);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, int low, int high, int minPixels, Int32Image image) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_11(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, float low, float high, int minPixels, FloatImage image, int maxSnapShots) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_12(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, FloatImage.getCPtr(image), maxSnapShots);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, float low, float high, int minPixels, FloatImage image) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_13(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, double low, double high, int minPixels, DoubleImage image, int maxSnapShots) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_14(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, DoubleImage.getCPtr(image), maxSnapShots);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SnapOnSoftTrigger(__Camera_Byte cam, XYCoord c1, XYCoord c2, double low, double high, int minPixels, DoubleImage image) {
    int ret = VisionLabPINVOKE.SnapOnSoftTrigger__SWIG_15(__Camera_Byte.getCPtr(cam), XYCoord.getCPtr(c1), XYCoord.getCPtr(c2), low, high, minPixels, DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void TrackBoundary(ByteImage image, int label, XYCoord tml, ChainCode cc) {
    VisionLabPINVOKE.TrackBoundary__SWIG_1(ByteImage.getCPtr(image), label, XYCoord.getCPtr(tml), ChainCode.getCPtr(cc));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TrackBoundary(Int8Image image, int label, XYCoord tml, ChainCode cc) {
    VisionLabPINVOKE.TrackBoundary__SWIG_2(Int8Image.getCPtr(image), label, XYCoord.getCPtr(tml), ChainCode.getCPtr(cc));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TrackBoundary(Int16Image image, int label, XYCoord tml, ChainCode cc) {
    VisionLabPINVOKE.TrackBoundary__SWIG_3(Int16Image.getCPtr(image), label, XYCoord.getCPtr(tml), ChainCode.getCPtr(cc));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TrackBoundary(Int32Image image, int label, XYCoord tml, ChainCode cc) {
    VisionLabPINVOKE.TrackBoundary__SWIG_4(Int32Image.getCPtr(image), label, XYCoord.getCPtr(tml), ChainCode.getCPtr(cc));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT1Channel(YUV888Image image, int chanNr, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT1Channel__SWIG_1(YUV888Image.getCPtr(image), chanNr, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT1Channel(YUV161616Image image, int chanNr, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT1Channel__SWIG_2(YUV161616Image.getCPtr(image), chanNr, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT1Channel(HSV888Image image, int chanNr, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT1Channel__SWIG_3(HSV888Image.getCPtr(image), chanNr, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT1Channel(HSV161616Image image, int chanNr, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT1Channel__SWIG_4(HSV161616Image.getCPtr(image), chanNr, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT1Channel(RGB888Image image, int chanNr, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT1Channel__SWIG_5(RGB888Image.getCPtr(image), chanNr, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT1Channel(RGB161616Image image, int chanNr, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT1Channel__SWIG_6(RGB161616Image.getCPtr(image), chanNr, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT3Channels(YUV888Image image, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT3Channels__SWIG_1(YUV888Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT3Channels(YUV161616Image image, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT3Channels__SWIG_2(YUV161616Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT3Channels(HSV888Image image, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT3Channels__SWIG_3(HSV888Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT3Channels(HSV161616Image image, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT3Channels__SWIG_4(HSV161616Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT3Channels(RGB888Image image, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT3Channels__SWIG_5(RGB888Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT3Channels(RGB161616Image image, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT3Channels__SWIG_6(RGB161616Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(ByteImage src, YUV888Image lut, YUV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_1(ByteImage.getCPtr(src), YUV888Image.getCPtr(lut), YUV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int8Image src, YUV888Image lut, YUV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_2(Int8Image.getCPtr(src), YUV888Image.getCPtr(lut), YUV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int16Image src, YUV888Image lut, YUV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_3(Int16Image.getCPtr(src), YUV888Image.getCPtr(lut), YUV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int32Image src, YUV888Image lut, YUV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_4(Int32Image.getCPtr(src), YUV888Image.getCPtr(lut), YUV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(FloatImage src, YUV888Image lut, YUV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_5(FloatImage.getCPtr(src), YUV888Image.getCPtr(lut), YUV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(DoubleImage src, YUV888Image lut, YUV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_6(DoubleImage.getCPtr(src), YUV888Image.getCPtr(lut), YUV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(ByteImage src, YUV161616Image lut, YUV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_7(ByteImage.getCPtr(src), YUV161616Image.getCPtr(lut), YUV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int8Image src, YUV161616Image lut, YUV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_8(Int8Image.getCPtr(src), YUV161616Image.getCPtr(lut), YUV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int16Image src, YUV161616Image lut, YUV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_9(Int16Image.getCPtr(src), YUV161616Image.getCPtr(lut), YUV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int32Image src, YUV161616Image lut, YUV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_10(Int32Image.getCPtr(src), YUV161616Image.getCPtr(lut), YUV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(FloatImage src, YUV161616Image lut, YUV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_11(FloatImage.getCPtr(src), YUV161616Image.getCPtr(lut), YUV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(DoubleImage src, YUV161616Image lut, YUV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_12(DoubleImage.getCPtr(src), YUV161616Image.getCPtr(lut), YUV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(ByteImage src, HSV888Image lut, HSV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_13(ByteImage.getCPtr(src), HSV888Image.getCPtr(lut), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int8Image src, HSV888Image lut, HSV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_14(Int8Image.getCPtr(src), HSV888Image.getCPtr(lut), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int16Image src, HSV888Image lut, HSV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_15(Int16Image.getCPtr(src), HSV888Image.getCPtr(lut), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int32Image src, HSV888Image lut, HSV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_16(Int32Image.getCPtr(src), HSV888Image.getCPtr(lut), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(FloatImage src, HSV888Image lut, HSV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_17(FloatImage.getCPtr(src), HSV888Image.getCPtr(lut), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(DoubleImage src, HSV888Image lut, HSV888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_18(DoubleImage.getCPtr(src), HSV888Image.getCPtr(lut), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(ByteImage src, HSV161616Image lut, HSV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_19(ByteImage.getCPtr(src), HSV161616Image.getCPtr(lut), HSV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int8Image src, HSV161616Image lut, HSV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_20(Int8Image.getCPtr(src), HSV161616Image.getCPtr(lut), HSV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int16Image src, HSV161616Image lut, HSV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_21(Int16Image.getCPtr(src), HSV161616Image.getCPtr(lut), HSV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int32Image src, HSV161616Image lut, HSV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_22(Int32Image.getCPtr(src), HSV161616Image.getCPtr(lut), HSV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(FloatImage src, HSV161616Image lut, HSV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_23(FloatImage.getCPtr(src), HSV161616Image.getCPtr(lut), HSV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(DoubleImage src, HSV161616Image lut, HSV161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_24(DoubleImage.getCPtr(src), HSV161616Image.getCPtr(lut), HSV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(ByteImage src, RGB888Image lut, RGB888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_25(ByteImage.getCPtr(src), RGB888Image.getCPtr(lut), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int8Image src, RGB888Image lut, RGB888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_26(Int8Image.getCPtr(src), RGB888Image.getCPtr(lut), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int16Image src, RGB888Image lut, RGB888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_27(Int16Image.getCPtr(src), RGB888Image.getCPtr(lut), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int32Image src, RGB888Image lut, RGB888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_28(Int32Image.getCPtr(src), RGB888Image.getCPtr(lut), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(FloatImage src, RGB888Image lut, RGB888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_29(FloatImage.getCPtr(src), RGB888Image.getCPtr(lut), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(DoubleImage src, RGB888Image lut, RGB888Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_30(DoubleImage.getCPtr(src), RGB888Image.getCPtr(lut), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(ByteImage src, RGB161616Image lut, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_31(ByteImage.getCPtr(src), RGB161616Image.getCPtr(lut), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int8Image src, RGB161616Image lut, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_32(Int8Image.getCPtr(src), RGB161616Image.getCPtr(lut), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int16Image src, RGB161616Image lut, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_33(Int16Image.getCPtr(src), RGB161616Image.getCPtr(lut), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(Int32Image src, RGB161616Image lut, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_34(Int32Image.getCPtr(src), RGB161616Image.getCPtr(lut), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(FloatImage src, RGB161616Image lut, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_35(FloatImage.getCPtr(src), RGB161616Image.getCPtr(lut), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertToFalseColor(DoubleImage src, RGB161616Image lut, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertToFalseColor__SWIG_36(DoubleImage.getCPtr(src), RGB161616Image.getCPtr(lut), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, int chanNr, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_7(YUV888Image.getCPtr(image), chanNr, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, int chanNr, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_8(YUV888Image.getCPtr(image), chanNr, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, int chanNr, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_9(YUV888Image.getCPtr(image), chanNr, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, int chanNr, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_10(YUV888Image.getCPtr(image), chanNr, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, int chanNr, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_11(YUV888Image.getCPtr(image), chanNr, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, int chanNr, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_12(YUV888Image.getCPtr(image), chanNr, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, int chanNr, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_13(YUV161616Image.getCPtr(image), chanNr, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, int chanNr, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_14(YUV161616Image.getCPtr(image), chanNr, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, int chanNr, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_15(YUV161616Image.getCPtr(image), chanNr, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, int chanNr, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_16(YUV161616Image.getCPtr(image), chanNr, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, int chanNr, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_17(YUV161616Image.getCPtr(image), chanNr, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, int chanNr, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_18(YUV161616Image.getCPtr(image), chanNr, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, int chanNr, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_19(HSV888Image.getCPtr(image), chanNr, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, int chanNr, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_20(HSV888Image.getCPtr(image), chanNr, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, int chanNr, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_21(HSV888Image.getCPtr(image), chanNr, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, int chanNr, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_22(HSV888Image.getCPtr(image), chanNr, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, int chanNr, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_23(HSV888Image.getCPtr(image), chanNr, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, int chanNr, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_24(HSV888Image.getCPtr(image), chanNr, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, int chanNr, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_25(HSV161616Image.getCPtr(image), chanNr, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, int chanNr, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_26(HSV161616Image.getCPtr(image), chanNr, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, int chanNr, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_27(HSV161616Image.getCPtr(image), chanNr, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, int chanNr, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_28(HSV161616Image.getCPtr(image), chanNr, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, int chanNr, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_29(HSV161616Image.getCPtr(image), chanNr, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, int chanNr, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_30(HSV161616Image.getCPtr(image), chanNr, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB888Image image, int chanNr, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_31(RGB888Image.getCPtr(image), chanNr, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB888Image image, int chanNr, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_32(RGB888Image.getCPtr(image), chanNr, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB888Image image, int chanNr, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_33(RGB888Image.getCPtr(image), chanNr, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB888Image image, int chanNr, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_34(RGB888Image.getCPtr(image), chanNr, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB888Image image, int chanNr, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_35(RGB888Image.getCPtr(image), chanNr, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB888Image image, int chanNr, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_36(RGB888Image.getCPtr(image), chanNr, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, int chanNr, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_37(RGB161616Image.getCPtr(image), chanNr, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, int chanNr, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_38(RGB161616Image.getCPtr(image), chanNr, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, int chanNr, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_39(RGB161616Image.getCPtr(image), chanNr, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, int chanNr, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_40(RGB161616Image.getCPtr(image), chanNr, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, int chanNr, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_41(RGB161616Image.getCPtr(image), chanNr, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, int chanNr, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_42(RGB161616Image.getCPtr(image), chanNr, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV888Image image, ByteImage chan1, ByteImage chan2, ByteImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_1(YUV888Image.getCPtr(image), ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV888Image image, Int8Image chan1, Int8Image chan2, Int8Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_2(YUV888Image.getCPtr(image), Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV888Image image, Int16Image chan1, Int16Image chan2, Int16Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_3(YUV888Image.getCPtr(image), Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV888Image image, Int32Image chan1, Int32Image chan2, Int32Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_4(YUV888Image.getCPtr(image), Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV888Image image, FloatImage chan1, FloatImage chan2, FloatImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_5(YUV888Image.getCPtr(image), FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV888Image image, DoubleImage chan1, DoubleImage chan2, DoubleImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_6(YUV888Image.getCPtr(image), DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV161616Image image, ByteImage chan1, ByteImage chan2, ByteImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_7(YUV161616Image.getCPtr(image), ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV161616Image image, Int8Image chan1, Int8Image chan2, Int8Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_8(YUV161616Image.getCPtr(image), Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV161616Image image, Int16Image chan1, Int16Image chan2, Int16Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_9(YUV161616Image.getCPtr(image), Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV161616Image image, Int32Image chan1, Int32Image chan2, Int32Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_10(YUV161616Image.getCPtr(image), Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV161616Image image, FloatImage chan1, FloatImage chan2, FloatImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_11(YUV161616Image.getCPtr(image), FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(YUV161616Image image, DoubleImage chan1, DoubleImage chan2, DoubleImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_12(YUV161616Image.getCPtr(image), DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV888Image image, ByteImage chan1, ByteImage chan2, ByteImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_13(HSV888Image.getCPtr(image), ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV888Image image, Int8Image chan1, Int8Image chan2, Int8Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_14(HSV888Image.getCPtr(image), Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV888Image image, Int16Image chan1, Int16Image chan2, Int16Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_15(HSV888Image.getCPtr(image), Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV888Image image, Int32Image chan1, Int32Image chan2, Int32Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_16(HSV888Image.getCPtr(image), Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV888Image image, FloatImage chan1, FloatImage chan2, FloatImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_17(HSV888Image.getCPtr(image), FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV888Image image, DoubleImage chan1, DoubleImage chan2, DoubleImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_18(HSV888Image.getCPtr(image), DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV161616Image image, ByteImage chan1, ByteImage chan2, ByteImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_19(HSV161616Image.getCPtr(image), ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV161616Image image, Int8Image chan1, Int8Image chan2, Int8Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_20(HSV161616Image.getCPtr(image), Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV161616Image image, Int16Image chan1, Int16Image chan2, Int16Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_21(HSV161616Image.getCPtr(image), Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV161616Image image, Int32Image chan1, Int32Image chan2, Int32Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_22(HSV161616Image.getCPtr(image), Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV161616Image image, FloatImage chan1, FloatImage chan2, FloatImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_23(HSV161616Image.getCPtr(image), FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(HSV161616Image image, DoubleImage chan1, DoubleImage chan2, DoubleImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_24(HSV161616Image.getCPtr(image), DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB888Image image, ByteImage chan1, ByteImage chan2, ByteImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_25(RGB888Image.getCPtr(image), ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB888Image image, Int8Image chan1, Int8Image chan2, Int8Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_26(RGB888Image.getCPtr(image), Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB888Image image, Int16Image chan1, Int16Image chan2, Int16Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_27(RGB888Image.getCPtr(image), Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB888Image image, Int32Image chan1, Int32Image chan2, Int32Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_28(RGB888Image.getCPtr(image), Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB888Image image, FloatImage chan1, FloatImage chan2, FloatImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_29(RGB888Image.getCPtr(image), FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB888Image image, DoubleImage chan1, DoubleImage chan2, DoubleImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_30(RGB888Image.getCPtr(image), DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB161616Image image, ByteImage chan1, ByteImage chan2, ByteImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_31(RGB161616Image.getCPtr(image), ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB161616Image image, Int8Image chan1, Int8Image chan2, Int8Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_32(RGB161616Image.getCPtr(image), Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB161616Image image, Int16Image chan1, Int16Image chan2, Int16Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_33(RGB161616Image.getCPtr(image), Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB161616Image image, Int32Image chan1, Int32Image chan2, Int32Image chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_34(RGB161616Image.getCPtr(image), Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB161616Image image, FloatImage chan1, FloatImage chan2, FloatImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_35(RGB161616Image.getCPtr(image), FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract3Channels(RGB161616Image image, DoubleImage chan1, DoubleImage chan2, DoubleImage chan3) {
    VisionLabPINVOKE.Extract3Channels__SWIG_36(RGB161616Image.getCPtr(image), DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV888Image image, ByteImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_1(YUV888Image.getCPtr(image), ByteImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV888Image image, Int8Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_2(YUV888Image.getCPtr(image), Int8Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV888Image image, Int16Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_3(YUV888Image.getCPtr(image), Int16Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV888Image image, Int32Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_4(YUV888Image.getCPtr(image), Int32Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV888Image image, FloatImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_5(YUV888Image.getCPtr(image), FloatImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV888Image image, DoubleImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_6(YUV888Image.getCPtr(image), DoubleImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV161616Image image, ByteImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_7(YUV161616Image.getCPtr(image), ByteImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV161616Image image, Int8Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_8(YUV161616Image.getCPtr(image), Int8Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV161616Image image, Int16Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_9(YUV161616Image.getCPtr(image), Int16Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV161616Image image, Int32Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_10(YUV161616Image.getCPtr(image), Int32Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV161616Image image, FloatImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_11(YUV161616Image.getCPtr(image), FloatImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(YUV161616Image image, DoubleImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_12(YUV161616Image.getCPtr(image), DoubleImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV888Image image, ByteImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_13(HSV888Image.getCPtr(image), ByteImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV888Image image, Int8Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_14(HSV888Image.getCPtr(image), Int8Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV888Image image, Int16Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_15(HSV888Image.getCPtr(image), Int16Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV888Image image, Int32Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_16(HSV888Image.getCPtr(image), Int32Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV888Image image, FloatImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_17(HSV888Image.getCPtr(image), FloatImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV888Image image, DoubleImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_18(HSV888Image.getCPtr(image), DoubleImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV161616Image image, ByteImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_19(HSV161616Image.getCPtr(image), ByteImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV161616Image image, Int8Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_20(HSV161616Image.getCPtr(image), Int8Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV161616Image image, Int16Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_21(HSV161616Image.getCPtr(image), Int16Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV161616Image image, Int32Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_22(HSV161616Image.getCPtr(image), Int32Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV161616Image image, FloatImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_23(HSV161616Image.getCPtr(image), FloatImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(HSV161616Image image, DoubleImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_24(HSV161616Image.getCPtr(image), DoubleImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB888Image image, ByteImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_25(RGB888Image.getCPtr(image), ByteImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB888Image image, Int8Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_26(RGB888Image.getCPtr(image), Int8Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB888Image image, Int16Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_27(RGB888Image.getCPtr(image), Int16Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB888Image image, Int32Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_28(RGB888Image.getCPtr(image), Int32Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB888Image image, FloatImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_29(RGB888Image.getCPtr(image), FloatImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB888Image image, DoubleImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_30(RGB888Image.getCPtr(image), DoubleImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB161616Image image, ByteImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_31(RGB161616Image.getCPtr(image), ByteImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB161616Image image, Int8Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_32(RGB161616Image.getCPtr(image), Int8Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB161616Image image, Int16Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_33(RGB161616Image.getCPtr(image), Int16Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB161616Image image, Int32Image chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_34(RGB161616Image.getCPtr(image), Int32Image.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB161616Image image, FloatImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_35(RGB161616Image.getCPtr(image), FloatImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge1Channel(RGB161616Image image, DoubleImage chan, int chanNr) {
    VisionLabPINVOKE.Merge1Channel__SWIG_36(RGB161616Image.getCPtr(image), DoubleImage.getCPtr(chan), chanNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(ByteImage chan1, ByteImage chan2, ByteImage chan3, YUV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_1(ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3), YUV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int8Image chan1, Int8Image chan2, Int8Image chan3, YUV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_2(Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3), YUV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int16Image chan1, Int16Image chan2, Int16Image chan3, YUV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_3(Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3), YUV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int32Image chan1, Int32Image chan2, Int32Image chan3, YUV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_4(Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3), YUV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(FloatImage chan1, FloatImage chan2, FloatImage chan3, YUV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_5(FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3), YUV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(DoubleImage chan1, DoubleImage chan2, DoubleImage chan3, YUV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_6(DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3), YUV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(ByteImage chan1, ByteImage chan2, ByteImage chan3, YUV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_7(ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3), YUV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int8Image chan1, Int8Image chan2, Int8Image chan3, YUV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_8(Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3), YUV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int16Image chan1, Int16Image chan2, Int16Image chan3, YUV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_9(Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3), YUV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int32Image chan1, Int32Image chan2, Int32Image chan3, YUV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_10(Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3), YUV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(FloatImage chan1, FloatImage chan2, FloatImage chan3, YUV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_11(FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3), YUV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(DoubleImage chan1, DoubleImage chan2, DoubleImage chan3, YUV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_12(DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3), YUV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(ByteImage chan1, ByteImage chan2, ByteImage chan3, HSV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_13(ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3), HSV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int8Image chan1, Int8Image chan2, Int8Image chan3, HSV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_14(Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3), HSV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int16Image chan1, Int16Image chan2, Int16Image chan3, HSV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_15(Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3), HSV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int32Image chan1, Int32Image chan2, Int32Image chan3, HSV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_16(Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3), HSV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(FloatImage chan1, FloatImage chan2, FloatImage chan3, HSV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_17(FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3), HSV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(DoubleImage chan1, DoubleImage chan2, DoubleImage chan3, HSV888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_18(DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3), HSV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(ByteImage chan1, ByteImage chan2, ByteImage chan3, HSV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_19(ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3), HSV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int8Image chan1, Int8Image chan2, Int8Image chan3, HSV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_20(Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3), HSV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int16Image chan1, Int16Image chan2, Int16Image chan3, HSV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_21(Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3), HSV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int32Image chan1, Int32Image chan2, Int32Image chan3, HSV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_22(Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3), HSV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(FloatImage chan1, FloatImage chan2, FloatImage chan3, HSV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_23(FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3), HSV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(DoubleImage chan1, DoubleImage chan2, DoubleImage chan3, HSV161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_24(DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3), HSV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(ByteImage chan1, ByteImage chan2, ByteImage chan3, RGB888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_25(ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3), RGB888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int8Image chan1, Int8Image chan2, Int8Image chan3, RGB888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_26(Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3), RGB888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int16Image chan1, Int16Image chan2, Int16Image chan3, RGB888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_27(Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3), RGB888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int32Image chan1, Int32Image chan2, Int32Image chan3, RGB888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_28(Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3), RGB888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(FloatImage chan1, FloatImage chan2, FloatImage chan3, RGB888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_29(FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3), RGB888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(DoubleImage chan1, DoubleImage chan2, DoubleImage chan3, RGB888Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_30(DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3), RGB888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(ByteImage chan1, ByteImage chan2, ByteImage chan3, RGB161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_31(ByteImage.getCPtr(chan1), ByteImage.getCPtr(chan2), ByteImage.getCPtr(chan3), RGB161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int8Image chan1, Int8Image chan2, Int8Image chan3, RGB161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_32(Int8Image.getCPtr(chan1), Int8Image.getCPtr(chan2), Int8Image.getCPtr(chan3), RGB161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int16Image chan1, Int16Image chan2, Int16Image chan3, RGB161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_33(Int16Image.getCPtr(chan1), Int16Image.getCPtr(chan2), Int16Image.getCPtr(chan3), RGB161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(Int32Image chan1, Int32Image chan2, Int32Image chan3, RGB161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_34(Int32Image.getCPtr(chan1), Int32Image.getCPtr(chan2), Int32Image.getCPtr(chan3), RGB161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(FloatImage chan1, FloatImage chan2, FloatImage chan3, RGB161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_35(FloatImage.getCPtr(chan1), FloatImage.getCPtr(chan2), FloatImage.getCPtr(chan3), RGB161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Merge3Channels(DoubleImage chan1, DoubleImage chan2, DoubleImage chan3, RGB161616Image image) {
    VisionLabPINVOKE.Merge3Channels__SWIG_36(DoubleImage.getCPtr(chan1), DoubleImage.getCPtr(chan2), DoubleImage.getCPtr(chan3), RGB161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV888Image image, ByteImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_1(YUV888Image.getCPtr(image), ByteImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV888Image image, Int8Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_2(YUV888Image.getCPtr(image), Int8Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV888Image image, Int16Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_3(YUV888Image.getCPtr(image), Int16Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV888Image image, Int32Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_4(YUV888Image.getCPtr(image), Int32Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV888Image image, FloatImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_5(YUV888Image.getCPtr(image), FloatImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV888Image image, DoubleImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_6(YUV888Image.getCPtr(image), DoubleImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV161616Image image, ByteImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_7(YUV161616Image.getCPtr(image), ByteImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV161616Image image, Int8Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_8(YUV161616Image.getCPtr(image), Int8Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV161616Image image, Int16Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_9(YUV161616Image.getCPtr(image), Int16Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV161616Image image, Int32Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_10(YUV161616Image.getCPtr(image), Int32Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV161616Image image, FloatImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_11(YUV161616Image.getCPtr(image), FloatImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(YUV161616Image image, DoubleImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_12(YUV161616Image.getCPtr(image), DoubleImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV888Image image, ByteImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_13(HSV888Image.getCPtr(image), ByteImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV888Image image, Int8Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_14(HSV888Image.getCPtr(image), Int8Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV888Image image, Int16Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_15(HSV888Image.getCPtr(image), Int16Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV888Image image, Int32Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_16(HSV888Image.getCPtr(image), Int32Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV888Image image, FloatImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_17(HSV888Image.getCPtr(image), FloatImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV888Image image, DoubleImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_18(HSV888Image.getCPtr(image), DoubleImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV161616Image image, ByteImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_19(HSV161616Image.getCPtr(image), ByteImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV161616Image image, Int8Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_20(HSV161616Image.getCPtr(image), Int8Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV161616Image image, Int16Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_21(HSV161616Image.getCPtr(image), Int16Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV161616Image image, Int32Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_22(HSV161616Image.getCPtr(image), Int32Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV161616Image image, FloatImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_23(HSV161616Image.getCPtr(image), FloatImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(HSV161616Image image, DoubleImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_24(HSV161616Image.getCPtr(image), DoubleImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB888Image image, ByteImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_25(RGB888Image.getCPtr(image), ByteImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB888Image image, Int8Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_26(RGB888Image.getCPtr(image), Int8Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB888Image image, Int16Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_27(RGB888Image.getCPtr(image), Int16Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB888Image image, Int32Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_28(RGB888Image.getCPtr(image), Int32Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB888Image image, FloatImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_29(RGB888Image.getCPtr(image), FloatImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB888Image image, DoubleImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_30(RGB888Image.getCPtr(image), DoubleImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB161616Image image, ByteImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_31(RGB161616Image.getCPtr(image), ByteImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB161616Image image, Int8Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_32(RGB161616Image.getCPtr(image), Int8Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB161616Image image, Int16Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_33(RGB161616Image.getCPtr(image), Int16Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB161616Image image, Int32Image thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_34(RGB161616Image.getCPtr(image), Int32Image.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB161616Image image, FloatImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_35(RGB161616Image.getCPtr(image), FloatImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold3Channels(RGB161616Image image, DoubleImage thresImage, int lowChan1, int highChan1, int lowChan2, int highChan2, int lowChan3, int highChan3) {
    VisionLabPINVOKE.Threshold3Channels__SWIG_36(RGB161616Image.getCPtr(image), DoubleImage.getCPtr(thresImage), lowChan1, highChan1, lowChan2, highChan2, lowChan3, highChan3);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(ByteImage src, ComplexFloatImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_1(ByteImage.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(Int8Image src, ComplexFloatImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_2(Int8Image.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(Int16Image src, ComplexFloatImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_3(Int16Image.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(Int32Image src, ComplexFloatImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_4(Int32Image.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(FloatImage src, ComplexFloatImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_5(FloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(DoubleImage src, ComplexFloatImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_6(DoubleImage.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(ByteImage src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_7(ByteImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(Int8Image src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_8(Int8Image.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(Int16Image src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_9(Int16Image.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(Int32Image src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_10(Int32Image.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(FloatImage src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_11(FloatImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToComplexImage(DoubleImage src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ConvertOrdToComplexImage__SWIG_12(DoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexFloatImage src, ByteImage dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_1(ComplexFloatImage.getCPtr(src), ByteImage.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexFloatImage src, Int8Image dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_2(ComplexFloatImage.getCPtr(src), Int8Image.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexFloatImage src, Int16Image dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_3(ComplexFloatImage.getCPtr(src), Int16Image.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexFloatImage src, Int32Image dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_4(ComplexFloatImage.getCPtr(src), Int32Image.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexFloatImage src, FloatImage dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_5(ComplexFloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexFloatImage src, DoubleImage dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_6(ComplexFloatImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexDoubleImage src, ByteImage dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_7(ComplexDoubleImage.getCPtr(src), ByteImage.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexDoubleImage src, Int8Image dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_8(ComplexDoubleImage.getCPtr(src), Int8Image.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexDoubleImage src, Int16Image dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_9(ComplexDoubleImage.getCPtr(src), Int16Image.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexDoubleImage src, Int32Image dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_10(ComplexDoubleImage.getCPtr(src), Int32Image.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexDoubleImage src, FloatImage dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_11(ComplexDoubleImage.getCPtr(src), FloatImage.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertComplexToOrdImage(ComplexDoubleImage src, DoubleImage dest, ConvComplex kind) {
    VisionLabPINVOKE.ConvertComplexToOrdImage__SWIG_12(ComplexDoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)kind);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(ByteImage mag, ByteImage phase, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_1(ByteImage.getCPtr(mag), ByteImage.getCPtr(phase), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(Int8Image mag, Int8Image phase, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_2(Int8Image.getCPtr(mag), Int8Image.getCPtr(phase), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(Int16Image mag, Int16Image phase, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_3(Int16Image.getCPtr(mag), Int16Image.getCPtr(phase), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(Int32Image mag, Int32Image phase, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_4(Int32Image.getCPtr(mag), Int32Image.getCPtr(phase), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(FloatImage mag, FloatImage phase, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_5(FloatImage.getCPtr(mag), FloatImage.getCPtr(phase), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(DoubleImage mag, DoubleImage phase, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_6(DoubleImage.getCPtr(mag), DoubleImage.getCPtr(phase), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(ByteImage mag, ByteImage phase, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_7(ByteImage.getCPtr(mag), ByteImage.getCPtr(phase), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(Int8Image mag, Int8Image phase, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_8(Int8Image.getCPtr(mag), Int8Image.getCPtr(phase), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(Int16Image mag, Int16Image phase, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_9(Int16Image.getCPtr(mag), Int16Image.getCPtr(phase), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(Int32Image mag, Int32Image phase, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_10(Int32Image.getCPtr(mag), Int32Image.getCPtr(phase), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(FloatImage mag, FloatImage phase, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_11(FloatImage.getCPtr(mag), FloatImage.getCPtr(phase), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromPolar(DoubleImage mag, DoubleImage phase, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromPolar__SWIG_12(DoubleImage.getCPtr(mag), DoubleImage.getCPtr(phase), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(ByteImage real, ByteImage imag, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_1(ByteImage.getCPtr(real), ByteImage.getCPtr(imag), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(Int8Image real, Int8Image imag, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_2(Int8Image.getCPtr(real), Int8Image.getCPtr(imag), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(Int16Image real, Int16Image imag, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_3(Int16Image.getCPtr(real), Int16Image.getCPtr(imag), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(Int32Image real, Int32Image imag, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_4(Int32Image.getCPtr(real), Int32Image.getCPtr(imag), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(FloatImage real, FloatImage imag, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_5(FloatImage.getCPtr(real), FloatImage.getCPtr(imag), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(DoubleImage real, DoubleImage imag, ComplexFloatImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_6(DoubleImage.getCPtr(real), DoubleImage.getCPtr(imag), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(ByteImage real, ByteImage imag, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_7(ByteImage.getCPtr(real), ByteImage.getCPtr(imag), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(Int8Image real, Int8Image imag, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_8(Int8Image.getCPtr(real), Int8Image.getCPtr(imag), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(Int16Image real, Int16Image imag, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_9(Int16Image.getCPtr(real), Int16Image.getCPtr(imag), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(Int32Image real, Int32Image imag, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_10(Int32Image.getCPtr(real), Int32Image.getCPtr(imag), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(FloatImage real, FloatImage imag, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_11(FloatImage.getCPtr(real), FloatImage.getCPtr(imag), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexImageFromRectangular(DoubleImage real, DoubleImage imag, ComplexDoubleImage dest) {
    VisionLabPINVOKE.ComplexImageFromRectangular__SWIG_12(DoubleImage.getCPtr(real), DoubleImage.getCPtr(imag), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Conjugate(ComplexFloatImage image) {
    VisionLabPINVOKE.Conjugate__SWIG_1(ComplexFloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Conjugate(ComplexDoubleImage image) {
    VisionLabPINVOKE.Conjugate__SWIG_2(ComplexDoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagnitude(ByteImage conv1, ByteImage conv2, ByteImage destMag) {
    VisionLabPINVOKE.DGEdgeMagnitude__SWIG_1(ByteImage.getCPtr(conv1), ByteImage.getCPtr(conv2), ByteImage.getCPtr(destMag));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagnitude(Int8Image conv1, Int8Image conv2, Int8Image destMag) {
    VisionLabPINVOKE.DGEdgeMagnitude__SWIG_2(Int8Image.getCPtr(conv1), Int8Image.getCPtr(conv2), Int8Image.getCPtr(destMag));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagnitude(Int16Image conv1, Int16Image conv2, Int16Image destMag) {
    VisionLabPINVOKE.DGEdgeMagnitude__SWIG_3(Int16Image.getCPtr(conv1), Int16Image.getCPtr(conv2), Int16Image.getCPtr(destMag));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagnitude(Int32Image conv1, Int32Image conv2, Int32Image destMag) {
    VisionLabPINVOKE.DGEdgeMagnitude__SWIG_4(Int32Image.getCPtr(conv1), Int32Image.getCPtr(conv2), Int32Image.getCPtr(destMag));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagnitude(FloatImage conv1, FloatImage conv2, FloatImage destMag) {
    VisionLabPINVOKE.DGEdgeMagnitude__SWIG_5(FloatImage.getCPtr(conv1), FloatImage.getCPtr(conv2), FloatImage.getCPtr(destMag));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagnitude(DoubleImage conv1, DoubleImage conv2, DoubleImage destMag) {
    VisionLabPINVOKE.DGEdgeMagnitude__SWIG_6(DoubleImage.getCPtr(conv1), DoubleImage.getCPtr(conv2), DoubleImage.getCPtr(destMag));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDirection(ByteImage conv1, ByteImage conv2, ByteImage destDir, byte dirScale) {
    VisionLabPINVOKE.DGEdgeDirection__SWIG_1(ByteImage.getCPtr(conv1), ByteImage.getCPtr(conv2), ByteImage.getCPtr(destDir), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDirection(Int8Image conv1, Int8Image conv2, Int8Image destDir, char dirScale) {
    VisionLabPINVOKE.DGEdgeDirection__SWIG_2(Int8Image.getCPtr(conv1), Int8Image.getCPtr(conv2), Int8Image.getCPtr(destDir), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDirection(Int16Image conv1, Int16Image conv2, Int16Image destDir, short dirScale) {
    VisionLabPINVOKE.DGEdgeDirection__SWIG_3(Int16Image.getCPtr(conv1), Int16Image.getCPtr(conv2), Int16Image.getCPtr(destDir), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDirection(Int32Image conv1, Int32Image conv2, Int32Image destDir, int dirScale) {
    VisionLabPINVOKE.DGEdgeDirection__SWIG_4(Int32Image.getCPtr(conv1), Int32Image.getCPtr(conv2), Int32Image.getCPtr(destDir), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDirection(FloatImage conv1, FloatImage conv2, FloatImage destDir, float dirScale) {
    VisionLabPINVOKE.DGEdgeDirection__SWIG_5(FloatImage.getCPtr(conv1), FloatImage.getCPtr(conv2), FloatImage.getCPtr(destDir), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDirection(DoubleImage conv1, DoubleImage conv2, DoubleImage destDir, double dirScale) {
    VisionLabPINVOKE.DGEdgeDirection__SWIG_6(DoubleImage.getCPtr(conv1), DoubleImage.getCPtr(conv2), DoubleImage.getCPtr(destDir), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagAndDir(ByteImage conv1, ByteImage conv2, ByteImage destMag, ByteImage destDir, byte dirScale, byte minEdge) {
    VisionLabPINVOKE.DGEdgeMagAndDir__SWIG_1(ByteImage.getCPtr(conv1), ByteImage.getCPtr(conv2), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagAndDir(Int8Image conv1, Int8Image conv2, Int8Image destMag, Int8Image destDir, char dirScale, char minEdge) {
    VisionLabPINVOKE.DGEdgeMagAndDir__SWIG_2(Int8Image.getCPtr(conv1), Int8Image.getCPtr(conv2), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagAndDir(Int16Image conv1, Int16Image conv2, Int16Image destMag, Int16Image destDir, short dirScale, short minEdge) {
    VisionLabPINVOKE.DGEdgeMagAndDir__SWIG_3(Int16Image.getCPtr(conv1), Int16Image.getCPtr(conv2), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagAndDir(Int32Image conv1, Int32Image conv2, Int32Image destMag, Int32Image destDir, int dirScale, int minEdge) {
    VisionLabPINVOKE.DGEdgeMagAndDir__SWIG_4(Int32Image.getCPtr(conv1), Int32Image.getCPtr(conv2), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagAndDir(FloatImage conv1, FloatImage conv2, FloatImage destMag, FloatImage destDir, float dirScale, float minEdge) {
    VisionLabPINVOKE.DGEdgeMagAndDir__SWIG_5(FloatImage.getCPtr(conv1), FloatImage.getCPtr(conv2), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeMagAndDir(DoubleImage conv1, DoubleImage conv2, DoubleImage destMag, DoubleImage destDir, double dirScale, double minEdge) {
    VisionLabPINVOKE.DGEdgeMagAndDir__SWIG_6(DoubleImage.getCPtr(conv1), DoubleImage.getCPtr(conv2), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(ByteImage src, ByteImage destMag, ByteImage destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, byte dirScale, byte minEdge) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_2(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(ByteImage src, ByteImage destMag, ByteImage destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, byte dirScale) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(Int8Image src, Int8Image destMag, Int8Image destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, char dirScale, char minEdge) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_4(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(Int8Image src, Int8Image destMag, Int8Image destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, char dirScale) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_5(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(Int16Image src, Int16Image destMag, Int16Image destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, short dirScale, short minEdge) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_6(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(Int16Image src, Int16Image destMag, Int16Image destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, short dirScale) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_7(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(Int32Image src, Int32Image destMag, Int32Image destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, int dirScale, int minEdge) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_8(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(Int32Image src, Int32Image destMag, Int32Image destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, int dirScale) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_9(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(FloatImage src, FloatImage destMag, FloatImage destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, float dirScale, float minEdge) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_10(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(FloatImage src, FloatImage destMag, FloatImage destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, float dirScale) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_11(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, double dirScale, double minEdge) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_12(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DGEdgeDetection(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Mask_Int32 mask1, int div1, Mask_Int32 mask2, int div2, Gradient grad, double dirScale) {
    VisionLabPINVOKE.DGEdgeDetection__SWIG_13(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), Mask_Int32.getCPtr(mask1), div1, Mask_Int32.getCPtr(mask2), div2, (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TMEdgeDetection(ByteImage src, ByteImage destMag, ByteImage destDir, int nrMasks, Mask_Int32 maskTab, SWIGTYPE_p_unsigned_char alfaTab, Gradient grad) {
    VisionLabPINVOKE.TMEdgeDetection__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), nrMasks, Mask_Int32.getCPtr(maskTab), SWIGTYPE_p_unsigned_char.getCPtr(alfaTab), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TMEdgeDetection(Int8Image src, Int8Image destMag, Int8Image destDir, int nrMasks, Mask_Int32 maskTab, string alfaTab, Gradient grad) {
    VisionLabPINVOKE.TMEdgeDetection__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), nrMasks, Mask_Int32.getCPtr(maskTab), alfaTab, (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TMEdgeDetection(Int16Image src, Int16Image destMag, Int16Image destDir, int nrMasks, Mask_Int32 maskTab, SWIGTYPE_p_short alfaTab, Gradient grad) {
    VisionLabPINVOKE.TMEdgeDetection__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), nrMasks, Mask_Int32.getCPtr(maskTab), SWIGTYPE_p_short.getCPtr(alfaTab), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TMEdgeDetection(Int32Image src, Int32Image destMag, Int32Image destDir, int nrMasks, Mask_Int32 maskTab, SWIGTYPE_p_int alfaTab, Gradient grad) {
    VisionLabPINVOKE.TMEdgeDetection__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), nrMasks, Mask_Int32.getCPtr(maskTab), SWIGTYPE_p_int.getCPtr(alfaTab), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TMEdgeDetection(FloatImage src, FloatImage destMag, FloatImage destDir, int nrMasks, Mask_Int32 maskTab, SWIGTYPE_p_float alfaTab, Gradient grad) {
    VisionLabPINVOKE.TMEdgeDetection__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), nrMasks, Mask_Int32.getCPtr(maskTab), SWIGTYPE_p_float.getCPtr(alfaTab), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TMEdgeDetection(DoubleImage src, DoubleImage destMag, DoubleImage destDir, int nrMasks, Mask_Int32 maskTab, SWIGTYPE_p_double alfaTab, Gradient grad) {
    VisionLabPINVOKE.TMEdgeDetection__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), nrMasks, Mask_Int32.getCPtr(maskTab), SWIGTYPE_p_double.getCPtr(alfaTab), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int FindEdgeCircle(ByteImage image, Coord2D middle, int nrSamples, double minR, double maxR, double outlierDistance, int nrIterations, Coord2D center, ref double radius) {
    int ret = VisionLabPINVOKE.FindEdgeCircle__SWIG_1(ByteImage.getCPtr(image), Coord2D.getCPtr(middle), nrSamples, minR, maxR, outlierDistance, nrIterations, Coord2D.getCPtr(center), ref radius);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindEdgeCircle(Int8Image image, Coord2D middle, int nrSamples, double minR, double maxR, double outlierDistance, int nrIterations, Coord2D center, ref double radius) {
    int ret = VisionLabPINVOKE.FindEdgeCircle__SWIG_2(Int8Image.getCPtr(image), Coord2D.getCPtr(middle), nrSamples, minR, maxR, outlierDistance, nrIterations, Coord2D.getCPtr(center), ref radius);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindEdgeCircle(Int16Image image, Coord2D middle, int nrSamples, double minR, double maxR, double outlierDistance, int nrIterations, Coord2D center, ref double radius) {
    int ret = VisionLabPINVOKE.FindEdgeCircle__SWIG_3(Int16Image.getCPtr(image), Coord2D.getCPtr(middle), nrSamples, minR, maxR, outlierDistance, nrIterations, Coord2D.getCPtr(center), ref radius);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindEdgeCircle(Int32Image image, Coord2D middle, int nrSamples, double minR, double maxR, double outlierDistance, int nrIterations, Coord2D center, ref double radius) {
    int ret = VisionLabPINVOKE.FindEdgeCircle__SWIG_4(Int32Image.getCPtr(image), Coord2D.getCPtr(middle), nrSamples, minR, maxR, outlierDistance, nrIterations, Coord2D.getCPtr(center), ref radius);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindEdgeCircle(FloatImage image, Coord2D middle, int nrSamples, double minR, double maxR, double outlierDistance, int nrIterations, Coord2D center, ref double radius) {
    int ret = VisionLabPINVOKE.FindEdgeCircle__SWIG_5(FloatImage.getCPtr(image), Coord2D.getCPtr(middle), nrSamples, minR, maxR, outlierDistance, nrIterations, Coord2D.getCPtr(center), ref radius);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindEdgeCircle(DoubleImage image, Coord2D middle, int nrSamples, double minR, double maxR, double outlierDistance, int nrIterations, Coord2D center, ref double radius) {
    int ret = VisionLabPINVOKE.FindEdgeCircle__SWIG_6(DoubleImage.getCPtr(image), Coord2D.getCPtr(middle), nrSamples, minR, maxR, outlierDistance, nrIterations, Coord2D.getCPtr(center), ref radius);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindEdgeLine(ByteImage image, XYCoord middle, XYCoord endLine, XYCoord endBox, int lineDistance, double outlierDistance, int nrIterations, Line2D line) {
    int ret = VisionLabPINVOKE.FindEdgeLine__SWIG_1(ByteImage.getCPtr(image), XYCoord.getCPtr(middle), XYCoord.getCPtr(endLine), XYCoord.getCPtr(endBox), lineDistance, outlierDistance, nrIterations, Line2D.getCPtr(line));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindEdgeLine(Int8Image image, XYCoord middle, XYCoord endLine, XYCoord endBox, int lineDistance, double outlierDistance, int nrIterations, Line2D line) {
    int ret = VisionLabPINVOKE.FindEdgeLine__SWIG_2(Int8Image.getCPtr(image), XYCoord.getCPtr(middle), XYCoord.getCPtr(endLine), XYCoord.getCPtr(endBox), lineDistance, outlierDistance, nrIterations, Line2D.getCPtr(line));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindEdgeLine(Int16Image image, XYCoord middle, XYCoord endLine, XYCoord endBox, int lineDistance, double outlierDistance, int nrIterations, Line2D line) {
    int ret = VisionLabPINVOKE.FindEdgeLine__SWIG_3(Int16Image.getCPtr(image), XYCoord.getCPtr(middle), XYCoord.getCPtr(endLine), XYCoord.getCPtr(endBox), lineDistance, outlierDistance, nrIterations, Line2D.getCPtr(line));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindEdgeLine(Int32Image image, XYCoord middle, XYCoord endLine, XYCoord endBox, int lineDistance, double outlierDistance, int nrIterations, Line2D line) {
    int ret = VisionLabPINVOKE.FindEdgeLine__SWIG_4(Int32Image.getCPtr(image), XYCoord.getCPtr(middle), XYCoord.getCPtr(endLine), XYCoord.getCPtr(endBox), lineDistance, outlierDistance, nrIterations, Line2D.getCPtr(line));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindEdgeLine(FloatImage image, XYCoord middle, XYCoord endLine, XYCoord endBox, int lineDistance, double outlierDistance, int nrIterations, Line2D line) {
    int ret = VisionLabPINVOKE.FindEdgeLine__SWIG_5(FloatImage.getCPtr(image), XYCoord.getCPtr(middle), XYCoord.getCPtr(endLine), XYCoord.getCPtr(endBox), lineDistance, outlierDistance, nrIterations, Line2D.getCPtr(line));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindEdgeLine(DoubleImage image, XYCoord middle, XYCoord endLine, XYCoord endBox, int lineDistance, double outlierDistance, int nrIterations, Line2D line) {
    int ret = VisionLabPINVOKE.FindEdgeLine__SWIG_6(DoubleImage.getCPtr(image), XYCoord.getCPtr(middle), XYCoord.getCPtr(endLine), XYCoord.getCPtr(endBox), lineDistance, outlierDistance, nrIterations, Line2D.getCPtr(line));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindSubEdgeOnLine(ByteImage image, Coord2D start, Coord2D end, Coord2D edge) {
    bool ret = VisionLabPINVOKE.FindSubEdgeOnLine__SWIG_1(ByteImage.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), Coord2D.getCPtr(edge));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindSubEdgeOnLine(Int8Image image, Coord2D start, Coord2D end, Coord2D edge) {
    bool ret = VisionLabPINVOKE.FindSubEdgeOnLine__SWIG_2(Int8Image.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), Coord2D.getCPtr(edge));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindSubEdgeOnLine(Int16Image image, Coord2D start, Coord2D end, Coord2D edge) {
    bool ret = VisionLabPINVOKE.FindSubEdgeOnLine__SWIG_3(Int16Image.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), Coord2D.getCPtr(edge));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindSubEdgeOnLine(Int32Image image, Coord2D start, Coord2D end, Coord2D edge) {
    bool ret = VisionLabPINVOKE.FindSubEdgeOnLine__SWIG_4(Int32Image.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), Coord2D.getCPtr(edge));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindSubEdgeOnLine(FloatImage image, Coord2D start, Coord2D end, Coord2D edge) {
    bool ret = VisionLabPINVOKE.FindSubEdgeOnLine__SWIG_5(FloatImage.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), Coord2D.getCPtr(edge));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FindSubEdgeOnLine(DoubleImage image, Coord2D start, Coord2D end, Coord2D edge) {
    bool ret = VisionLabPINVOKE.FindSubEdgeOnLine__SWIG_6(DoubleImage.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), Coord2D.getCPtr(edge));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSubEdgesOnLine(ByteImage image, Coord2D start, Coord2D end, byte minEdge, vector_Coord2D edges) {
    int ret = VisionLabPINVOKE.FindSubEdgesOnLine__SWIG_1(ByteImage.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), minEdge, vector_Coord2D.getCPtr(edges));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSubEdgesOnLine(Int8Image image, Coord2D start, Coord2D end, char minEdge, vector_Coord2D edges) {
    int ret = VisionLabPINVOKE.FindSubEdgesOnLine__SWIG_2(Int8Image.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), minEdge, vector_Coord2D.getCPtr(edges));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSubEdgesOnLine(Int16Image image, Coord2D start, Coord2D end, short minEdge, vector_Coord2D edges) {
    int ret = VisionLabPINVOKE.FindSubEdgesOnLine__SWIG_3(Int16Image.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), minEdge, vector_Coord2D.getCPtr(edges));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSubEdgesOnLine(Int32Image image, Coord2D start, Coord2D end, int minEdge, vector_Coord2D edges) {
    int ret = VisionLabPINVOKE.FindSubEdgesOnLine__SWIG_4(Int32Image.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), minEdge, vector_Coord2D.getCPtr(edges));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSubEdgesOnLine(FloatImage image, Coord2D start, Coord2D end, float minEdge, vector_Coord2D edges) {
    int ret = VisionLabPINVOKE.FindSubEdgesOnLine__SWIG_5(FloatImage.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), minEdge, vector_Coord2D.getCPtr(edges));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindSubEdgesOnLine(DoubleImage image, Coord2D start, Coord2D end, double minEdge, vector_Coord2D edges) {
    int ret = VisionLabPINVOKE.FindSubEdgesOnLine__SWIG_6(DoubleImage.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), minEdge, vector_Coord2D.getCPtr(edges));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FindSubEdgesInScanLines(ByteImage image, vector_XYCoord startLineTab, vector_XYCoord endLineTab, vector_Coord2D xTab) {
    VisionLabPINVOKE.FindSubEdgesInScanLines__SWIG_1(ByteImage.getCPtr(image), vector_XYCoord.getCPtr(startLineTab), vector_XYCoord.getCPtr(endLineTab), vector_Coord2D.getCPtr(xTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindSubEdgesInScanLines(Int8Image image, vector_XYCoord startLineTab, vector_XYCoord endLineTab, vector_Coord2D xTab) {
    VisionLabPINVOKE.FindSubEdgesInScanLines__SWIG_2(Int8Image.getCPtr(image), vector_XYCoord.getCPtr(startLineTab), vector_XYCoord.getCPtr(endLineTab), vector_Coord2D.getCPtr(xTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindSubEdgesInScanLines(Int16Image image, vector_XYCoord startLineTab, vector_XYCoord endLineTab, vector_Coord2D xTab) {
    VisionLabPINVOKE.FindSubEdgesInScanLines__SWIG_3(Int16Image.getCPtr(image), vector_XYCoord.getCPtr(startLineTab), vector_XYCoord.getCPtr(endLineTab), vector_Coord2D.getCPtr(xTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindSubEdgesInScanLines(Int32Image image, vector_XYCoord startLineTab, vector_XYCoord endLineTab, vector_Coord2D xTab) {
    VisionLabPINVOKE.FindSubEdgesInScanLines__SWIG_4(Int32Image.getCPtr(image), vector_XYCoord.getCPtr(startLineTab), vector_XYCoord.getCPtr(endLineTab), vector_Coord2D.getCPtr(xTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindSubEdgesInScanLines(FloatImage image, vector_XYCoord startLineTab, vector_XYCoord endLineTab, vector_Coord2D xTab) {
    VisionLabPINVOKE.FindSubEdgesInScanLines__SWIG_5(FloatImage.getCPtr(image), vector_XYCoord.getCPtr(startLineTab), vector_XYCoord.getCPtr(endLineTab), vector_Coord2D.getCPtr(xTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindSubEdgesInScanLines(DoubleImage image, vector_XYCoord startLineTab, vector_XYCoord endLineTab, vector_Coord2D xTab) {
    VisionLabPINVOKE.FindSubEdgesInScanLines__SWIG_6(DoubleImage.getCPtr(image), vector_XYCoord.getCPtr(startLineTab), vector_XYCoord.getCPtr(endLineTab), vector_Coord2D.getCPtr(xTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale, byte minEdge) {
    VisionLabPINVOKE.FreiChen__SWIG_4(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale) {
    VisionLabPINVOKE.FreiChen__SWIG_5(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad) {
    VisionLabPINVOKE.FreiChen__SWIG_6(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(ByteImage src, ByteImage destMag, ByteImage destDir) {
    VisionLabPINVOKE.FreiChen__SWIG_7(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale, char minEdge) {
    VisionLabPINVOKE.FreiChen__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale) {
    VisionLabPINVOKE.FreiChen__SWIG_9(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad) {
    VisionLabPINVOKE.FreiChen__SWIG_10(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int8Image src, Int8Image destMag, Int8Image destDir) {
    VisionLabPINVOKE.FreiChen__SWIG_11(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale, short minEdge) {
    VisionLabPINVOKE.FreiChen__SWIG_12(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale) {
    VisionLabPINVOKE.FreiChen__SWIG_13(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad) {
    VisionLabPINVOKE.FreiChen__SWIG_14(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int16Image src, Int16Image destMag, Int16Image destDir) {
    VisionLabPINVOKE.FreiChen__SWIG_15(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale, int minEdge) {
    VisionLabPINVOKE.FreiChen__SWIG_16(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale) {
    VisionLabPINVOKE.FreiChen__SWIG_17(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad) {
    VisionLabPINVOKE.FreiChen__SWIG_18(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(Int32Image src, Int32Image destMag, Int32Image destDir) {
    VisionLabPINVOKE.FreiChen__SWIG_19(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale, float minEdge) {
    VisionLabPINVOKE.FreiChen__SWIG_20(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale) {
    VisionLabPINVOKE.FreiChen__SWIG_21(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad) {
    VisionLabPINVOKE.FreiChen__SWIG_22(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(FloatImage src, FloatImage destMag, FloatImage destDir) {
    VisionLabPINVOKE.FreiChen__SWIG_23(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale, double minEdge) {
    VisionLabPINVOKE.FreiChen__SWIG_24(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale) {
    VisionLabPINVOKE.FreiChen__SWIG_25(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad) {
    VisionLabPINVOKE.FreiChen__SWIG_26(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FreiChen(DoubleImage src, DoubleImage destMag, DoubleImage destDir) {
    VisionLabPINVOKE.FreiChen__SWIG_27(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale) {
    VisionLabPINVOKE.Kirsch__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad) {
    VisionLabPINVOKE.Kirsch__SWIG_4(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(ByteImage src, ByteImage destMag, ByteImage destDir) {
    VisionLabPINVOKE.Kirsch__SWIG_5(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale) {
    VisionLabPINVOKE.Kirsch__SWIG_6(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad) {
    VisionLabPINVOKE.Kirsch__SWIG_7(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(Int8Image src, Int8Image destMag, Int8Image destDir) {
    VisionLabPINVOKE.Kirsch__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale) {
    VisionLabPINVOKE.Kirsch__SWIG_9(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad) {
    VisionLabPINVOKE.Kirsch__SWIG_10(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(Int16Image src, Int16Image destMag, Int16Image destDir) {
    VisionLabPINVOKE.Kirsch__SWIG_11(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale) {
    VisionLabPINVOKE.Kirsch__SWIG_12(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad) {
    VisionLabPINVOKE.Kirsch__SWIG_13(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(Int32Image src, Int32Image destMag, Int32Image destDir) {
    VisionLabPINVOKE.Kirsch__SWIG_14(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale) {
    VisionLabPINVOKE.Kirsch__SWIG_15(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad) {
    VisionLabPINVOKE.Kirsch__SWIG_16(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(FloatImage src, FloatImage destMag, FloatImage destDir) {
    VisionLabPINVOKE.Kirsch__SWIG_17(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale) {
    VisionLabPINVOKE.Kirsch__SWIG_18(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad) {
    VisionLabPINVOKE.Kirsch__SWIG_19(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kirsch(DoubleImage src, DoubleImage destMag, DoubleImage destDir) {
    VisionLabPINVOKE.Kirsch__SWIG_20(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale, byte minEdge) {
    VisionLabPINVOKE.Prewitt__SWIG_4(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale) {
    VisionLabPINVOKE.Prewitt__SWIG_5(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad) {
    VisionLabPINVOKE.Prewitt__SWIG_6(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(ByteImage src, ByteImage destMag, ByteImage destDir) {
    VisionLabPINVOKE.Prewitt__SWIG_7(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale, char minEdge) {
    VisionLabPINVOKE.Prewitt__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale) {
    VisionLabPINVOKE.Prewitt__SWIG_9(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad) {
    VisionLabPINVOKE.Prewitt__SWIG_10(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int8Image src, Int8Image destMag, Int8Image destDir) {
    VisionLabPINVOKE.Prewitt__SWIG_11(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale, short minEdge) {
    VisionLabPINVOKE.Prewitt__SWIG_12(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale) {
    VisionLabPINVOKE.Prewitt__SWIG_13(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad) {
    VisionLabPINVOKE.Prewitt__SWIG_14(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int16Image src, Int16Image destMag, Int16Image destDir) {
    VisionLabPINVOKE.Prewitt__SWIG_15(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale, int minEdge) {
    VisionLabPINVOKE.Prewitt__SWIG_16(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale) {
    VisionLabPINVOKE.Prewitt__SWIG_17(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad) {
    VisionLabPINVOKE.Prewitt__SWIG_18(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(Int32Image src, Int32Image destMag, Int32Image destDir) {
    VisionLabPINVOKE.Prewitt__SWIG_19(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale, float minEdge) {
    VisionLabPINVOKE.Prewitt__SWIG_20(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale) {
    VisionLabPINVOKE.Prewitt__SWIG_21(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad) {
    VisionLabPINVOKE.Prewitt__SWIG_22(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(FloatImage src, FloatImage destMag, FloatImage destDir) {
    VisionLabPINVOKE.Prewitt__SWIG_23(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale, double minEdge) {
    VisionLabPINVOKE.Prewitt__SWIG_24(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale) {
    VisionLabPINVOKE.Prewitt__SWIG_25(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad) {
    VisionLabPINVOKE.Prewitt__SWIG_26(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Prewitt(DoubleImage src, DoubleImage destMag, DoubleImage destDir) {
    VisionLabPINVOKE.Prewitt__SWIG_27(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale, byte minEdge) {
    VisionLabPINVOKE.Roberts__SWIG_4(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale) {
    VisionLabPINVOKE.Roberts__SWIG_5(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad) {
    VisionLabPINVOKE.Roberts__SWIG_6(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(ByteImage src, ByteImage destMag, ByteImage destDir) {
    VisionLabPINVOKE.Roberts__SWIG_7(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale, char minEdge) {
    VisionLabPINVOKE.Roberts__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale) {
    VisionLabPINVOKE.Roberts__SWIG_9(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad) {
    VisionLabPINVOKE.Roberts__SWIG_10(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int8Image src, Int8Image destMag, Int8Image destDir) {
    VisionLabPINVOKE.Roberts__SWIG_11(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale, short minEdge) {
    VisionLabPINVOKE.Roberts__SWIG_12(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale) {
    VisionLabPINVOKE.Roberts__SWIG_13(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad) {
    VisionLabPINVOKE.Roberts__SWIG_14(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int16Image src, Int16Image destMag, Int16Image destDir) {
    VisionLabPINVOKE.Roberts__SWIG_15(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale, int minEdge) {
    VisionLabPINVOKE.Roberts__SWIG_16(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale) {
    VisionLabPINVOKE.Roberts__SWIG_17(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad) {
    VisionLabPINVOKE.Roberts__SWIG_18(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(Int32Image src, Int32Image destMag, Int32Image destDir) {
    VisionLabPINVOKE.Roberts__SWIG_19(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale, float minEdge) {
    VisionLabPINVOKE.Roberts__SWIG_20(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale) {
    VisionLabPINVOKE.Roberts__SWIG_21(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad) {
    VisionLabPINVOKE.Roberts__SWIG_22(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(FloatImage src, FloatImage destMag, FloatImage destDir) {
    VisionLabPINVOKE.Roberts__SWIG_23(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale, double minEdge) {
    VisionLabPINVOKE.Roberts__SWIG_24(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale) {
    VisionLabPINVOKE.Roberts__SWIG_25(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad) {
    VisionLabPINVOKE.Roberts__SWIG_26(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Roberts(DoubleImage src, DoubleImage destMag, DoubleImage destDir) {
    VisionLabPINVOKE.Roberts__SWIG_27(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale) {
    VisionLabPINVOKE.Robinson__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad) {
    VisionLabPINVOKE.Robinson__SWIG_4(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(ByteImage src, ByteImage destMag, ByteImage destDir) {
    VisionLabPINVOKE.Robinson__SWIG_5(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale) {
    VisionLabPINVOKE.Robinson__SWIG_6(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad) {
    VisionLabPINVOKE.Robinson__SWIG_7(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(Int8Image src, Int8Image destMag, Int8Image destDir) {
    VisionLabPINVOKE.Robinson__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale) {
    VisionLabPINVOKE.Robinson__SWIG_9(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad) {
    VisionLabPINVOKE.Robinson__SWIG_10(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(Int16Image src, Int16Image destMag, Int16Image destDir) {
    VisionLabPINVOKE.Robinson__SWIG_11(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale) {
    VisionLabPINVOKE.Robinson__SWIG_12(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad) {
    VisionLabPINVOKE.Robinson__SWIG_13(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(Int32Image src, Int32Image destMag, Int32Image destDir) {
    VisionLabPINVOKE.Robinson__SWIG_14(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale) {
    VisionLabPINVOKE.Robinson__SWIG_15(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad) {
    VisionLabPINVOKE.Robinson__SWIG_16(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(FloatImage src, FloatImage destMag, FloatImage destDir) {
    VisionLabPINVOKE.Robinson__SWIG_17(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale) {
    VisionLabPINVOKE.Robinson__SWIG_18(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad) {
    VisionLabPINVOKE.Robinson__SWIG_19(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Robinson(DoubleImage src, DoubleImage destMag, DoubleImage destDir) {
    VisionLabPINVOKE.Robinson__SWIG_20(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale, byte minEdge) {
    VisionLabPINVOKE.Scharr__SWIG_4(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale) {
    VisionLabPINVOKE.Scharr__SWIG_5(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad) {
    VisionLabPINVOKE.Scharr__SWIG_6(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(ByteImage src, ByteImage destMag, ByteImage destDir) {
    VisionLabPINVOKE.Scharr__SWIG_7(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale, char minEdge) {
    VisionLabPINVOKE.Scharr__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale) {
    VisionLabPINVOKE.Scharr__SWIG_9(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad) {
    VisionLabPINVOKE.Scharr__SWIG_10(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int8Image src, Int8Image destMag, Int8Image destDir) {
    VisionLabPINVOKE.Scharr__SWIG_11(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale, short minEdge) {
    VisionLabPINVOKE.Scharr__SWIG_12(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale) {
    VisionLabPINVOKE.Scharr__SWIG_13(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad) {
    VisionLabPINVOKE.Scharr__SWIG_14(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int16Image src, Int16Image destMag, Int16Image destDir) {
    VisionLabPINVOKE.Scharr__SWIG_15(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale, int minEdge) {
    VisionLabPINVOKE.Scharr__SWIG_16(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale) {
    VisionLabPINVOKE.Scharr__SWIG_17(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad) {
    VisionLabPINVOKE.Scharr__SWIG_18(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(Int32Image src, Int32Image destMag, Int32Image destDir) {
    VisionLabPINVOKE.Scharr__SWIG_19(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale, float minEdge) {
    VisionLabPINVOKE.Scharr__SWIG_20(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale) {
    VisionLabPINVOKE.Scharr__SWIG_21(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad) {
    VisionLabPINVOKE.Scharr__SWIG_22(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(FloatImage src, FloatImage destMag, FloatImage destDir) {
    VisionLabPINVOKE.Scharr__SWIG_23(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale, double minEdge) {
    VisionLabPINVOKE.Scharr__SWIG_24(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale) {
    VisionLabPINVOKE.Scharr__SWIG_25(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad) {
    VisionLabPINVOKE.Scharr__SWIG_26(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Scharr(DoubleImage src, DoubleImage destMag, DoubleImage destDir) {
    VisionLabPINVOKE.Scharr__SWIG_27(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale, byte minEdge) {
    VisionLabPINVOKE.Sobel__SWIG_4(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad, byte dirScale) {
    VisionLabPINVOKE.Sobel__SWIG_5(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(ByteImage src, ByteImage destMag, ByteImage destDir, Gradient grad) {
    VisionLabPINVOKE.Sobel__SWIG_6(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(ByteImage src, ByteImage destMag, ByteImage destDir) {
    VisionLabPINVOKE.Sobel__SWIG_7(ByteImage.getCPtr(src), ByteImage.getCPtr(destMag), ByteImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale, char minEdge) {
    VisionLabPINVOKE.Sobel__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad, char dirScale) {
    VisionLabPINVOKE.Sobel__SWIG_9(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int8Image src, Int8Image destMag, Int8Image destDir, Gradient grad) {
    VisionLabPINVOKE.Sobel__SWIG_10(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int8Image src, Int8Image destMag, Int8Image destDir) {
    VisionLabPINVOKE.Sobel__SWIG_11(Int8Image.getCPtr(src), Int8Image.getCPtr(destMag), Int8Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale, short minEdge) {
    VisionLabPINVOKE.Sobel__SWIG_12(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad, short dirScale) {
    VisionLabPINVOKE.Sobel__SWIG_13(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int16Image src, Int16Image destMag, Int16Image destDir, Gradient grad) {
    VisionLabPINVOKE.Sobel__SWIG_14(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int16Image src, Int16Image destMag, Int16Image destDir) {
    VisionLabPINVOKE.Sobel__SWIG_15(Int16Image.getCPtr(src), Int16Image.getCPtr(destMag), Int16Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale, int minEdge) {
    VisionLabPINVOKE.Sobel__SWIG_16(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad, int dirScale) {
    VisionLabPINVOKE.Sobel__SWIG_17(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int32Image src, Int32Image destMag, Int32Image destDir, Gradient grad) {
    VisionLabPINVOKE.Sobel__SWIG_18(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(Int32Image src, Int32Image destMag, Int32Image destDir) {
    VisionLabPINVOKE.Sobel__SWIG_19(Int32Image.getCPtr(src), Int32Image.getCPtr(destMag), Int32Image.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale, float minEdge) {
    VisionLabPINVOKE.Sobel__SWIG_20(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad, float dirScale) {
    VisionLabPINVOKE.Sobel__SWIG_21(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(FloatImage src, FloatImage destMag, FloatImage destDir, Gradient grad) {
    VisionLabPINVOKE.Sobel__SWIG_22(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(FloatImage src, FloatImage destMag, FloatImage destDir) {
    VisionLabPINVOKE.Sobel__SWIG_23(FloatImage.getCPtr(src), FloatImage.getCPtr(destMag), FloatImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale, double minEdge) {
    VisionLabPINVOKE.Sobel__SWIG_24(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad, double dirScale) {
    VisionLabPINVOKE.Sobel__SWIG_25(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad, dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(DoubleImage src, DoubleImage destMag, DoubleImage destDir, Gradient grad) {
    VisionLabPINVOKE.Sobel__SWIG_26(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir), (int)grad);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Sobel(DoubleImage src, DoubleImage destMag, DoubleImage destDir) {
    VisionLabPINVOKE.Sobel__SWIG_27(DoubleImage.getCPtr(src), DoubleImage.getCPtr(destMag), DoubleImage.getCPtr(destDir));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Canny(ByteImage src, ByteImage dest, double sigma, byte low, byte high, Connected connected) {
    VisionLabPINVOKE.Canny__SWIG_2(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), sigma, low, high, (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Canny(ByteImage src, ByteImage dest, double sigma, byte low, byte high) {
    VisionLabPINVOKE.Canny__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), sigma, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Canny(Int8Image src, Int8Image dest, double sigma, char low, char high, Connected connected) {
    VisionLabPINVOKE.Canny__SWIG_4(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), sigma, low, high, (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Canny(Int8Image src, Int8Image dest, double sigma, char low, char high) {
    VisionLabPINVOKE.Canny__SWIG_5(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), sigma, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Canny(Int16Image src, Int16Image dest, double sigma, short low, short high, Connected connected) {
    VisionLabPINVOKE.Canny__SWIG_6(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), sigma, low, high, (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Canny(Int16Image src, Int16Image dest, double sigma, short low, short high) {
    VisionLabPINVOKE.Canny__SWIG_7(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), sigma, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Canny(Int32Image src, Int32Image dest, double sigma, int low, int high, Connected connected) {
    VisionLabPINVOKE.Canny__SWIG_8(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), sigma, low, high, (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Canny(Int32Image src, Int32Image dest, double sigma, int low, int high) {
    VisionLabPINVOKE.Canny__SWIG_9(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), sigma, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MarrHildreth(ByteImage src, ByteImage dest, double sigmaGaussian, double sigmaLoG, byte minEdge) {
    VisionLabPINVOKE.MarrHildreth__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), sigmaGaussian, sigmaLoG, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MarrHildreth(Int8Image src, Int8Image dest, double sigmaGaussian, double sigmaLoG, char minEdge) {
    VisionLabPINVOKE.MarrHildreth__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), sigmaGaussian, sigmaLoG, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MarrHildreth(Int16Image src, Int16Image dest, double sigmaGaussian, double sigmaLoG, short minEdge) {
    VisionLabPINVOKE.MarrHildreth__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), sigmaGaussian, sigmaLoG, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MarrHildreth(Int32Image src, Int32Image dest, double sigmaGaussian, double sigmaLoG, int minEdge) {
    VisionLabPINVOKE.MarrHildreth__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), sigmaGaussian, sigmaLoG, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MarrHildreth(FloatImage src, FloatImage dest, double sigmaGaussian, double sigmaLoG, float minEdge) {
    VisionLabPINVOKE.MarrHildreth__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), sigmaGaussian, sigmaLoG, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MarrHildreth(DoubleImage src, DoubleImage dest, double sigmaGaussian, double sigmaLoG, double minEdge) {
    VisionLabPINVOKE.MarrHildreth__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), sigmaGaussian, sigmaLoG, minEdge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(ByteImage src, ByteImage dest, byte divideFactor, FixEdge edge, Mask_Byte mask) {
    VisionLabPINVOKE.Convolution__SWIG_10(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), divideFactor, (int)edge, Mask_Byte.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(Int8Image src, Int8Image dest, char divideFactor, FixEdge edge, Mask_Int8 mask) {
    VisionLabPINVOKE.Convolution__SWIG_11(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), divideFactor, (int)edge, Mask_Int8.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(Int16Image src, Int16Image dest, short divideFactor, FixEdge edge, Mask_Int16 mask) {
    VisionLabPINVOKE.Convolution__SWIG_12(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), divideFactor, (int)edge, Mask_Int16.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(Int32Image src, Int32Image dest, int divideFactor, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.Convolution__SWIG_13(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), divideFactor, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(FloatImage src, FloatImage dest, float divideFactor, FixEdge edge, Mask_Float mask) {
    VisionLabPINVOKE.Convolution__SWIG_14(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), divideFactor, (int)edge, Mask_Float.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(DoubleImage src, DoubleImage dest, double divideFactor, FixEdge edge, Mask_Double mask) {
    VisionLabPINVOKE.Convolution__SWIG_15(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), divideFactor, (int)edge, Mask_Double.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(ComplexFloatImage src, ComplexFloatImage dest, SWIGTYPE_p_std__complexT_float_t divideFactor, FixEdge edge, Mask_ComplexFloat mask) {
    VisionLabPINVOKE.Convolution__SWIG_16(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), SWIGTYPE_p_std__complexT_float_t.getCPtr(divideFactor), (int)edge, Mask_ComplexFloat.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(ComplexDoubleImage src, ComplexDoubleImage dest, SWIGTYPE_p_std__complexT_double_t divideFactor, FixEdge edge, Mask_ComplexDouble mask) {
    VisionLabPINVOKE.Convolution__SWIG_17(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), SWIGTYPE_p_std__complexT_double_t.getCPtr(divideFactor), (int)edge, Mask_ComplexDouble.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(RGB888Image src, RGB888Image dest, RGB888Pixel divideFactor, FixEdge edge, Mask_RGB8 mask) {
    VisionLabPINVOKE.Convolution__SWIG_18(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), RGB888Pixel.getCPtr(divideFactor), (int)edge, Mask_RGB8.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(RGB161616Image src, RGB161616Image dest, RGB161616Pixel divideFactor, FixEdge edge, Mask_RGB16 mask) {
    VisionLabPINVOKE.Convolution__SWIG_19(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), RGB161616Pixel.getCPtr(divideFactor), (int)edge, Mask_RGB16.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(HSV888Image src, HSV888Image dest, HSV888Pixel divideFactor, FixEdge edge, Mask_HSV8 mask) {
    VisionLabPINVOKE.Convolution__SWIG_20(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), HSV888Pixel.getCPtr(divideFactor), (int)edge, Mask_HSV8.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(HSV161616Image src, HSV161616Image dest, HSV161616Pixel divideFactor, FixEdge edge, Mask_HSV16 mask) {
    VisionLabPINVOKE.Convolution__SWIG_21(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), HSV161616Pixel.getCPtr(divideFactor), (int)edge, Mask_HSV16.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(YUV888Image src, YUV888Image dest, YUV888Pixel divideFactor, FixEdge edge, Mask_YUV8 mask) {
    VisionLabPINVOKE.Convolution__SWIG_22(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), YUV888Pixel.getCPtr(divideFactor), (int)edge, Mask_YUV8.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(YUV161616Image src, YUV161616Image dest, YUV161616Pixel divideFactor, FixEdge edge, Mask_YUV16 mask) {
    VisionLabPINVOKE.Convolution__SWIG_23(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), YUV161616Pixel.getCPtr(divideFactor), (int)edge, Mask_YUV16.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(ByteImage src, ByteImage dest, int divideFactor, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.Convolution__SWIG_24(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), divideFactor, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(Int8Image src, Int8Image dest, int divideFactor, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.Convolution__SWIG_25(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), divideFactor, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(Int16Image src, Int16Image dest, int divideFactor, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.Convolution__SWIG_26(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), divideFactor, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(FloatImage src, FloatImage dest, int divideFactor, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.Convolution__SWIG_27(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), divideFactor, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(DoubleImage src, DoubleImage dest, int divideFactor, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.Convolution__SWIG_28(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), divideFactor, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(ByteImage image, ByteImage mask) {
    VisionLabPINVOKE.Convolution__SWIG_29(ByteImage.getCPtr(image), ByteImage.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(Int8Image image, Int8Image mask) {
    VisionLabPINVOKE.Convolution__SWIG_30(Int8Image.getCPtr(image), Int8Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(Int16Image image, Int16Image mask) {
    VisionLabPINVOKE.Convolution__SWIG_31(Int16Image.getCPtr(image), Int16Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(Int32Image image, Int32Image mask) {
    VisionLabPINVOKE.Convolution__SWIG_32(Int32Image.getCPtr(image), Int32Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(FloatImage image, FloatImage mask) {
    VisionLabPINVOKE.Convolution__SWIG_33(FloatImage.getCPtr(image), FloatImage.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Convolution(DoubleImage image, DoubleImage mask) {
    VisionLabPINVOKE.Convolution__SWIG_34(DoubleImage.getCPtr(image), DoubleImage.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Correlation(ByteImage image, ByteImage mask) {
    VisionLabPINVOKE.Correlation__SWIG_1(ByteImage.getCPtr(image), ByteImage.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Correlation(Int8Image image, Int8Image mask) {
    VisionLabPINVOKE.Correlation__SWIG_2(Int8Image.getCPtr(image), Int8Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Correlation(Int16Image image, Int16Image mask) {
    VisionLabPINVOKE.Correlation__SWIG_3(Int16Image.getCPtr(image), Int16Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Correlation(Int32Image image, Int32Image mask) {
    VisionLabPINVOKE.Correlation__SWIG_4(Int32Image.getCPtr(image), Int32Image.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Correlation(FloatImage image, FloatImage mask) {
    VisionLabPINVOKE.Correlation__SWIG_5(FloatImage.getCPtr(image), FloatImage.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Correlation(DoubleImage image, DoubleImage mask) {
    VisionLabPINVOKE.Correlation__SWIG_6(DoubleImage.getCPtr(image), DoubleImage.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeConvolution(ByteImage image, ByteImage psf, double k) {
    VisionLabPINVOKE.DeConvolution__SWIG_1(ByteImage.getCPtr(image), ByteImage.getCPtr(psf), k);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeConvolution(Int8Image image, Int8Image psf, double k) {
    VisionLabPINVOKE.DeConvolution__SWIG_2(Int8Image.getCPtr(image), Int8Image.getCPtr(psf), k);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeConvolution(Int16Image image, Int16Image psf, double k) {
    VisionLabPINVOKE.DeConvolution__SWIG_3(Int16Image.getCPtr(image), Int16Image.getCPtr(psf), k);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeConvolution(Int32Image image, Int32Image psf, double k) {
    VisionLabPINVOKE.DeConvolution__SWIG_4(Int32Image.getCPtr(image), Int32Image.getCPtr(psf), k);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeConvolution(FloatImage image, FloatImage psf, double k) {
    VisionLabPINVOKE.DeConvolution__SWIG_5(FloatImage.getCPtr(image), FloatImage.getCPtr(psf), k);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeConvolution(DoubleImage image, DoubleImage psf, double k) {
    VisionLabPINVOKE.DeConvolution__SWIG_6(DoubleImage.getCPtr(image), DoubleImage.getCPtr(psf), k);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(ByteImage image, double sigmaLow, double sigmaHigh, int size) {
    VisionLabPINVOKE.DoGFilter__SWIG_2(ByteImage.getCPtr(image), sigmaLow, sigmaHigh, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(ByteImage image, double sigmaLow, double sigmaHigh) {
    VisionLabPINVOKE.DoGFilter__SWIG_3(ByteImage.getCPtr(image), sigmaLow, sigmaHigh);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(Int8Image image, double sigmaLow, double sigmaHigh, int size) {
    VisionLabPINVOKE.DoGFilter__SWIG_4(Int8Image.getCPtr(image), sigmaLow, sigmaHigh, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(Int8Image image, double sigmaLow, double sigmaHigh) {
    VisionLabPINVOKE.DoGFilter__SWIG_5(Int8Image.getCPtr(image), sigmaLow, sigmaHigh);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(Int16Image image, double sigmaLow, double sigmaHigh, int size) {
    VisionLabPINVOKE.DoGFilter__SWIG_6(Int16Image.getCPtr(image), sigmaLow, sigmaHigh, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(Int16Image image, double sigmaLow, double sigmaHigh) {
    VisionLabPINVOKE.DoGFilter__SWIG_7(Int16Image.getCPtr(image), sigmaLow, sigmaHigh);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(Int32Image image, double sigmaLow, double sigmaHigh, int size) {
    VisionLabPINVOKE.DoGFilter__SWIG_8(Int32Image.getCPtr(image), sigmaLow, sigmaHigh, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(Int32Image image, double sigmaLow, double sigmaHigh) {
    VisionLabPINVOKE.DoGFilter__SWIG_9(Int32Image.getCPtr(image), sigmaLow, sigmaHigh);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(FloatImage image, double sigmaLow, double sigmaHigh, int size) {
    VisionLabPINVOKE.DoGFilter__SWIG_10(FloatImage.getCPtr(image), sigmaLow, sigmaHigh, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(FloatImage image, double sigmaLow, double sigmaHigh) {
    VisionLabPINVOKE.DoGFilter__SWIG_11(FloatImage.getCPtr(image), sigmaLow, sigmaHigh);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(DoubleImage image, double sigmaLow, double sigmaHigh, int size) {
    VisionLabPINVOKE.DoGFilter__SWIG_12(DoubleImage.getCPtr(image), sigmaLow, sigmaHigh, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DoGFilter(DoubleImage image, double sigmaLow, double sigmaHigh) {
    VisionLabPINVOKE.DoGFilter__SWIG_13(DoubleImage.getCPtr(image), sigmaLow, sigmaHigh);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(ByteImage image, double sigma, int size) {
    VisionLabPINVOKE.GaussianFilter__SWIG_2(ByteImage.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(ByteImage image, double sigma) {
    VisionLabPINVOKE.GaussianFilter__SWIG_3(ByteImage.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(Int8Image image, double sigma, int size) {
    VisionLabPINVOKE.GaussianFilter__SWIG_4(Int8Image.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(Int8Image image, double sigma) {
    VisionLabPINVOKE.GaussianFilter__SWIG_5(Int8Image.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(Int16Image image, double sigma, int size) {
    VisionLabPINVOKE.GaussianFilter__SWIG_6(Int16Image.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(Int16Image image, double sigma) {
    VisionLabPINVOKE.GaussianFilter__SWIG_7(Int16Image.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(Int32Image image, double sigma, int size) {
    VisionLabPINVOKE.GaussianFilter__SWIG_8(Int32Image.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(Int32Image image, double sigma) {
    VisionLabPINVOKE.GaussianFilter__SWIG_9(Int32Image.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(FloatImage image, double sigma, int size) {
    VisionLabPINVOKE.GaussianFilter__SWIG_10(FloatImage.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(FloatImage image, double sigma) {
    VisionLabPINVOKE.GaussianFilter__SWIG_11(FloatImage.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(DoubleImage image, double sigma, int size) {
    VisionLabPINVOKE.GaussianFilter__SWIG_12(DoubleImage.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianFilter(DoubleImage image, double sigma) {
    VisionLabPINVOKE.GaussianFilter__SWIG_13(DoubleImage.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InterpolateAtSpecificPixel(ByteImage src, ByteImage dest, byte value) {
    VisionLabPINVOKE.InterpolateAtSpecificPixel__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InterpolateAtSpecificPixel(Int8Image src, Int8Image dest, char value) {
    VisionLabPINVOKE.InterpolateAtSpecificPixel__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InterpolateAtSpecificPixel(Int16Image src, Int16Image dest, short value) {
    VisionLabPINVOKE.InterpolateAtSpecificPixel__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InterpolateAtSpecificPixel(Int32Image src, Int32Image dest, int value) {
    VisionLabPINVOKE.InterpolateAtSpecificPixel__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InterpolateAtSpecificPixel(FloatImage src, FloatImage dest, float value) {
    VisionLabPINVOKE.InterpolateAtSpecificPixel__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InterpolateAtSpecificPixel(DoubleImage src, DoubleImage dest, double value) {
    VisionLabPINVOKE.InterpolateAtSpecificPixel__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void KuwaharaFilter(ByteImage src, ByteImage dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.KuwaharaFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void KuwaharaFilter(Int8Image src, Int8Image dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.KuwaharaFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void KuwaharaFilter(Int16Image src, Int16Image dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.KuwaharaFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void KuwaharaFilter(Int32Image src, Int32Image dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.KuwaharaFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void KuwaharaFilter(FloatImage src, FloatImage dest, float radius, FixEdge edge) {
    VisionLabPINVOKE.KuwaharaFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void KuwaharaFilter(DoubleImage src, DoubleImage dest, double radius, FixEdge edge) {
    VisionLabPINVOKE.KuwaharaFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMaxFilter(ByteImage src, ByteImage dest, byte backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMaxFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMaxFilter(Int8Image src, Int8Image dest, char backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMaxFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMaxFilter(Int16Image src, Int16Image dest, short backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMaxFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMaxFilter(Int32Image src, Int32Image dest, int backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMaxFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMaxFilter(FloatImage src, FloatImage dest, float backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMaxFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMaxFilter(DoubleImage src, DoubleImage dest, double backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMaxFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMinFilter(ByteImage src, ByteImage dest, byte backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMinFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMinFilter(Int8Image src, Int8Image dest, char backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMinFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMinFilter(Int16Image src, Int16Image dest, short backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMinFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMinFilter(Int32Image src, Int32Image dest, int backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMinFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMinFilter(FloatImage src, FloatImage dest, float backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMinFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LocalMinFilter(DoubleImage src, DoubleImage dest, double backGround, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.LocalMinFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), backGround, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(ByteImage image, double sigma, int size) {
    VisionLabPINVOKE.LoGFilter__SWIG_2(ByteImage.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(ByteImage image, double sigma) {
    VisionLabPINVOKE.LoGFilter__SWIG_3(ByteImage.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(Int8Image image, double sigma, int size) {
    VisionLabPINVOKE.LoGFilter__SWIG_4(Int8Image.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(Int8Image image, double sigma) {
    VisionLabPINVOKE.LoGFilter__SWIG_5(Int8Image.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(Int16Image image, double sigma, int size) {
    VisionLabPINVOKE.LoGFilter__SWIG_6(Int16Image.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(Int16Image image, double sigma) {
    VisionLabPINVOKE.LoGFilter__SWIG_7(Int16Image.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(Int32Image image, double sigma, int size) {
    VisionLabPINVOKE.LoGFilter__SWIG_8(Int32Image.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(Int32Image image, double sigma) {
    VisionLabPINVOKE.LoGFilter__SWIG_9(Int32Image.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(FloatImage image, double sigma, int size) {
    VisionLabPINVOKE.LoGFilter__SWIG_10(FloatImage.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(FloatImage image, double sigma) {
    VisionLabPINVOKE.LoGFilter__SWIG_11(FloatImage.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(DoubleImage image, double sigma, int size) {
    VisionLabPINVOKE.LoGFilter__SWIG_12(DoubleImage.getCPtr(image), sigma, size);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoGFilter(DoubleImage image, double sigma) {
    VisionLabPINVOKE.LoGFilter__SWIG_13(DoubleImage.getCPtr(image), sigma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MeanFilter(ByteImage src, ByteImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MeanFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MeanFilter(Int8Image src, Int8Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MeanFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MeanFilter(Int16Image src, Int16Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MeanFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MeanFilter(Int32Image src, Int32Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MeanFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MeanFilter(FloatImage src, FloatImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MeanFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MeanFilter(DoubleImage src, DoubleImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MeanFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MaximumFilter(ByteImage src, ByteImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MaximumFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MaximumFilter(Int8Image src, Int8Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MaximumFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MaximumFilter(Int16Image src, Int16Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MaximumFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MaximumFilter(Int32Image src, Int32Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MaximumFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MaximumFilter(FloatImage src, FloatImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MaximumFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MaximumFilter(DoubleImage src, DoubleImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MaximumFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MedianFilter(ByteImage src, ByteImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MedianFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MedianFilter(Int8Image src, Int8Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MedianFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MedianFilter(Int16Image src, Int16Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MedianFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MedianFilter(Int32Image src, Int32Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MedianFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MedianFilter(FloatImage src, FloatImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MedianFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MedianFilter(DoubleImage src, DoubleImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MedianFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinimumFilter(ByteImage src, ByteImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MinimumFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinimumFilter(Int8Image src, Int8Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MinimumFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinimumFilter(Int16Image src, Int16Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MinimumFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinimumFilter(Int32Image src, Int32Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MinimumFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinimumFilter(FloatImage src, FloatImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MinimumFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinimumFilter(DoubleImage src, DoubleImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.MinimumFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ModeFilter(ByteImage src, ByteImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.ModeFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ModeFilter(Int8Image src, Int8Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.ModeFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ModeFilter(Int16Image src, Int16Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.ModeFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ModeFilter(Int32Image src, Int32Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.ModeFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ModeFilter(FloatImage src, FloatImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.ModeFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ModeFilter(DoubleImage src, DoubleImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.ModeFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NonMaximumSuppression(ByteImage src, ByteImage dest, ByteImage direction, byte dirScale) {
    VisionLabPINVOKE.NonMaximumSuppression__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), ByteImage.getCPtr(direction), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NonMaximumSuppression(Int8Image src, Int8Image dest, Int8Image direction, char dirScale) {
    VisionLabPINVOKE.NonMaximumSuppression__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), Int8Image.getCPtr(direction), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NonMaximumSuppression(Int16Image src, Int16Image dest, Int16Image direction, short dirScale) {
    VisionLabPINVOKE.NonMaximumSuppression__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), Int16Image.getCPtr(direction), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NonMaximumSuppression(Int32Image src, Int32Image dest, Int32Image direction, int dirScale) {
    VisionLabPINVOKE.NonMaximumSuppression__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), Int32Image.getCPtr(direction), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NonMaximumSuppression(FloatImage src, FloatImage dest, FloatImage direction, float dirScale) {
    VisionLabPINVOKE.NonMaximumSuppression__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), FloatImage.getCPtr(direction), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NonMaximumSuppression(DoubleImage src, DoubleImage dest, DoubleImage direction, double dirScale) {
    VisionLabPINVOKE.NonMaximumSuppression__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), DoubleImage.getCPtr(direction), dirScale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NthFilter(ByteImage src, ByteImage dest, int nth, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.NthFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), nth, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NthFilter(Int8Image src, Int8Image dest, int nth, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.NthFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), nth, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NthFilter(Int16Image src, Int16Image dest, int nth, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.NthFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), nth, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NthFilter(Int32Image src, Int32Image dest, int nth, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.NthFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), nth, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NthFilter(FloatImage src, FloatImage dest, int nth, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.NthFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), nth, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NthFilter(DoubleImage src, DoubleImage dest, int nth, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.NthFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), nth, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RangeFilter(ByteImage src, ByteImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.RangeFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RangeFilter(Int8Image src, Int8Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.RangeFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RangeFilter(Int16Image src, Int16Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.RangeFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RangeFilter(Int32Image src, Int32Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.RangeFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RangeFilter(FloatImage src, FloatImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.RangeFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RangeFilter(DoubleImage src, DoubleImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.RangeFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SigmaFilter(ByteImage src, ByteImage dest, byte deviation, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.SigmaFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), deviation, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SigmaFilter(Int8Image src, Int8Image dest, char deviation, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.SigmaFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), deviation, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SigmaFilter(Int16Image src, Int16Image dest, short deviation, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.SigmaFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), deviation, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SigmaFilter(Int32Image src, Int32Image dest, int deviation, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.SigmaFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), deviation, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SigmaFilter(FloatImage src, FloatImage dest, float deviation, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.SigmaFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), deviation, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SigmaFilter(DoubleImage src, DoubleImage dest, double deviation, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.SigmaFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), deviation, (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MeanFilter(ByteImage src, ByteImage dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MeanFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MeanFilter(Int8Image src, Int8Image dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MeanFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MeanFilter(Int16Image src, Int16Image dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MeanFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MeanFilter(Int32Image src, Int32Image dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MeanFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MeanFilter(FloatImage src, FloatImage dest, float radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MeanFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MeanFilter(DoubleImage src, DoubleImage dest, double radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MeanFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MedianFilter(ByteImage src, ByteImage dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MedianFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MedianFilter(Int8Image src, Int8Image dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MedianFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MedianFilter(Int16Image src, Int16Image dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MedianFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MedianFilter(Int32Image src, Int32Image dest, int radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MedianFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MedianFilter(FloatImage src, FloatImage dest, float radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MedianFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SNN_MedianFilter(DoubleImage src, DoubleImage dest, double radius, FixEdge edge) {
    VisionLabPINVOKE.SNN_MedianFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), radius, (int)edge);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VarianceFilter(ByteImage src, ByteImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.VarianceFilter__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VarianceFilter(Int8Image src, Int8Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.VarianceFilter__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VarianceFilter(Int16Image src, Int16Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.VarianceFilter__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VarianceFilter(Int32Image src, Int32Image dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.VarianceFilter__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VarianceFilter(FloatImage src, FloatImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.VarianceFilter__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void VarianceFilter(DoubleImage src, DoubleImage dest, FixEdge edge, Mask_Int32 mask) {
    VisionLabPINVOKE.VarianceFilter__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)edge, Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(ByteImage src, ByteImage dest, Connected con) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_2(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)con);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(ByteImage src, ByteImage dest) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(Int8Image src, Int8Image dest, Connected con) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_4(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)con);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(Int8Image src, Int8Image dest) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_5(Int8Image.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(Int16Image src, Int16Image dest, Connected con) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_6(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)con);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(Int16Image src, Int16Image dest) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_7(Int16Image.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(Int32Image src, Int32Image dest, Connected con) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_8(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)con);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(Int32Image src, Int32Image dest) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_9(Int32Image.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(FloatImage src, FloatImage dest, Connected con) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_10(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)con);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(FloatImage src, FloatImage dest) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_11(FloatImage.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(DoubleImage src, DoubleImage dest, Connected con) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_12(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)con);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ZeroCrossings(DoubleImage src, DoubleImage dest) {
    VisionLabPINVOKE.ZeroCrossings__SWIG_13(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DFT1d(int N, SWIGTYPE_p_std__complexT_float_t tab, TransformDirection dir) {
    VisionLabPINVOKE.DFT1d__SWIG_1(N, SWIGTYPE_p_std__complexT_float_t.getCPtr(tab), (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DFT1d(int N, SWIGTYPE_p_std__complexT_double_t tab, TransformDirection dir) {
    VisionLabPINVOKE.DFT1d__SWIG_2(N, SWIGTYPE_p_std__complexT_double_t.getCPtr(tab), (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiscreteFourierT(ComplexFloatImage image, TransformDirection dir) {
    VisionLabPINVOKE.DiscreteFourierT__SWIG_1(ComplexFloatImage.getCPtr(image), (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiscreteFourierT(ComplexDoubleImage image, TransformDirection dir) {
    VisionLabPINVOKE.DiscreteFourierT__SWIG_2(ComplexDoubleImage.getCPtr(image), (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FFT1d(int N, SWIGTYPE_p_std__complexT_float_t tab, TransformDirection dir) {
    VisionLabPINVOKE.FFT1d__SWIG_1(N, SWIGTYPE_p_std__complexT_float_t.getCPtr(tab), (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FFT1d(int N, SWIGTYPE_p_std__complexT_double_t tab, TransformDirection dir) {
    VisionLabPINVOKE.FFT1d__SWIG_2(N, SWIGTYPE_p_std__complexT_double_t.getCPtr(tab), (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastFourierT(ComplexFloatImage image, TransformDirection dir) {
    VisionLabPINVOKE.FastFourierT__SWIG_1(ComplexFloatImage.getCPtr(image), (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastFourierT(ComplexDoubleImage image, TransformDirection dir) {
    VisionLabPINVOKE.FastFourierT__SWIG_2(ComplexDoubleImage.getCPtr(image), (int)dir);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HoughCircleT(ByteImage src, double minR, double maxR, double deltaR, vector_ByteImage destTab) {
    VisionLabPINVOKE.HoughCircleT__SWIG_1(ByteImage.getCPtr(src), minR, maxR, deltaR, vector_ByteImage.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HoughCircleT(Int8Image src, double minR, double maxR, double deltaR, vector_Int8Image destTab) {
    VisionLabPINVOKE.HoughCircleT__SWIG_2(Int8Image.getCPtr(src), minR, maxR, deltaR, vector_Int8Image.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HoughCircleT(Int16Image src, double minR, double maxR, double deltaR, vector_Int16Image destTab) {
    VisionLabPINVOKE.HoughCircleT__SWIG_3(Int16Image.getCPtr(src), minR, maxR, deltaR, vector_Int16Image.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HoughCircleT(Int32Image src, double minR, double maxR, double deltaR, vector_Int32Image destTab) {
    VisionLabPINVOKE.HoughCircleT__SWIG_4(Int32Image.getCPtr(src), minR, maxR, deltaR, vector_Int32Image.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HoughCircleT(FloatImage src, double minR, double maxR, double deltaR, vector_FloatImage destTab) {
    VisionLabPINVOKE.HoughCircleT__SWIG_5(FloatImage.getCPtr(src), minR, maxR, deltaR, vector_FloatImage.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HoughCircleT(DoubleImage src, double minR, double maxR, double deltaR, vector_DoubleImage destTab) {
    VisionLabPINVOKE.HoughCircleT__SWIG_6(DoubleImage.getCPtr(src), minR, maxR, deltaR, vector_DoubleImage.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughCircleT(ByteImage src, CircleBrightness brightness, byte edgeMin, double minR, double maxR, double deltaR, vector_ByteImage destTab) {
    VisionLabPINVOKE.FastHoughCircleT__SWIG_1(ByteImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, vector_ByteImage.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughCircleT(Int8Image src, CircleBrightness brightness, char edgeMin, double minR, double maxR, double deltaR, vector_Int8Image destTab) {
    VisionLabPINVOKE.FastHoughCircleT__SWIG_2(Int8Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, vector_Int8Image.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughCircleT(Int16Image src, CircleBrightness brightness, short edgeMin, double minR, double maxR, double deltaR, vector_Int16Image destTab) {
    VisionLabPINVOKE.FastHoughCircleT__SWIG_3(Int16Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, vector_Int16Image.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughCircleT(Int32Image src, CircleBrightness brightness, int edgeMin, double minR, double maxR, double deltaR, vector_Int32Image destTab) {
    VisionLabPINVOKE.FastHoughCircleT__SWIG_4(Int32Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, vector_Int32Image.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughCircleT(FloatImage src, CircleBrightness brightness, float edgeMin, double minR, double maxR, double deltaR, vector_FloatImage destTab) {
    VisionLabPINVOKE.FastHoughCircleT__SWIG_5(FloatImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, vector_FloatImage.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughCircleT(DoubleImage src, CircleBrightness brightness, double edgeMin, double minR, double maxR, double deltaR, vector_DoubleImage destTab) {
    VisionLabPINVOKE.FastHoughCircleT__SWIG_6(DoubleImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, vector_DoubleImage.getCPtr(destTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static HoughCircle HTBestCircle(vector_ByteImage srcTab, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.HTBestCircle__SWIG_1(vector_ByteImage.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle HTBestCircle(vector_Int8Image srcTab, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.HTBestCircle__SWIG_2(vector_Int8Image.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle HTBestCircle(vector_Int16Image srcTab, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.HTBestCircle__SWIG_3(vector_Int16Image.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle HTBestCircle(vector_Int32Image srcTab, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.HTBestCircle__SWIG_4(vector_Int32Image.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle HTBestCircle(vector_FloatImage srcTab, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.HTBestCircle__SWIG_5(vector_FloatImage.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle HTBestCircle(vector_DoubleImage srcTab, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.HTBestCircle__SWIG_6(vector_DoubleImage.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_ByteImage srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_4(vector_ByteImage.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_ByteImage srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_5(vector_ByteImage.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_ByteImage srcTab, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_6(vector_ByteImage.getCPtr(srcTab), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_ByteImage srcTab, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_7(vector_ByteImage.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int8Image srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_8(vector_Int8Image.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int8Image srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_9(vector_Int8Image.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int8Image srcTab, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_10(vector_Int8Image.getCPtr(srcTab), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int8Image srcTab, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_11(vector_Int8Image.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int16Image srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_12(vector_Int16Image.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int16Image srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_13(vector_Int16Image.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int16Image srcTab, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_14(vector_Int16Image.getCPtr(srcTab), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int16Image srcTab, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_15(vector_Int16Image.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int32Image srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_16(vector_Int32Image.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int32Image srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_17(vector_Int32Image.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int32Image srcTab, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_18(vector_Int32Image.getCPtr(srcTab), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_Int32Image srcTab, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_19(vector_Int32Image.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_FloatImage srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_20(vector_FloatImage.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_FloatImage srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_21(vector_FloatImage.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_FloatImage srcTab, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_22(vector_FloatImage.getCPtr(srcTab), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_FloatImage srcTab, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_23(vector_FloatImage.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_DoubleImage srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_24(vector_DoubleImage.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_DoubleImage srcTab, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_25(vector_DoubleImage.getCPtr(srcTab), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_DoubleImage srcTab, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_26(vector_DoubleImage.getCPtr(srcTab), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle HTBestCircles(vector_DoubleImage srcTab, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.HTBestCircles__SWIG_27(vector_DoubleImage.getCPtr(srcTab), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindBestCircle(ByteImage src, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindBestCircle__SWIG_1(ByteImage.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindBestCircle(Int8Image src, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindBestCircle__SWIG_2(Int8Image.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindBestCircle(Int16Image src, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindBestCircle__SWIG_3(Int16Image.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindBestCircle(Int32Image src, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindBestCircle__SWIG_4(Int32Image.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindBestCircle(FloatImage src, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindBestCircle__SWIG_5(FloatImage.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindBestCircle(DoubleImage src, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindBestCircle__SWIG_6(DoubleImage.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(ByteImage src, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_4(ByteImage.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(ByteImage src, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_5(ByteImage.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(ByteImage src, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_6(ByteImage.getCPtr(src), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(ByteImage src, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_7(ByteImage.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int8Image src, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_8(Int8Image.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int8Image src, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_9(Int8Image.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int8Image src, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_10(Int8Image.getCPtr(src), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int8Image src, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_11(Int8Image.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int16Image src, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_12(Int16Image.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int16Image src, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_13(Int16Image.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int16Image src, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_14(Int16Image.getCPtr(src), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int16Image src, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_15(Int16Image.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int32Image src, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_16(Int32Image.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int32Image src, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_17(Int32Image.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int32Image src, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_18(Int32Image.getCPtr(src), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(Int32Image src, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_19(Int32Image.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(FloatImage src, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_20(FloatImage.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(FloatImage src, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_21(FloatImage.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(FloatImage src, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_22(FloatImage.getCPtr(src), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(FloatImage src, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_23(FloatImage.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(DoubleImage src, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_24(DoubleImage.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(DoubleImage src, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_25(DoubleImage.getCPtr(src), minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(DoubleImage src, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_26(DoubleImage.getCPtr(src), minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindBestCircles(DoubleImage src, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindBestCircles__SWIG_27(DoubleImage.getCPtr(src), minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindFastBestCircle(ByteImage src, CircleBrightness brightness, byte edgeMin, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindFastBestCircle__SWIG_1(ByteImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindFastBestCircle(Int8Image src, CircleBrightness brightness, char edgeMin, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindFastBestCircle__SWIG_2(Int8Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindFastBestCircle(Int16Image src, CircleBrightness brightness, short edgeMin, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindFastBestCircle__SWIG_3(Int16Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindFastBestCircle(Int32Image src, CircleBrightness brightness, int edgeMin, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindFastBestCircle__SWIG_4(Int32Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindFastBestCircle(FloatImage src, CircleBrightness brightness, float edgeMin, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindFastBestCircle__SWIG_5(FloatImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughCircle FindFastBestCircle(DoubleImage src, CircleBrightness brightness, double edgeMin, double minR, double maxR, double deltaR) {
    HoughCircle ret = new HoughCircle(VisionLabPINVOKE.FindFastBestCircle__SWIG_6(DoubleImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(ByteImage src, CircleBrightness brightness, byte edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_4(ByteImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(ByteImage src, CircleBrightness brightness, byte edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_5(ByteImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(ByteImage src, CircleBrightness brightness, byte edgeMin, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_6(ByteImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(ByteImage src, CircleBrightness brightness, byte edgeMin, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_7(ByteImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int8Image src, CircleBrightness brightness, char edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_8(Int8Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int8Image src, CircleBrightness brightness, char edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_9(Int8Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int8Image src, CircleBrightness brightness, char edgeMin, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_10(Int8Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int8Image src, CircleBrightness brightness, char edgeMin, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_11(Int8Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int16Image src, CircleBrightness brightness, short edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_12(Int16Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int16Image src, CircleBrightness brightness, short edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_13(Int16Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int16Image src, CircleBrightness brightness, short edgeMin, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_14(Int16Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int16Image src, CircleBrightness brightness, short edgeMin, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_15(Int16Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int32Image src, CircleBrightness brightness, int edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_16(Int32Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int32Image src, CircleBrightness brightness, int edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_17(Int32Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int32Image src, CircleBrightness brightness, int edgeMin, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_18(Int32Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(Int32Image src, CircleBrightness brightness, int edgeMin, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_19(Int32Image.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(FloatImage src, CircleBrightness brightness, float edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_20(FloatImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(FloatImage src, CircleBrightness brightness, float edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_21(FloatImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(FloatImage src, CircleBrightness brightness, float edgeMin, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_22(FloatImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(FloatImage src, CircleBrightness brightness, float edgeMin, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_23(FloatImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(DoubleImage src, CircleBrightness brightness, double edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance, int minHits) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_24(DoubleImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(DoubleImage src, CircleBrightness brightness, double edgeMin, double minR, double maxR, double deltaR, int nrCircles, int minDistance) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_25(DoubleImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles, minDistance), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(DoubleImage src, CircleBrightness brightness, double edgeMin, double minR, double maxR, double deltaR, int nrCircles) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_26(DoubleImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR, nrCircles), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughCircle FindFastBestCircles(DoubleImage src, CircleBrightness brightness, double edgeMin, double minR, double maxR, double deltaR) {
    vector_HoughCircle ret = new vector_HoughCircle(VisionLabPINVOKE.FindFastBestCircles__SWIG_27(DoubleImage.getCPtr(src), (int)brightness, edgeMin, minR, maxR, deltaR), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void HoughLineT(ByteImage src, HLParams p, ByteImage dest) {
    VisionLabPINVOKE.HoughLineT__SWIG_1(ByteImage.getCPtr(src), HLParams.getCPtr(p), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HoughLineT(Int8Image src, HLParams p, Int8Image dest) {
    VisionLabPINVOKE.HoughLineT__SWIG_2(Int8Image.getCPtr(src), HLParams.getCPtr(p), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HoughLineT(Int16Image src, HLParams p, Int16Image dest) {
    VisionLabPINVOKE.HoughLineT__SWIG_3(Int16Image.getCPtr(src), HLParams.getCPtr(p), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HoughLineT(Int32Image src, HLParams p, Int32Image dest) {
    VisionLabPINVOKE.HoughLineT__SWIG_4(Int32Image.getCPtr(src), HLParams.getCPtr(p), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HoughLineT(FloatImage src, HLParams p, FloatImage dest) {
    VisionLabPINVOKE.HoughLineT__SWIG_5(FloatImage.getCPtr(src), HLParams.getCPtr(p), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HoughLineT(DoubleImage src, HLParams p, DoubleImage dest) {
    VisionLabPINVOKE.HoughLineT__SWIG_6(DoubleImage.getCPtr(src), HLParams.getCPtr(p), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughLineT(ByteImage src, HLParams p, byte edgeMin, ByteImage dest) {
    VisionLabPINVOKE.FastHoughLineT__SWIG_1(ByteImage.getCPtr(src), HLParams.getCPtr(p), edgeMin, ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughLineT(Int8Image src, HLParams p, char edgeMin, Int8Image dest) {
    VisionLabPINVOKE.FastHoughLineT__SWIG_2(Int8Image.getCPtr(src), HLParams.getCPtr(p), edgeMin, Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughLineT(Int16Image src, HLParams p, short edgeMin, Int16Image dest) {
    VisionLabPINVOKE.FastHoughLineT__SWIG_3(Int16Image.getCPtr(src), HLParams.getCPtr(p), edgeMin, Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughLineT(Int32Image src, HLParams p, int edgeMin, Int32Image dest) {
    VisionLabPINVOKE.FastHoughLineT__SWIG_4(Int32Image.getCPtr(src), HLParams.getCPtr(p), edgeMin, Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughLineT(FloatImage src, HLParams p, float edgeMin, FloatImage dest) {
    VisionLabPINVOKE.FastHoughLineT__SWIG_5(FloatImage.getCPtr(src), HLParams.getCPtr(p), edgeMin, FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FastHoughLineT(DoubleImage src, HLParams p, double edgeMin, DoubleImage dest) {
    VisionLabPINVOKE.FastHoughLineT__SWIG_6(DoubleImage.getCPtr(src), HLParams.getCPtr(p), edgeMin, DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static HoughLine HTBestLine(ByteImage src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.HTBestLine__SWIG_1(ByteImage.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine HTBestLine(Int8Image src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.HTBestLine__SWIG_2(Int8Image.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine HTBestLine(Int16Image src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.HTBestLine__SWIG_3(Int16Image.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine HTBestLine(Int32Image src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.HTBestLine__SWIG_4(Int32Image.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine HTBestLine(FloatImage src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.HTBestLine__SWIG_5(FloatImage.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine HTBestLine(DoubleImage src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.HTBestLine__SWIG_6(DoubleImage.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine HTBestLines(ByteImage src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.HTBestLines__SWIG_1(ByteImage.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine HTBestLines(Int8Image src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.HTBestLines__SWIG_2(Int8Image.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine HTBestLines(Int16Image src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.HTBestLines__SWIG_3(Int16Image.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine HTBestLines(Int32Image src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.HTBestLines__SWIG_4(Int32Image.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine HTBestLines(FloatImage src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.HTBestLines__SWIG_5(FloatImage.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine HTBestLines(DoubleImage src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.HTBestLines__SWIG_6(DoubleImage.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindBestLine(ByteImage src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindBestLine__SWIG_1(ByteImage.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindBestLine(Int8Image src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindBestLine__SWIG_2(Int8Image.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindBestLine(Int16Image src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindBestLine__SWIG_3(Int16Image.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindBestLine(Int32Image src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindBestLine__SWIG_4(Int32Image.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindBestLine(FloatImage src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindBestLine__SWIG_5(FloatImage.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindBestLine(DoubleImage src, HLParams p) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindBestLine__SWIG_6(DoubleImage.getCPtr(src), HLParams.getCPtr(p)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindBestLines(ByteImage src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindBestLines__SWIG_1(ByteImage.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindBestLines(Int8Image src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindBestLines__SWIG_2(Int8Image.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindBestLines(Int16Image src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindBestLines__SWIG_3(Int16Image.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindBestLines(Int32Image src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindBestLines__SWIG_4(Int32Image.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindBestLines(FloatImage src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindBestLines__SWIG_5(FloatImage.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindBestLines(DoubleImage src, HLParams p, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindBestLines__SWIG_6(DoubleImage.getCPtr(src), HLParams.getCPtr(p), nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindFastBestLine(ByteImage src, HLParams p, byte edgeMin) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindFastBestLine__SWIG_1(ByteImage.getCPtr(src), HLParams.getCPtr(p), edgeMin), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindFastBestLine(Int8Image src, HLParams p, char edgeMin) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindFastBestLine__SWIG_2(Int8Image.getCPtr(src), HLParams.getCPtr(p), edgeMin), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindFastBestLine(Int16Image src, HLParams p, short edgeMin) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindFastBestLine__SWIG_3(Int16Image.getCPtr(src), HLParams.getCPtr(p), edgeMin), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindFastBestLine(Int32Image src, HLParams p, int edgeMin) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindFastBestLine__SWIG_4(Int32Image.getCPtr(src), HLParams.getCPtr(p), edgeMin), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindFastBestLine(FloatImage src, HLParams p, float edgeMin) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindFastBestLine__SWIG_5(FloatImage.getCPtr(src), HLParams.getCPtr(p), edgeMin), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HoughLine FindFastBestLine(DoubleImage src, HLParams p, double edgeMin) {
    HoughLine ret = new HoughLine(VisionLabPINVOKE.FindFastBestLine__SWIG_6(DoubleImage.getCPtr(src), HLParams.getCPtr(p), edgeMin), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindFastBestLines(ByteImage src, HLParams p, byte edgeMin, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindFastBestLines__SWIG_1(ByteImage.getCPtr(src), HLParams.getCPtr(p), edgeMin, nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindFastBestLines(Int8Image src, HLParams p, char edgeMin, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindFastBestLines__SWIG_2(Int8Image.getCPtr(src), HLParams.getCPtr(p), edgeMin, nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindFastBestLines(Int16Image src, HLParams p, short edgeMin, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindFastBestLines__SWIG_3(Int16Image.getCPtr(src), HLParams.getCPtr(p), edgeMin, nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindFastBestLines(Int32Image src, HLParams p, int edgeMin, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindFastBestLines__SWIG_4(Int32Image.getCPtr(src), HLParams.getCPtr(p), edgeMin, nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindFastBestLines(FloatImage src, HLParams p, float edgeMin, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindFastBestLines__SWIG_5(FloatImage.getCPtr(src), HLParams.getCPtr(p), edgeMin, nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_HoughLine FindFastBestLines(DoubleImage src, HLParams p, double edgeMin, int nrLines, double minR, double minPhi, int minHits) {
    vector_HoughLine ret = new vector_HoughLine(VisionLabPINVOKE.FindFastBestLines__SWIG_6(DoubleImage.getCPtr(src), HLParams.getCPtr(p), edgeMin, nrLines, minR, minPhi, minHits), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Extract1Channel(RGB888Image image, RGBColor plane, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_43(RGB888Image.getCPtr(image), (int)plane, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, RGBColor plane, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_44(RGB161616Image.getCPtr(image), (int)plane, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, YUVColor plane, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_45(YUV888Image.getCPtr(image), (int)plane, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, YUVColor plane, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_46(YUV161616Image.getCPtr(image), (int)plane, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, HSVColor plane, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_47(HSV888Image.getCPtr(image), (int)plane, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, HSVColor plane, ByteImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_48(HSV161616Image.getCPtr(image), (int)plane, ByteImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB888Image image, RGBColor plane, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_49(RGB888Image.getCPtr(image), (int)plane, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, RGBColor plane, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_50(RGB161616Image.getCPtr(image), (int)plane, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, YUVColor plane, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_51(YUV888Image.getCPtr(image), (int)plane, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, YUVColor plane, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_52(YUV161616Image.getCPtr(image), (int)plane, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, HSVColor plane, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_53(HSV888Image.getCPtr(image), (int)plane, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, HSVColor plane, Int8Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_54(HSV161616Image.getCPtr(image), (int)plane, Int8Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB888Image image, RGBColor plane, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_55(RGB888Image.getCPtr(image), (int)plane, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, RGBColor plane, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_56(RGB161616Image.getCPtr(image), (int)plane, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, YUVColor plane, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_57(YUV888Image.getCPtr(image), (int)plane, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, YUVColor plane, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_58(YUV161616Image.getCPtr(image), (int)plane, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, HSVColor plane, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_59(HSV888Image.getCPtr(image), (int)plane, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, HSVColor plane, Int16Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_60(HSV161616Image.getCPtr(image), (int)plane, Int16Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB888Image image, RGBColor plane, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_61(RGB888Image.getCPtr(image), (int)plane, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, RGBColor plane, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_62(RGB161616Image.getCPtr(image), (int)plane, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, YUVColor plane, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_63(YUV888Image.getCPtr(image), (int)plane, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, YUVColor plane, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_64(YUV161616Image.getCPtr(image), (int)plane, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, HSVColor plane, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_65(HSV888Image.getCPtr(image), (int)plane, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, HSVColor plane, Int32Image chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_66(HSV161616Image.getCPtr(image), (int)plane, Int32Image.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB888Image image, RGBColor plane, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_67(RGB888Image.getCPtr(image), (int)plane, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, RGBColor plane, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_68(RGB161616Image.getCPtr(image), (int)plane, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, YUVColor plane, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_69(YUV888Image.getCPtr(image), (int)plane, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, YUVColor plane, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_70(YUV161616Image.getCPtr(image), (int)plane, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, HSVColor plane, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_71(HSV888Image.getCPtr(image), (int)plane, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, HSVColor plane, FloatImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_72(HSV161616Image.getCPtr(image), (int)plane, FloatImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB888Image image, RGBColor plane, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_73(RGB888Image.getCPtr(image), (int)plane, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(RGB161616Image image, RGBColor plane, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_74(RGB161616Image.getCPtr(image), (int)plane, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV888Image image, YUVColor plane, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_75(YUV888Image.getCPtr(image), (int)plane, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(YUV161616Image image, YUVColor plane, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_76(YUV161616Image.getCPtr(image), (int)plane, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV888Image image, HSVColor plane, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_77(HSV888Image.getCPtr(image), (int)plane, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Extract1Channel(HSV161616Image image, HSVColor plane, DoubleImage chan) {
    VisionLabPINVOKE.Extract1Channel__SWIG_78(HSV161616Image.getCPtr(image), (int)plane, DoubleImage.getCPtr(chan));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NormaliseHue(HSV888Image src, byte hue, byte minVal, byte minSat, DoubleImage dest, float notNormalised) {
    VisionLabPINVOKE.NormaliseHue__SWIG_2(HSV888Image.getCPtr(src), hue, minVal, minSat, DoubleImage.getCPtr(dest), notNormalised);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NormaliseHue(HSV888Image src, byte hue, byte minVal, byte minSat, DoubleImage dest) {
    VisionLabPINVOKE.NormaliseHue__SWIG_3(HSV888Image.getCPtr(src), hue, minVal, minSat, DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NormaliseHue(HSV161616Image src, short hue, short minVal, short minSat, DoubleImage dest, float notNormalised) {
    VisionLabPINVOKE.NormaliseHue__SWIG_4(HSV161616Image.getCPtr(src), hue, minVal, minSat, DoubleImage.getCPtr(dest), notNormalised);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NormaliseHue(HSV161616Image src, short hue, short minVal, short minSat, DoubleImage dest) {
    VisionLabPINVOKE.NormaliseHue__SWIG_5(HSV161616Image.getCPtr(src), hue, minVal, minSat, DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NormaliseHue(HSV888Image src, byte hue, byte minVal, byte minSat, FloatImage dest, float notNormalised) {
    VisionLabPINVOKE.NormaliseHue__SWIG_6(HSV888Image.getCPtr(src), hue, minVal, minSat, FloatImage.getCPtr(dest), notNormalised);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NormaliseHue(HSV888Image src, byte hue, byte minVal, byte minSat, FloatImage dest) {
    VisionLabPINVOKE.NormaliseHue__SWIG_7(HSV888Image.getCPtr(src), hue, minVal, minSat, FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NormaliseHue(HSV161616Image src, short hue, short minVal, short minSat, FloatImage dest, float notNormalised) {
    VisionLabPINVOKE.NormaliseHue__SWIG_8(HSV161616Image.getCPtr(src), hue, minVal, minSat, FloatImage.getCPtr(dest), notNormalised);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void NormaliseHue(HSV161616Image src, short hue, short minVal, short minSat, FloatImage dest) {
    VisionLabPINVOKE.NormaliseHue__SWIG_9(HSV161616Image.getCPtr(src), hue, minVal, minSat, FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Histogram CalcHistogram(ByteImage image, HistogramType t) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_4(ByteImage.getCPtr(image), (int)t), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(ByteImage image) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_5(ByteImage.getCPtr(image)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(ByteImage image, ByteImage roi, HistogramType t) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_6(ByteImage.getCPtr(image), ByteImage.getCPtr(roi), (int)t), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(ByteImage image, ByteImage roi) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_7(ByteImage.getCPtr(image), ByteImage.getCPtr(roi)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int8Image image, HistogramType t) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_8(Int8Image.getCPtr(image), (int)t), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int8Image image) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_9(Int8Image.getCPtr(image)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int8Image image, Int8Image roi, HistogramType t) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_10(Int8Image.getCPtr(image), Int8Image.getCPtr(roi), (int)t), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int8Image image, Int8Image roi) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_11(Int8Image.getCPtr(image), Int8Image.getCPtr(roi)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int16Image image, HistogramType t) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_12(Int16Image.getCPtr(image), (int)t), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int16Image image) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_13(Int16Image.getCPtr(image)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int16Image image, Int16Image roi, HistogramType t) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_14(Int16Image.getCPtr(image), Int16Image.getCPtr(roi), (int)t), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int16Image image, Int16Image roi) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_15(Int16Image.getCPtr(image), Int16Image.getCPtr(roi)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int32Image image, HistogramType t) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_16(Int32Image.getCPtr(image), (int)t), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int32Image image) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_17(Int32Image.getCPtr(image)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int32Image image, Int32Image roi, HistogramType t) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_18(Int32Image.getCPtr(image), Int32Image.getCPtr(roi), (int)t), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Histogram CalcHistogram(Int32Image image, Int32Image roi) {
    Histogram ret = new Histogram(VisionLabPINVOKE.CalcHistogram__SWIG_19(Int32Image.getCPtr(image), Int32Image.getCPtr(roi)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void CalcHistogram0(ByteImage image, int hisSize, SWIGTYPE_p_int his) {
    VisionLabPINVOKE.CalcHistogram0__SWIG_1(ByteImage.getCPtr(image), hisSize, SWIGTYPE_p_int.getCPtr(his));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CalcHistogram0(Int8Image image, int hisSize, SWIGTYPE_p_int his) {
    VisionLabPINVOKE.CalcHistogram0__SWIG_2(Int8Image.getCPtr(image), hisSize, SWIGTYPE_p_int.getCPtr(his));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CalcHistogram0(Int16Image image, int hisSize, SWIGTYPE_p_int his) {
    VisionLabPINVOKE.CalcHistogram0__SWIG_3(Int16Image.getCPtr(image), hisSize, SWIGTYPE_p_int.getCPtr(his));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CalcHistogram0(Int32Image image, int hisSize, SWIGTYPE_p_int his) {
    VisionLabPINVOKE.CalcHistogram0__SWIG_4(Int32Image.getCPtr(image), hisSize, SWIGTYPE_p_int.getCPtr(his));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT(ByteImage image, byte low, byte high) {
    VisionLabPINVOKE.ContrastStretchLUT__SWIG_1(ByteImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT(Int8Image image, char low, char high) {
    VisionLabPINVOKE.ContrastStretchLUT__SWIG_2(Int8Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT(Int16Image image, short low, short high) {
    VisionLabPINVOKE.ContrastStretchLUT__SWIG_3(Int16Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretchLUT(Int32Image image, int low, int high) {
    VisionLabPINVOKE.ContrastStretchLUT__SWIG_4(Int32Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GammaLUT(ByteImage image, double gamma) {
    VisionLabPINVOKE.GammaLUT__SWIG_1(ByteImage.getCPtr(image), gamma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GammaLUT(Int8Image image, double gamma) {
    VisionLabPINVOKE.GammaLUT__SWIG_2(Int8Image.getCPtr(image), gamma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GammaLUT(Int16Image image, double gamma) {
    VisionLabPINVOKE.GammaLUT__SWIG_3(Int16Image.getCPtr(image), gamma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GammaLUT(Int32Image image, double gamma) {
    VisionLabPINVOKE.GammaLUT__SWIG_4(Int32Image.getCPtr(image), gamma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HistogramEqualize(ByteImage image) {
    VisionLabPINVOKE.HistogramEqualize__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HistogramEqualize(Int8Image image) {
    VisionLabPINVOKE.HistogramEqualize__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HistogramEqualize(Int16Image image) {
    VisionLabPINVOKE.HistogramEqualize__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void HistogramEqualize(Int32Image image) {
    VisionLabPINVOKE.HistogramEqualize__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InvertLUT(ByteImage image) {
    VisionLabPINVOKE.InvertLUT__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InvertLUT(Int8Image image) {
    VisionLabPINVOKE.InvertLUT__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InvertLUT(Int16Image image) {
    VisionLabPINVOKE.InvertLUT__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void InvertLUT(Int32Image image) {
    VisionLabPINVOKE.InvertLUT__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LUT(ByteImage image, byte minPixel, SWIGTYPE_p_unsigned_char tab) {
    VisionLabPINVOKE.LUT__SWIG_2(ByteImage.getCPtr(image), minPixel, SWIGTYPE_p_unsigned_char.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LUT(ByteImage image, byte minPixel, vector_uchar tab) {
    VisionLabPINVOKE.LUT__SWIG_3(ByteImage.getCPtr(image), minPixel, vector_uchar.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LUT(Int8Image image, char minPixel, string tab) {
    VisionLabPINVOKE.LUT__SWIG_4(Int8Image.getCPtr(image), minPixel, tab);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LUT(Int8Image image, char minPixel, vector_char tab) {
    VisionLabPINVOKE.LUT__SWIG_5(Int8Image.getCPtr(image), minPixel, vector_char.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LUT(Int16Image image, short minPixel, SWIGTYPE_p_short tab) {
    VisionLabPINVOKE.LUT__SWIG_6(Int16Image.getCPtr(image), minPixel, SWIGTYPE_p_short.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LUT(Int16Image image, short minPixel, vector_short tab) {
    VisionLabPINVOKE.LUT__SWIG_7(Int16Image.getCPtr(image), minPixel, vector_short.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LUT(Int32Image image, int minPixel, SWIGTYPE_p_int tab) {
    VisionLabPINVOKE.LUT__SWIG_8(Int32Image.getCPtr(image), minPixel, SWIGTYPE_p_int.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LUT(Int32Image image, int minPixel, vector_int tab) {
    VisionLabPINVOKE.LUT__SWIG_9(Int32Image.getCPtr(image), minPixel, vector_int.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Not(ByteImage image) {
    VisionLabPINVOKE.Not__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Not(Int8Image image) {
    VisionLabPINVOKE.Not__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Not(Int16Image image) {
    VisionLabPINVOKE.Not__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Not(Int32Image image) {
    VisionLabPINVOKE.Not__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Remainder(ByteImage dest, ByteImage src) {
    VisionLabPINVOKE.Remainder__SWIG_1(ByteImage.getCPtr(dest), ByteImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Remainder(Int8Image dest, Int8Image src) {
    VisionLabPINVOKE.Remainder__SWIG_2(Int8Image.getCPtr(dest), Int8Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Remainder(Int16Image dest, Int16Image src) {
    VisionLabPINVOKE.Remainder__SWIG_3(Int16Image.getCPtr(dest), Int16Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Remainder(Int32Image dest, Int32Image src) {
    VisionLabPINVOKE.Remainder__SWIG_4(Int32Image.getCPtr(dest), Int32Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetMultiToValueLUT(ByteImage image, SWIGTYPE_p_std__setT_unsigned_char_t selectSet, byte value) {
    VisionLabPINVOKE.SetMultiToValueLUT__SWIG_1(ByteImage.getCPtr(image), SWIGTYPE_p_std__setT_unsigned_char_t.getCPtr(selectSet), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetMultiToValueLUT(Int8Image image, SWIGTYPE_p_std__setT_char_t selectSet, char value) {
    VisionLabPINVOKE.SetMultiToValueLUT__SWIG_2(Int8Image.getCPtr(image), SWIGTYPE_p_std__setT_char_t.getCPtr(selectSet), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetMultiToValueLUT(Int16Image image, SWIGTYPE_p_std__setT_short_t selectSet, short value) {
    VisionLabPINVOKE.SetMultiToValueLUT__SWIG_3(Int16Image.getCPtr(image), SWIGTYPE_p_std__setT_short_t.getCPtr(selectSet), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetMultiToValueLUT(Int32Image image, SWIGTYPE_p_std__setT_int_t selectSet, int value) {
    VisionLabPINVOKE.SetMultiToValueLUT__SWIG_4(Int32Image.getCPtr(image), SWIGTYPE_p_std__setT_int_t.getCPtr(selectSet), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetToZeros(ByteImage image) {
    VisionLabPINVOKE.SetToZeros__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetToZeros(Int8Image image) {
    VisionLabPINVOKE.SetToZeros__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetToZeros(Int16Image image) {
    VisionLabPINVOKE.SetToZeros__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetToZeros(Int32Image image) {
    VisionLabPINVOKE.SetToZeros__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int SumIntPixels(ByteImage image) {
    int ret = VisionLabPINVOKE.SumIntPixels__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SumIntPixels(Int8Image image) {
    int ret = VisionLabPINVOKE.SumIntPixels__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SumIntPixels(Int16Image image) {
    int ret = VisionLabPINVOKE.SumIntPixels__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SumIntPixels(Int32Image image) {
    int ret = VisionLabPINVOKE.SumIntPixels__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SwapAxis(ByteImage src, ByteImage dest, ViewPoint viewPoint, int scale) {
    VisionLabPINVOKE.SwapAxis__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)viewPoint, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapAxis(Int8Image src, Int8Image dest, ViewPoint viewPoint, int scale) {
    VisionLabPINVOKE.SwapAxis__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)viewPoint, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapAxis(Int16Image src, Int16Image dest, ViewPoint viewPoint, int scale) {
    VisionLabPINVOKE.SwapAxis__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)viewPoint, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapAxis(Int32Image src, Int32Image dest, ViewPoint viewPoint, int scale) {
    VisionLabPINVOKE.SwapAxis__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)viewPoint, scale);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(ByteImage image, byte thres, ObjectBrightness arg2, byte min, byte max) {
    VisionLabPINVOKE.ThresholdFast__SWIG_6(ByteImage.getCPtr(image), thres, (int)arg2, min, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(ByteImage image, byte thres, ObjectBrightness arg2, byte min) {
    VisionLabPINVOKE.ThresholdFast__SWIG_7(ByteImage.getCPtr(image), thres, (int)arg2, min);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(ByteImage image, byte thres, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdFast__SWIG_8(ByteImage.getCPtr(image), thres, (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(ByteImage image, byte low, byte high, byte min, byte max) {
    VisionLabPINVOKE.ThresholdFast__SWIG_9(ByteImage.getCPtr(image), low, high, min, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(ByteImage image, byte low, byte high, byte min) {
    VisionLabPINVOKE.ThresholdFast__SWIG_10(ByteImage.getCPtr(image), low, high, min);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(ByteImage image, byte low, byte high) {
    VisionLabPINVOKE.ThresholdFast__SWIG_11(ByteImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int8Image image, char thres, ObjectBrightness arg2, char min, char max) {
    VisionLabPINVOKE.ThresholdFast__SWIG_12(Int8Image.getCPtr(image), thres, (int)arg2, min, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int8Image image, char thres, ObjectBrightness arg2, char min) {
    VisionLabPINVOKE.ThresholdFast__SWIG_13(Int8Image.getCPtr(image), thres, (int)arg2, min);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int8Image image, char thres, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdFast__SWIG_14(Int8Image.getCPtr(image), thres, (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int8Image image, char low, char high, char min, char max) {
    VisionLabPINVOKE.ThresholdFast__SWIG_15(Int8Image.getCPtr(image), low, high, min, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int8Image image, char low, char high, char min) {
    VisionLabPINVOKE.ThresholdFast__SWIG_16(Int8Image.getCPtr(image), low, high, min);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int8Image image, char low, char high) {
    VisionLabPINVOKE.ThresholdFast__SWIG_17(Int8Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int16Image image, short thres, ObjectBrightness arg2, short min, short max) {
    VisionLabPINVOKE.ThresholdFast__SWIG_18(Int16Image.getCPtr(image), thres, (int)arg2, min, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int16Image image, short thres, ObjectBrightness arg2, short min) {
    VisionLabPINVOKE.ThresholdFast__SWIG_19(Int16Image.getCPtr(image), thres, (int)arg2, min);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int16Image image, short thres, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdFast__SWIG_20(Int16Image.getCPtr(image), thres, (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int16Image image, short low, short high, short min, short max) {
    VisionLabPINVOKE.ThresholdFast__SWIG_21(Int16Image.getCPtr(image), low, high, min, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int16Image image, short low, short high, short min) {
    VisionLabPINVOKE.ThresholdFast__SWIG_22(Int16Image.getCPtr(image), low, high, min);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int16Image image, short low, short high) {
    VisionLabPINVOKE.ThresholdFast__SWIG_23(Int16Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int32Image image, int thres, ObjectBrightness arg2, int min, int max) {
    VisionLabPINVOKE.ThresholdFast__SWIG_24(Int32Image.getCPtr(image), thres, (int)arg2, min, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int32Image image, int thres, ObjectBrightness arg2, int min) {
    VisionLabPINVOKE.ThresholdFast__SWIG_25(Int32Image.getCPtr(image), thres, (int)arg2, min);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int32Image image, int thres, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdFast__SWIG_26(Int32Image.getCPtr(image), thres, (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int32Image image, int low, int high, int min, int max) {
    VisionLabPINVOKE.ThresholdFast__SWIG_27(Int32Image.getCPtr(image), low, high, min, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int32Image image, int low, int high, int min) {
    VisionLabPINVOKE.ThresholdFast__SWIG_28(Int32Image.getCPtr(image), low, high, min);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdFast(Int32Image image, int low, int high) {
    VisionLabPINVOKE.ThresholdFast__SWIG_29(Int32Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdHysteresis(ByteImage image, byte low, byte high, Connected connected) {
    VisionLabPINVOKE.ThresholdHysteresis__SWIG_1(ByteImage.getCPtr(image), low, high, (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdHysteresis(Int8Image image, char low, char high, Connected connected) {
    VisionLabPINVOKE.ThresholdHysteresis__SWIG_2(Int8Image.getCPtr(image), low, high, (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdHysteresis(Int16Image image, short low, short high, Connected connected) {
    VisionLabPINVOKE.ThresholdHysteresis__SWIG_3(Int16Image.getCPtr(image), low, high, (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdHysteresis(Int32Image image, int low, int high, Connected connected) {
    VisionLabPINVOKE.ThresholdHysteresis__SWIG_4(Int32Image.getCPtr(image), low, high, (int)connected);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ThresholdIsoData(ByteImage image, ObjectBrightness arg1) {
    int ret = VisionLabPINVOKE.ThresholdIsoData__SWIG_2(ByteImage.getCPtr(image), (int)arg1);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ThresholdIsoData(ByteImage image, ByteImage roi, ObjectBrightness arg2) {
    int ret = VisionLabPINVOKE.ThresholdIsoData__SWIG_3(ByteImage.getCPtr(image), ByteImage.getCPtr(roi), (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ThresholdIsoData(Int8Image image, ObjectBrightness arg1) {
    int ret = VisionLabPINVOKE.ThresholdIsoData__SWIG_4(Int8Image.getCPtr(image), (int)arg1);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ThresholdIsoData(Int8Image image, Int8Image roi, ObjectBrightness arg2) {
    int ret = VisionLabPINVOKE.ThresholdIsoData__SWIG_5(Int8Image.getCPtr(image), Int8Image.getCPtr(roi), (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ThresholdIsoData(Int16Image image, ObjectBrightness arg1) {
    int ret = VisionLabPINVOKE.ThresholdIsoData__SWIG_6(Int16Image.getCPtr(image), (int)arg1);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ThresholdIsoData(Int16Image image, Int16Image roi, ObjectBrightness arg2) {
    int ret = VisionLabPINVOKE.ThresholdIsoData__SWIG_7(Int16Image.getCPtr(image), Int16Image.getCPtr(roi), (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ThresholdIsoData(Int32Image image, ObjectBrightness arg1) {
    int ret = VisionLabPINVOKE.ThresholdIsoData__SWIG_8(Int32Image.getCPtr(image), (int)arg1);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ThresholdIsoData(Int32Image image, Int32Image roi, ObjectBrightness arg2) {
    int ret = VisionLabPINVOKE.ThresholdIsoData__SWIG_9(Int32Image.getCPtr(image), Int32Image.getCPtr(roi), (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ThresholdMulti(ByteImage image, SWIGTYPE_p_std__setT_unsigned_char_t selectSet) {
    VisionLabPINVOKE.ThresholdMulti__SWIG_1(ByteImage.getCPtr(image), SWIGTYPE_p_std__setT_unsigned_char_t.getCPtr(selectSet));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdMulti(Int8Image image, SWIGTYPE_p_std__setT_char_t selectSet) {
    VisionLabPINVOKE.ThresholdMulti__SWIG_2(Int8Image.getCPtr(image), SWIGTYPE_p_std__setT_char_t.getCPtr(selectSet));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdMulti(Int16Image image, SWIGTYPE_p_std__setT_short_t selectSet) {
    VisionLabPINVOKE.ThresholdMulti__SWIG_3(Int16Image.getCPtr(image), SWIGTYPE_p_std__setT_short_t.getCPtr(selectSet));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdMulti(Int32Image image, SWIGTYPE_p_std__setT_int_t selectSet) {
    VisionLabPINVOKE.ThresholdMulti__SWIG_4(Int32Image.getCPtr(image), SWIGTYPE_p_std__setT_int_t.getCPtr(selectSet));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Watershed(Int16Image src, Int16Image dest, short first, short last, short coreLimit, int minArea) {
    VisionLabPINVOKE.Watershed__SWIG_2(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), first, last, coreLimit, minArea);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Watershed(Int16Image src, Int16Image dest, short first, short last, short coreLimit) {
    VisionLabPINVOKE.Watershed__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), first, last, coreLimit);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Watershed(Int32Image src, Int32Image dest, int first, int last, int coreLimit, int minArea) {
    VisionLabPINVOKE.Watershed__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), first, last, coreLimit, minArea);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Watershed(Int32Image src, Int32Image dest, int first, int last, int coreLimit) {
    VisionLabPINVOKE.Watershed__SWIG_5(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), first, last, coreLimit);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string MaskToStr(Mask_Byte mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_1(Mask_Byte.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_Int8 mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_2(Mask_Int8.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_Int16 mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_3(Mask_Int16.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_Int32 mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_4(Mask_Int32.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_Float mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_5(Mask_Float.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_Double mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_6(Mask_Double.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_ComplexFloat mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_7(Mask_ComplexFloat.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_ComplexDouble mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_8(Mask_ComplexDouble.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_RGB8 mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_9(Mask_RGB8.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_RGB16 mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_10(Mask_RGB16.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_YUV8 mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_11(Mask_YUV8.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_YUV16 mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_12(Mask_YUV16.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_HSV8 mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_13(Mask_HSV8.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MaskToStr(Mask_HSV16 mask) {
    string ret = VisionLabPINVOKE.MaskToStr__SWIG_14(Mask_HSV16.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_Byte StrToMask_Byte(string str) {
    Mask_Byte ret = new Mask_Byte(VisionLabPINVOKE.StrToMask_Byte(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_Int8 StrToMask_Int8(string str) {
    Mask_Int8 ret = new Mask_Int8(VisionLabPINVOKE.StrToMask_Int8(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_Int16 StrToMask_Int16(string str) {
    Mask_Int16 ret = new Mask_Int16(VisionLabPINVOKE.StrToMask_Int16(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_Int32 StrToMask_Int32(string str) {
    Mask_Int32 ret = new Mask_Int32(VisionLabPINVOKE.StrToMask_Int32(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_Float StrToMask_Float(string str) {
    Mask_Float ret = new Mask_Float(VisionLabPINVOKE.StrToMask_Float(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_Double StrToMask_Double(string str) {
    Mask_Double ret = new Mask_Double(VisionLabPINVOKE.StrToMask_Double(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_ComplexFloat StrToMask_ComplexFloat(string str) {
    Mask_ComplexFloat ret = new Mask_ComplexFloat(VisionLabPINVOKE.StrToMask_ComplexFloat(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_ComplexDouble StrToMask_ComplexDouble(string str) {
    Mask_ComplexDouble ret = new Mask_ComplexDouble(VisionLabPINVOKE.StrToMask_ComplexDouble(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_RGB8 StrToMask_RGB8(string str) {
    Mask_RGB8 ret = new Mask_RGB8(VisionLabPINVOKE.StrToMask_RGB8(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_RGB16 StrToMask_RGB16(string str) {
    Mask_RGB16 ret = new Mask_RGB16(VisionLabPINVOKE.StrToMask_RGB16(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_YUV8 StrToMask_YUV8(string str) {
    Mask_YUV8 ret = new Mask_YUV8(VisionLabPINVOKE.StrToMask_YUV8(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_YUV16 StrToMask_YUV16(string str) {
    Mask_YUV16 ret = new Mask_YUV16(VisionLabPINVOKE.StrToMask_YUV16(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_HSV8 StrToMask_HSV8(string str) {
    Mask_HSV8 ret = new Mask_HSV8(VisionLabPINVOKE.StrToMask_HSV8(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Mask_HSV16 StrToMask_HSV16(string str) {
    Mask_HSV16 ret = new Mask_HSV16(VisionLabPINVOKE.StrToMask_HSV16(str), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void AddBorder(ByteImage src, ByteImage dest, int top, int left, int right, int bottom, byte value) {
    VisionLabPINVOKE.AddBorder__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), top, left, right, bottom, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(Int8Image src, Int8Image dest, int top, int left, int right, int bottom, char value) {
    VisionLabPINVOKE.AddBorder__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), top, left, right, bottom, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(Int16Image src, Int16Image dest, int top, int left, int right, int bottom, short value) {
    VisionLabPINVOKE.AddBorder__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), top, left, right, bottom, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(Int32Image src, Int32Image dest, int top, int left, int right, int bottom, int value) {
    VisionLabPINVOKE.AddBorder__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), top, left, right, bottom, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(FloatImage src, FloatImage dest, int top, int left, int right, int bottom, float value) {
    VisionLabPINVOKE.AddBorder__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), top, left, right, bottom, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(DoubleImage src, DoubleImage dest, int top, int left, int right, int bottom, double value) {
    VisionLabPINVOKE.AddBorder__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), top, left, right, bottom, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(RGB888Image src, RGB888Image dest, int top, int left, int right, int bottom, RGB888Pixel value) {
    VisionLabPINVOKE.AddBorder__SWIG_7(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), top, left, right, bottom, RGB888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(RGB161616Image src, RGB161616Image dest, int top, int left, int right, int bottom, RGB161616Pixel value) {
    VisionLabPINVOKE.AddBorder__SWIG_8(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), top, left, right, bottom, RGB161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(HSV888Image src, HSV888Image dest, int top, int left, int right, int bottom, HSV888Pixel value) {
    VisionLabPINVOKE.AddBorder__SWIG_9(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), top, left, right, bottom, HSV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(HSV161616Image src, HSV161616Image dest, int top, int left, int right, int bottom, HSV161616Pixel value) {
    VisionLabPINVOKE.AddBorder__SWIG_10(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), top, left, right, bottom, HSV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(YUV888Image src, YUV888Image dest, int top, int left, int right, int bottom, YUV888Pixel value) {
    VisionLabPINVOKE.AddBorder__SWIG_11(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), top, left, right, bottom, YUV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(YUV161616Image src, YUV161616Image dest, int top, int left, int right, int bottom, YUV161616Pixel value) {
    VisionLabPINVOKE.AddBorder__SWIG_12(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), top, left, right, bottom, YUV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(ComplexFloatImage src, ComplexFloatImage dest, int top, int left, int right, int bottom, SWIGTYPE_p_std__complexT_float_t value) {
    VisionLabPINVOKE.AddBorder__SWIG_13(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), top, left, right, bottom, SWIGTYPE_p_std__complexT_float_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBorder(ComplexDoubleImage src, ComplexDoubleImage dest, int top, int left, int right, int bottom, SWIGTYPE_p_std__complexT_double_t value) {
    VisionLabPINVOKE.AddBorder__SWIG_14(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), top, left, right, bottom, SWIGTYPE_p_std__complexT_double_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(ByteImage image, XYCoord leftTop, int height, int width, byte value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_2(ByteImage.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(ByteImage image, XYCoord leftTop, int height, int width, byte value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_3(ByteImage.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(Int8Image image, XYCoord leftTop, int height, int width, char value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_4(Int8Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(Int8Image image, XYCoord leftTop, int height, int width, char value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_5(Int8Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(Int16Image image, XYCoord leftTop, int height, int width, short value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_6(Int16Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(Int16Image image, XYCoord leftTop, int height, int width, short value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_7(Int16Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(Int32Image image, XYCoord leftTop, int height, int width, int value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_8(Int32Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(Int32Image image, XYCoord leftTop, int height, int width, int value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_9(Int32Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(FloatImage image, XYCoord leftTop, int height, int width, float value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_10(FloatImage.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(FloatImage image, XYCoord leftTop, int height, int width, float value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_11(FloatImage.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(DoubleImage image, XYCoord leftTop, int height, int width, double value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_12(DoubleImage.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(DoubleImage image, XYCoord leftTop, int height, int width, double value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_13(DoubleImage.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(RGB888Image image, XYCoord leftTop, int height, int width, RGB888Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_14(RGB888Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, RGB888Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(RGB888Image image, XYCoord leftTop, int height, int width, RGB888Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_15(RGB888Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, RGB888Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(RGB161616Image image, XYCoord leftTop, int height, int width, RGB161616Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_16(RGB161616Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, RGB161616Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(RGB161616Image image, XYCoord leftTop, int height, int width, RGB161616Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_17(RGB161616Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, RGB161616Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(HSV888Image image, XYCoord leftTop, int height, int width, HSV888Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_18(HSV888Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, HSV888Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(HSV888Image image, XYCoord leftTop, int height, int width, HSV888Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_19(HSV888Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, HSV888Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(HSV161616Image image, XYCoord leftTop, int height, int width, HSV161616Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_20(HSV161616Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, HSV161616Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(HSV161616Image image, XYCoord leftTop, int height, int width, HSV161616Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_21(HSV161616Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, HSV161616Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(YUV888Image image, XYCoord leftTop, int height, int width, YUV888Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_22(YUV888Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, YUV888Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(YUV888Image image, XYCoord leftTop, int height, int width, YUV888Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_23(YUV888Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, YUV888Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(YUV161616Image image, XYCoord leftTop, int height, int width, YUV161616Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_24(YUV161616Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, YUV161616Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(YUV161616Image image, XYCoord leftTop, int height, int width, YUV161616Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_25(YUV161616Image.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, YUV161616Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(ComplexFloatImage image, XYCoord leftTop, int height, int width, SWIGTYPE_p_std__complexT_float_t value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_26(ComplexFloatImage.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, SWIGTYPE_p_std__complexT_float_t.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(ComplexFloatImage image, XYCoord leftTop, int height, int width, SWIGTYPE_p_std__complexT_float_t value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_27(ComplexFloatImage.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, SWIGTYPE_p_std__complexT_float_t.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(ComplexDoubleImage image, XYCoord leftTop, int height, int width, SWIGTYPE_p_std__complexT_double_t value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.BlockPattern__SWIG_28(ComplexDoubleImage.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, SWIGTYPE_p_std__complexT_double_t.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void BlockPattern(ComplexDoubleImage image, XYCoord leftTop, int height, int width, SWIGTYPE_p_std__complexT_double_t value, int repeatx, int repeaty) {
    VisionLabPINVOKE.BlockPattern__SWIG_29(ComplexDoubleImage.getCPtr(image), XYCoord.getCPtr(leftTop), height, width, SWIGTYPE_p_std__complexT_double_t.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(ByteImage image, XYCoord centre, int r, byte value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_2(ByteImage.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(ByteImage image, XYCoord centre, int r, byte value) {
    VisionLabPINVOKE.CircleShape__SWIG_3(ByteImage.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(Int8Image image, XYCoord centre, int r, char value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_4(Int8Image.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(Int8Image image, XYCoord centre, int r, char value) {
    VisionLabPINVOKE.CircleShape__SWIG_5(Int8Image.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(Int16Image image, XYCoord centre, int r, short value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_6(Int16Image.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(Int16Image image, XYCoord centre, int r, short value) {
    VisionLabPINVOKE.CircleShape__SWIG_7(Int16Image.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(Int32Image image, XYCoord centre, int r, int value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_8(Int32Image.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(Int32Image image, XYCoord centre, int r, int value) {
    VisionLabPINVOKE.CircleShape__SWIG_9(Int32Image.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(FloatImage image, XYCoord centre, int r, float value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_10(FloatImage.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(FloatImage image, XYCoord centre, int r, float value) {
    VisionLabPINVOKE.CircleShape__SWIG_11(FloatImage.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(DoubleImage image, XYCoord centre, int r, double value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_12(DoubleImage.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(DoubleImage image, XYCoord centre, int r, double value) {
    VisionLabPINVOKE.CircleShape__SWIG_13(DoubleImage.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(RGB888Image image, XYCoord centre, int r, RGB888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_14(RGB888Image.getCPtr(image), XYCoord.getCPtr(centre), r, RGB888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(RGB888Image image, XYCoord centre, int r, RGB888Pixel value) {
    VisionLabPINVOKE.CircleShape__SWIG_15(RGB888Image.getCPtr(image), XYCoord.getCPtr(centre), r, RGB888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(RGB161616Image image, XYCoord centre, int r, RGB161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_16(RGB161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, RGB161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(RGB161616Image image, XYCoord centre, int r, RGB161616Pixel value) {
    VisionLabPINVOKE.CircleShape__SWIG_17(RGB161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, RGB161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(HSV888Image image, XYCoord centre, int r, HSV888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_18(HSV888Image.getCPtr(image), XYCoord.getCPtr(centre), r, HSV888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(HSV888Image image, XYCoord centre, int r, HSV888Pixel value) {
    VisionLabPINVOKE.CircleShape__SWIG_19(HSV888Image.getCPtr(image), XYCoord.getCPtr(centre), r, HSV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(HSV161616Image image, XYCoord centre, int r, HSV161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_20(HSV161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, HSV161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(HSV161616Image image, XYCoord centre, int r, HSV161616Pixel value) {
    VisionLabPINVOKE.CircleShape__SWIG_21(HSV161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, HSV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(YUV888Image image, XYCoord centre, int r, YUV888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_22(YUV888Image.getCPtr(image), XYCoord.getCPtr(centre), r, YUV888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(YUV888Image image, XYCoord centre, int r, YUV888Pixel value) {
    VisionLabPINVOKE.CircleShape__SWIG_23(YUV888Image.getCPtr(image), XYCoord.getCPtr(centre), r, YUV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(YUV161616Image image, XYCoord centre, int r, YUV161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_24(YUV161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, YUV161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(YUV161616Image image, XYCoord centre, int r, YUV161616Pixel value) {
    VisionLabPINVOKE.CircleShape__SWIG_25(YUV161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, YUV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(ComplexFloatImage image, XYCoord centre, int r, SWIGTYPE_p_std__complexT_float_t value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_26(ComplexFloatImage.getCPtr(image), XYCoord.getCPtr(centre), r, SWIGTYPE_p_std__complexT_float_t.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(ComplexFloatImage image, XYCoord centre, int r, SWIGTYPE_p_std__complexT_float_t value) {
    VisionLabPINVOKE.CircleShape__SWIG_27(ComplexFloatImage.getCPtr(image), XYCoord.getCPtr(centre), r, SWIGTYPE_p_std__complexT_float_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(ComplexDoubleImage image, XYCoord centre, int r, SWIGTYPE_p_std__complexT_double_t value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.CircleShape__SWIG_28(ComplexDoubleImage.getCPtr(image), XYCoord.getCPtr(centre), r, SWIGTYPE_p_std__complexT_double_t.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CircleShape(ComplexDoubleImage image, XYCoord centre, int r, SWIGTYPE_p_std__complexT_double_t value) {
    VisionLabPINVOKE.CircleShape__SWIG_29(ComplexDoubleImage.getCPtr(image), XYCoord.getCPtr(centre), r, SWIGTYPE_p_std__complexT_double_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int CountPixel(ByteImage image, byte value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_1(ByteImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(Int8Image image, char value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_2(Int8Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(Int16Image image, short value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_3(Int16Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(Int32Image image, int value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_4(Int32Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(FloatImage image, float value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_5(FloatImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(DoubleImage image, double value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_6(DoubleImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(RGB888Image image, RGB888Pixel value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_7(RGB888Image.getCPtr(image), RGB888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(RGB161616Image image, RGB161616Pixel value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_8(RGB161616Image.getCPtr(image), RGB161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(HSV888Image image, HSV888Pixel value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_9(HSV888Image.getCPtr(image), HSV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(HSV161616Image image, HSV161616Pixel value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_10(HSV161616Image.getCPtr(image), HSV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(YUV888Image image, YUV888Pixel value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_11(YUV888Image.getCPtr(image), YUV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(YUV161616Image image, YUV161616Pixel value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_12(YUV161616Image.getCPtr(image), YUV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(ComplexFloatImage image, SWIGTYPE_p_std__complexT_float_t value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_13(ComplexFloatImage.getCPtr(image), SWIGTYPE_p_std__complexT_float_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixel(ComplexDoubleImage image, SWIGTYPE_p_std__complexT_double_t value) {
    int ret = VisionLabPINVOKE.CountPixel__SWIG_14(ComplexDoubleImage.getCPtr(image), SWIGTYPE_p_std__complexT_double_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void DeInterlace(ByteImage image) {
    VisionLabPINVOKE.DeInterlace__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(Int8Image image) {
    VisionLabPINVOKE.DeInterlace__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(Int16Image image) {
    VisionLabPINVOKE.DeInterlace__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(Int32Image image) {
    VisionLabPINVOKE.DeInterlace__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(FloatImage image) {
    VisionLabPINVOKE.DeInterlace__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(DoubleImage image) {
    VisionLabPINVOKE.DeInterlace__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(RGB888Image image) {
    VisionLabPINVOKE.DeInterlace__SWIG_7(RGB888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(RGB161616Image image) {
    VisionLabPINVOKE.DeInterlace__SWIG_8(RGB161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(HSV888Image image) {
    VisionLabPINVOKE.DeInterlace__SWIG_9(HSV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(HSV161616Image image) {
    VisionLabPINVOKE.DeInterlace__SWIG_10(HSV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(YUV888Image image) {
    VisionLabPINVOKE.DeInterlace__SWIG_11(YUV888Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(YUV161616Image image) {
    VisionLabPINVOKE.DeInterlace__SWIG_12(YUV161616Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(ComplexFloatImage image) {
    VisionLabPINVOKE.DeInterlace__SWIG_13(ComplexFloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeInterlace(ComplexDoubleImage image) {
    VisionLabPINVOKE.DeInterlace__SWIG_14(ComplexDoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(ByteImage image, XYCoord centre, double r, byte value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_2(ByteImage.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(ByteImage image, XYCoord centre, double r, byte value) {
    VisionLabPINVOKE.DiskShape__SWIG_3(ByteImage.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(Int8Image image, XYCoord centre, double r, char value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_4(Int8Image.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(Int8Image image, XYCoord centre, double r, char value) {
    VisionLabPINVOKE.DiskShape__SWIG_5(Int8Image.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(Int16Image image, XYCoord centre, double r, short value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_6(Int16Image.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(Int16Image image, XYCoord centre, double r, short value) {
    VisionLabPINVOKE.DiskShape__SWIG_7(Int16Image.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(Int32Image image, XYCoord centre, double r, int value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_8(Int32Image.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(Int32Image image, XYCoord centre, double r, int value) {
    VisionLabPINVOKE.DiskShape__SWIG_9(Int32Image.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(FloatImage image, XYCoord centre, double r, float value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_10(FloatImage.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(FloatImage image, XYCoord centre, double r, float value) {
    VisionLabPINVOKE.DiskShape__SWIG_11(FloatImage.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(DoubleImage image, XYCoord centre, double r, double value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_12(DoubleImage.getCPtr(image), XYCoord.getCPtr(centre), r, value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(DoubleImage image, XYCoord centre, double r, double value) {
    VisionLabPINVOKE.DiskShape__SWIG_13(DoubleImage.getCPtr(image), XYCoord.getCPtr(centre), r, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(RGB888Image image, XYCoord centre, double r, RGB888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_14(RGB888Image.getCPtr(image), XYCoord.getCPtr(centre), r, RGB888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(RGB888Image image, XYCoord centre, double r, RGB888Pixel value) {
    VisionLabPINVOKE.DiskShape__SWIG_15(RGB888Image.getCPtr(image), XYCoord.getCPtr(centre), r, RGB888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(RGB161616Image image, XYCoord centre, double r, RGB161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_16(RGB161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, RGB161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(RGB161616Image image, XYCoord centre, double r, RGB161616Pixel value) {
    VisionLabPINVOKE.DiskShape__SWIG_17(RGB161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, RGB161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(HSV888Image image, XYCoord centre, double r, HSV888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_18(HSV888Image.getCPtr(image), XYCoord.getCPtr(centre), r, HSV888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(HSV888Image image, XYCoord centre, double r, HSV888Pixel value) {
    VisionLabPINVOKE.DiskShape__SWIG_19(HSV888Image.getCPtr(image), XYCoord.getCPtr(centre), r, HSV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(HSV161616Image image, XYCoord centre, double r, HSV161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_20(HSV161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, HSV161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(HSV161616Image image, XYCoord centre, double r, HSV161616Pixel value) {
    VisionLabPINVOKE.DiskShape__SWIG_21(HSV161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, HSV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(YUV888Image image, XYCoord centre, double r, YUV888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_22(YUV888Image.getCPtr(image), XYCoord.getCPtr(centre), r, YUV888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(YUV888Image image, XYCoord centre, double r, YUV888Pixel value) {
    VisionLabPINVOKE.DiskShape__SWIG_23(YUV888Image.getCPtr(image), XYCoord.getCPtr(centre), r, YUV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(YUV161616Image image, XYCoord centre, double r, YUV161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_24(YUV161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, YUV161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(YUV161616Image image, XYCoord centre, double r, YUV161616Pixel value) {
    VisionLabPINVOKE.DiskShape__SWIG_25(YUV161616Image.getCPtr(image), XYCoord.getCPtr(centre), r, YUV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(ComplexFloatImage image, XYCoord centre, double r, SWIGTYPE_p_std__complexT_float_t value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_26(ComplexFloatImage.getCPtr(image), XYCoord.getCPtr(centre), r, SWIGTYPE_p_std__complexT_float_t.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(ComplexFloatImage image, XYCoord centre, double r, SWIGTYPE_p_std__complexT_float_t value) {
    VisionLabPINVOKE.DiskShape__SWIG_27(ComplexFloatImage.getCPtr(image), XYCoord.getCPtr(centre), r, SWIGTYPE_p_std__complexT_float_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(ComplexDoubleImage image, XYCoord centre, double r, SWIGTYPE_p_std__complexT_double_t value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DiskShape__SWIG_28(ComplexDoubleImage.getCPtr(image), XYCoord.getCPtr(centre), r, SWIGTYPE_p_std__complexT_double_t.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiskShape(ComplexDoubleImage image, XYCoord centre, double r, SWIGTYPE_p_std__complexT_double_t value) {
    VisionLabPINVOKE.DiskShape__SWIG_29(ComplexDoubleImage.getCPtr(image), XYCoord.getCPtr(centre), r, SWIGTYPE_p_std__complexT_double_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(ByteImage image, vector_LineXY tab, byte value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_2(ByteImage.getCPtr(image), vector_LineXY.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(ByteImage image, vector_LineXY tab, byte value) {
    VisionLabPINVOKE.DrawLines__SWIG_3(ByteImage.getCPtr(image), vector_LineXY.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(Int8Image image, vector_LineXY tab, char value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_4(Int8Image.getCPtr(image), vector_LineXY.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(Int8Image image, vector_LineXY tab, char value) {
    VisionLabPINVOKE.DrawLines__SWIG_5(Int8Image.getCPtr(image), vector_LineXY.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(Int16Image image, vector_LineXY tab, short value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_6(Int16Image.getCPtr(image), vector_LineXY.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(Int16Image image, vector_LineXY tab, short value) {
    VisionLabPINVOKE.DrawLines__SWIG_7(Int16Image.getCPtr(image), vector_LineXY.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(Int32Image image, vector_LineXY tab, int value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_8(Int32Image.getCPtr(image), vector_LineXY.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(Int32Image image, vector_LineXY tab, int value) {
    VisionLabPINVOKE.DrawLines__SWIG_9(Int32Image.getCPtr(image), vector_LineXY.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(FloatImage image, vector_LineXY tab, float value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_10(FloatImage.getCPtr(image), vector_LineXY.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(FloatImage image, vector_LineXY tab, float value) {
    VisionLabPINVOKE.DrawLines__SWIG_11(FloatImage.getCPtr(image), vector_LineXY.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(DoubleImage image, vector_LineXY tab, double value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_12(DoubleImage.getCPtr(image), vector_LineXY.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(DoubleImage image, vector_LineXY tab, double value) {
    VisionLabPINVOKE.DrawLines__SWIG_13(DoubleImage.getCPtr(image), vector_LineXY.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(RGB888Image image, vector_LineXY tab, RGB888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_14(RGB888Image.getCPtr(image), vector_LineXY.getCPtr(tab), RGB888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(RGB888Image image, vector_LineXY tab, RGB888Pixel value) {
    VisionLabPINVOKE.DrawLines__SWIG_15(RGB888Image.getCPtr(image), vector_LineXY.getCPtr(tab), RGB888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(RGB161616Image image, vector_LineXY tab, RGB161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_16(RGB161616Image.getCPtr(image), vector_LineXY.getCPtr(tab), RGB161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(RGB161616Image image, vector_LineXY tab, RGB161616Pixel value) {
    VisionLabPINVOKE.DrawLines__SWIG_17(RGB161616Image.getCPtr(image), vector_LineXY.getCPtr(tab), RGB161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(HSV888Image image, vector_LineXY tab, HSV888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_18(HSV888Image.getCPtr(image), vector_LineXY.getCPtr(tab), HSV888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(HSV888Image image, vector_LineXY tab, HSV888Pixel value) {
    VisionLabPINVOKE.DrawLines__SWIG_19(HSV888Image.getCPtr(image), vector_LineXY.getCPtr(tab), HSV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(HSV161616Image image, vector_LineXY tab, HSV161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_20(HSV161616Image.getCPtr(image), vector_LineXY.getCPtr(tab), HSV161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(HSV161616Image image, vector_LineXY tab, HSV161616Pixel value) {
    VisionLabPINVOKE.DrawLines__SWIG_21(HSV161616Image.getCPtr(image), vector_LineXY.getCPtr(tab), HSV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(YUV888Image image, vector_LineXY tab, YUV888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_22(YUV888Image.getCPtr(image), vector_LineXY.getCPtr(tab), YUV888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(YUV888Image image, vector_LineXY tab, YUV888Pixel value) {
    VisionLabPINVOKE.DrawLines__SWIG_23(YUV888Image.getCPtr(image), vector_LineXY.getCPtr(tab), YUV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(YUV161616Image image, vector_LineXY tab, YUV161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_24(YUV161616Image.getCPtr(image), vector_LineXY.getCPtr(tab), YUV161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(YUV161616Image image, vector_LineXY tab, YUV161616Pixel value) {
    VisionLabPINVOKE.DrawLines__SWIG_25(YUV161616Image.getCPtr(image), vector_LineXY.getCPtr(tab), YUV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(ComplexFloatImage image, vector_LineXY tab, SWIGTYPE_p_std__complexT_float_t value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_26(ComplexFloatImage.getCPtr(image), vector_LineXY.getCPtr(tab), SWIGTYPE_p_std__complexT_float_t.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(ComplexFloatImage image, vector_LineXY tab, SWIGTYPE_p_std__complexT_float_t value) {
    VisionLabPINVOKE.DrawLines__SWIG_27(ComplexFloatImage.getCPtr(image), vector_LineXY.getCPtr(tab), SWIGTYPE_p_std__complexT_float_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(ComplexDoubleImage image, vector_LineXY tab, SWIGTYPE_p_std__complexT_double_t value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawLines__SWIG_28(ComplexDoubleImage.getCPtr(image), vector_LineXY.getCPtr(tab), SWIGTYPE_p_std__complexT_double_t.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawLines(ComplexDoubleImage image, vector_LineXY tab, SWIGTYPE_p_std__complexT_double_t value) {
    VisionLabPINVOKE.DrawLines__SWIG_29(ComplexDoubleImage.getCPtr(image), vector_LineXY.getCPtr(tab), SWIGTYPE_p_std__complexT_double_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(ByteImage image, vector_XYCoord tab, byte value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_2(ByteImage.getCPtr(image), vector_XYCoord.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(ByteImage image, vector_XYCoord tab, byte value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_3(ByteImage.getCPtr(image), vector_XYCoord.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(Int8Image image, vector_XYCoord tab, char value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_4(Int8Image.getCPtr(image), vector_XYCoord.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(Int8Image image, vector_XYCoord tab, char value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_5(Int8Image.getCPtr(image), vector_XYCoord.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(Int16Image image, vector_XYCoord tab, short value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_6(Int16Image.getCPtr(image), vector_XYCoord.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(Int16Image image, vector_XYCoord tab, short value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_7(Int16Image.getCPtr(image), vector_XYCoord.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(Int32Image image, vector_XYCoord tab, int value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_8(Int32Image.getCPtr(image), vector_XYCoord.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(Int32Image image, vector_XYCoord tab, int value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_9(Int32Image.getCPtr(image), vector_XYCoord.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(FloatImage image, vector_XYCoord tab, float value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_10(FloatImage.getCPtr(image), vector_XYCoord.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(FloatImage image, vector_XYCoord tab, float value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_11(FloatImage.getCPtr(image), vector_XYCoord.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(DoubleImage image, vector_XYCoord tab, double value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_12(DoubleImage.getCPtr(image), vector_XYCoord.getCPtr(tab), value, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(DoubleImage image, vector_XYCoord tab, double value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_13(DoubleImage.getCPtr(image), vector_XYCoord.getCPtr(tab), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(RGB888Image image, vector_XYCoord tab, RGB888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_14(RGB888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), RGB888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(RGB888Image image, vector_XYCoord tab, RGB888Pixel value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_15(RGB888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), RGB888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(RGB161616Image image, vector_XYCoord tab, RGB161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_16(RGB161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), RGB161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(RGB161616Image image, vector_XYCoord tab, RGB161616Pixel value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_17(RGB161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), RGB161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(HSV888Image image, vector_XYCoord tab, HSV888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_18(HSV888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), HSV888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(HSV888Image image, vector_XYCoord tab, HSV888Pixel value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_19(HSV888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), HSV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(HSV161616Image image, vector_XYCoord tab, HSV161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_20(HSV161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), HSV161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(HSV161616Image image, vector_XYCoord tab, HSV161616Pixel value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_21(HSV161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), HSV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(YUV888Image image, vector_XYCoord tab, YUV888Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_22(YUV888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), YUV888Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(YUV888Image image, vector_XYCoord tab, YUV888Pixel value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_23(YUV888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), YUV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(YUV161616Image image, vector_XYCoord tab, YUV161616Pixel value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_24(YUV161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), YUV161616Pixel.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(YUV161616Image image, vector_XYCoord tab, YUV161616Pixel value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_25(YUV161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), YUV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(ComplexFloatImage image, vector_XYCoord tab, SWIGTYPE_p_std__complexT_float_t value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_26(ComplexFloatImage.getCPtr(image), vector_XYCoord.getCPtr(tab), SWIGTYPE_p_std__complexT_float_t.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(ComplexFloatImage image, vector_XYCoord tab, SWIGTYPE_p_std__complexT_float_t value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_27(ComplexFloatImage.getCPtr(image), vector_XYCoord.getCPtr(tab), SWIGTYPE_p_std__complexT_float_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(ComplexDoubleImage image, vector_XYCoord tab, SWIGTYPE_p_std__complexT_double_t value, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.DrawPolygon__SWIG_28(ComplexDoubleImage.getCPtr(image), vector_XYCoord.getCPtr(tab), SWIGTYPE_p_std__complexT_double_t.getCPtr(value), (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DrawPolygon(ComplexDoubleImage image, vector_XYCoord tab, SWIGTYPE_p_std__complexT_double_t value) {
    VisionLabPINVOKE.DrawPolygon__SWIG_29(ComplexDoubleImage.getCPtr(image), vector_XYCoord.getCPtr(tab), SWIGTYPE_p_std__complexT_double_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(ByteImage src, ByteImage dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(Int8Image src, Int8Image dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(Int16Image src, Int16Image dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(Int32Image src, Int32Image dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(FloatImage src, FloatImage dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(DoubleImage src, DoubleImage dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(RGB888Image src, RGB888Image dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_7(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(RGB161616Image src, RGB161616Image dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_8(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(HSV888Image src, HSV888Image dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_9(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(HSV161616Image src, HSV161616Image dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_10(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(YUV888Image src, YUV888Image dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_11(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(YUV161616Image src, YUV161616Image dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_12(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(ComplexFloatImage src, ComplexFloatImage dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_13(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Enlarge2(ComplexDoubleImage src, ComplexDoubleImage dest, PixelInterpolation pi) {
    VisionLabPINVOKE.Enlarge2__SWIG_14(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(ByteImage src, ByteImage dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_2(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(ByteImage src, ByteImage dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(Int8Image src, Int8Image dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_4(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(Int8Image src, Int8Image dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_5(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(Int16Image src, Int16Image dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_6(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(Int16Image src, Int16Image dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_7(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(Int32Image src, Int32Image dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_8(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(Int32Image src, Int32Image dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_9(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(FloatImage src, FloatImage dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_10(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(FloatImage src, FloatImage dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_11(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(DoubleImage src, DoubleImage dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_12(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(DoubleImage src, DoubleImage dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_13(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(RGB888Image src, RGB888Image dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_14(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(RGB888Image src, RGB888Image dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_15(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(RGB161616Image src, RGB161616Image dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_16(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(RGB161616Image src, RGB161616Image dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_17(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(HSV888Image src, HSV888Image dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_18(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(HSV888Image src, HSV888Image dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_19(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(HSV161616Image src, HSV161616Image dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_20(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(HSV161616Image src, HSV161616Image dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_21(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(YUV888Image src, YUV888Image dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_22(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(YUV888Image src, YUV888Image dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_23(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(YUV161616Image src, YUV161616Image dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_24(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(YUV161616Image src, YUV161616Image dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_25(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(ComplexFloatImage src, ComplexFloatImage dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_26(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(ComplexFloatImage src, ComplexFloatImage dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_27(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(ComplexDoubleImage src, ComplexDoubleImage dest, int top, int left, int right, int bottom) {
    VisionLabPINVOKE.ExtendBorder__SWIG_28(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), top, left, right, bottom);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ExtendBorder(ComplexDoubleImage src, ComplexDoubleImage dest, MaskBase mask) {
    VisionLabPINVOKE.ExtendBorder__SWIG_29(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), MaskBase.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(ByteImage src, ByteImage dest, int height, int width, double omega, double scale, byte border) {
    VisionLabPINVOKE.FishEye__SWIG_2(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), height, width, omega, scale, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(ByteImage src, ByteImage dest, int height, int width, double omega, double scale, byte border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), height, width, omega, scale, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(Int8Image src, Int8Image dest, int height, int width, double omega, double scale, char border) {
    VisionLabPINVOKE.FishEye__SWIG_4(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), height, width, omega, scale, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(Int8Image src, Int8Image dest, int height, int width, double omega, double scale, char border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_5(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), height, width, omega, scale, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(Int16Image src, Int16Image dest, int height, int width, double omega, double scale, short border) {
    VisionLabPINVOKE.FishEye__SWIG_6(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), height, width, omega, scale, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(Int16Image src, Int16Image dest, int height, int width, double omega, double scale, short border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_7(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), height, width, omega, scale, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(Int32Image src, Int32Image dest, int height, int width, double omega, double scale, int border) {
    VisionLabPINVOKE.FishEye__SWIG_8(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), height, width, omega, scale, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(Int32Image src, Int32Image dest, int height, int width, double omega, double scale, int border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_9(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), height, width, omega, scale, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(FloatImage src, FloatImage dest, int height, int width, double omega, double scale, float border) {
    VisionLabPINVOKE.FishEye__SWIG_10(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), height, width, omega, scale, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(FloatImage src, FloatImage dest, int height, int width, double omega, double scale, float border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_11(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), height, width, omega, scale, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(DoubleImage src, DoubleImage dest, int height, int width, double omega, double scale, double border) {
    VisionLabPINVOKE.FishEye__SWIG_12(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), height, width, omega, scale, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(DoubleImage src, DoubleImage dest, int height, int width, double omega, double scale, double border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_13(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), height, width, omega, scale, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(RGB888Image src, RGB888Image dest, int height, int width, double omega, double scale, RGB888Pixel border) {
    VisionLabPINVOKE.FishEye__SWIG_14(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), height, width, omega, scale, RGB888Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(RGB888Image src, RGB888Image dest, int height, int width, double omega, double scale, RGB888Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_15(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), height, width, omega, scale, RGB888Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(RGB161616Image src, RGB161616Image dest, int height, int width, double omega, double scale, RGB161616Pixel border) {
    VisionLabPINVOKE.FishEye__SWIG_16(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), height, width, omega, scale, RGB161616Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(RGB161616Image src, RGB161616Image dest, int height, int width, double omega, double scale, RGB161616Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_17(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), height, width, omega, scale, RGB161616Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(HSV888Image src, HSV888Image dest, int height, int width, double omega, double scale, HSV888Pixel border) {
    VisionLabPINVOKE.FishEye__SWIG_18(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), height, width, omega, scale, HSV888Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(HSV888Image src, HSV888Image dest, int height, int width, double omega, double scale, HSV888Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_19(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), height, width, omega, scale, HSV888Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(HSV161616Image src, HSV161616Image dest, int height, int width, double omega, double scale, HSV161616Pixel border) {
    VisionLabPINVOKE.FishEye__SWIG_20(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), height, width, omega, scale, HSV161616Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(HSV161616Image src, HSV161616Image dest, int height, int width, double omega, double scale, HSV161616Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_21(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), height, width, omega, scale, HSV161616Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(YUV888Image src, YUV888Image dest, int height, int width, double omega, double scale, YUV888Pixel border) {
    VisionLabPINVOKE.FishEye__SWIG_22(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), height, width, omega, scale, YUV888Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(YUV888Image src, YUV888Image dest, int height, int width, double omega, double scale, YUV888Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_23(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), height, width, omega, scale, YUV888Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(YUV161616Image src, YUV161616Image dest, int height, int width, double omega, double scale, YUV161616Pixel border) {
    VisionLabPINVOKE.FishEye__SWIG_24(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), height, width, omega, scale, YUV161616Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(YUV161616Image src, YUV161616Image dest, int height, int width, double omega, double scale, YUV161616Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_25(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), height, width, omega, scale, YUV161616Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(ComplexFloatImage src, ComplexFloatImage dest, int height, int width, double omega, double scale, SWIGTYPE_p_std__complexT_float_t border) {
    VisionLabPINVOKE.FishEye__SWIG_26(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), height, width, omega, scale, SWIGTYPE_p_std__complexT_float_t.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(ComplexFloatImage src, ComplexFloatImage dest, int height, int width, double omega, double scale, SWIGTYPE_p_std__complexT_float_t border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_27(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), height, width, omega, scale, SWIGTYPE_p_std__complexT_float_t.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(ComplexDoubleImage src, ComplexDoubleImage dest, int height, int width, double omega, double scale, SWIGTYPE_p_std__complexT_double_t border) {
    VisionLabPINVOKE.FishEye__SWIG_28(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), height, width, omega, scale, SWIGTYPE_p_std__complexT_double_t.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FishEye(ComplexDoubleImage src, ComplexDoubleImage dest, int height, int width, double omega, double scale, SWIGTYPE_p_std__complexT_double_t border, PixelInterpolation pi) {
    VisionLabPINVOKE.FishEye__SWIG_29(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), height, width, omega, scale, SWIGTYPE_p_std__complexT_double_t.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(ByteImage src, ByteImage dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(Int8Image src, Int8Image dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(Int16Image src, Int16Image dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(Int32Image src, Int32Image dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(FloatImage src, FloatImage dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(DoubleImage src, DoubleImage dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(RGB888Image src, RGB888Image dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_7(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(RGB161616Image src, RGB161616Image dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_8(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(HSV888Image src, HSV888Image dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_9(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(HSV161616Image src, HSV161616Image dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_10(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(YUV888Image src, YUV888Image dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_11(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(YUV161616Image src, YUV161616Image dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_12(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(ComplexFloatImage src, ComplexFloatImage dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_13(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FixEdges(ComplexDoubleImage src, ComplexDoubleImage dest, FixEdge edge, int upper, int lower, int left, int right) {
    VisionLabPINVOKE.FixEdges__SWIG_14(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), (int)edge, upper, lower, left, right);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(ByteImage image, ByteImage insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_1(ByteImage.getCPtr(image), ByteImage.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(Int8Image image, Int8Image insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_2(Int8Image.getCPtr(image), Int8Image.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(Int16Image image, Int16Image insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_3(Int16Image.getCPtr(image), Int16Image.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(Int32Image image, Int32Image insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_4(Int32Image.getCPtr(image), Int32Image.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(FloatImage image, FloatImage insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_5(FloatImage.getCPtr(image), FloatImage.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(DoubleImage image, DoubleImage insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_6(DoubleImage.getCPtr(image), DoubleImage.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(RGB888Image image, RGB888Image insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_7(RGB888Image.getCPtr(image), RGB888Image.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(RGB161616Image image, RGB161616Image insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_8(RGB161616Image.getCPtr(image), RGB161616Image.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(HSV888Image image, HSV888Image insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_9(HSV888Image.getCPtr(image), HSV888Image.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(HSV161616Image image, HSV161616Image insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_10(HSV161616Image.getCPtr(image), HSV161616Image.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(YUV888Image image, YUV888Image insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_11(YUV888Image.getCPtr(image), YUV888Image.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(YUV161616Image image, YUV161616Image insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_12(YUV161616Image.getCPtr(image), YUV161616Image.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(ComplexFloatImage image, ComplexFloatImage insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_13(ComplexFloatImage.getCPtr(image), ComplexFloatImage.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Insert(ComplexDoubleImage image, ComplexDoubleImage insert, XYCoord topLeft) {
    VisionLabPINVOKE.Insert__SWIG_14(ComplexDoubleImage.getCPtr(image), ComplexDoubleImage.getCPtr(insert), XYCoord.getCPtr(topLeft));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(ByteImage image, int startx, int starty, byte value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_2(ByteImage.getCPtr(image), startx, starty, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(ByteImage image, int startx, int starty, byte value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_3(ByteImage.getCPtr(image), startx, starty, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(Int8Image image, int startx, int starty, char value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_4(Int8Image.getCPtr(image), startx, starty, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(Int8Image image, int startx, int starty, char value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_5(Int8Image.getCPtr(image), startx, starty, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(Int16Image image, int startx, int starty, short value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_6(Int16Image.getCPtr(image), startx, starty, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(Int16Image image, int startx, int starty, short value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_7(Int16Image.getCPtr(image), startx, starty, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(Int32Image image, int startx, int starty, int value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_8(Int32Image.getCPtr(image), startx, starty, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(Int32Image image, int startx, int starty, int value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_9(Int32Image.getCPtr(image), startx, starty, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(FloatImage image, int startx, int starty, float value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_10(FloatImage.getCPtr(image), startx, starty, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(FloatImage image, int startx, int starty, float value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_11(FloatImage.getCPtr(image), startx, starty, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(DoubleImage image, int startx, int starty, double value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_12(DoubleImage.getCPtr(image), startx, starty, value, repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(DoubleImage image, int startx, int starty, double value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_13(DoubleImage.getCPtr(image), startx, starty, value, repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(RGB888Image image, int startx, int starty, RGB888Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_14(RGB888Image.getCPtr(image), startx, starty, RGB888Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(RGB888Image image, int startx, int starty, RGB888Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_15(RGB888Image.getCPtr(image), startx, starty, RGB888Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(RGB161616Image image, int startx, int starty, RGB161616Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_16(RGB161616Image.getCPtr(image), startx, starty, RGB161616Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(RGB161616Image image, int startx, int starty, RGB161616Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_17(RGB161616Image.getCPtr(image), startx, starty, RGB161616Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(HSV888Image image, int startx, int starty, HSV888Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_18(HSV888Image.getCPtr(image), startx, starty, HSV888Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(HSV888Image image, int startx, int starty, HSV888Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_19(HSV888Image.getCPtr(image), startx, starty, HSV888Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(HSV161616Image image, int startx, int starty, HSV161616Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_20(HSV161616Image.getCPtr(image), startx, starty, HSV161616Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(HSV161616Image image, int startx, int starty, HSV161616Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_21(HSV161616Image.getCPtr(image), startx, starty, HSV161616Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(YUV888Image image, int startx, int starty, YUV888Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_22(YUV888Image.getCPtr(image), startx, starty, YUV888Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(YUV888Image image, int startx, int starty, YUV888Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_23(YUV888Image.getCPtr(image), startx, starty, YUV888Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(YUV161616Image image, int startx, int starty, YUV161616Pixel value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_24(YUV161616Image.getCPtr(image), startx, starty, YUV161616Pixel.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(YUV161616Image image, int startx, int starty, YUV161616Pixel value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_25(YUV161616Image.getCPtr(image), startx, starty, YUV161616Pixel.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(ComplexFloatImage image, int startx, int starty, SWIGTYPE_p_std__complexT_float_t value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_26(ComplexFloatImage.getCPtr(image), startx, starty, SWIGTYPE_p_std__complexT_float_t.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(ComplexFloatImage image, int startx, int starty, SWIGTYPE_p_std__complexT_float_t value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_27(ComplexFloatImage.getCPtr(image), startx, starty, SWIGTYPE_p_std__complexT_float_t.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(ComplexDoubleImage image, int startx, int starty, SWIGTYPE_p_std__complexT_double_t value, int repeatx, int repeaty, ZeroOrOriginal zorg) {
    VisionLabPINVOKE.LinePattern__SWIG_28(ComplexDoubleImage.getCPtr(image), startx, starty, SWIGTYPE_p_std__complexT_double_t.getCPtr(value), repeatx, repeaty, (int)zorg);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LinePattern(ComplexDoubleImage image, int startx, int starty, SWIGTYPE_p_std__complexT_double_t value, int repeatx, int repeaty) {
    VisionLabPINVOKE.LinePattern__SWIG_29(ComplexDoubleImage.getCPtr(image), startx, starty, SWIGTYPE_p_std__complexT_double_t.getCPtr(value), repeatx, repeaty);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(ByteImage inputImage, ByteImage outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_2(ByteImage.getCPtr(inputImage), ByteImage.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(ByteImage inputImage, ByteImage outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_3(ByteImage.getCPtr(inputImage), ByteImage.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(Int8Image inputImage, Int8Image outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_4(Int8Image.getCPtr(inputImage), Int8Image.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(Int8Image inputImage, Int8Image outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_5(Int8Image.getCPtr(inputImage), Int8Image.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(Int16Image inputImage, Int16Image outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_6(Int16Image.getCPtr(inputImage), Int16Image.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(Int16Image inputImage, Int16Image outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_7(Int16Image.getCPtr(inputImage), Int16Image.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(Int32Image inputImage, Int32Image outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_8(Int32Image.getCPtr(inputImage), Int32Image.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(Int32Image inputImage, Int32Image outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_9(Int32Image.getCPtr(inputImage), Int32Image.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(FloatImage inputImage, FloatImage outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_10(FloatImage.getCPtr(inputImage), FloatImage.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(FloatImage inputImage, FloatImage outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_11(FloatImage.getCPtr(inputImage), FloatImage.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(DoubleImage inputImage, DoubleImage outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_12(DoubleImage.getCPtr(inputImage), DoubleImage.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(DoubleImage inputImage, DoubleImage outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_13(DoubleImage.getCPtr(inputImage), DoubleImage.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(RGB888Image inputImage, RGB888Image outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_14(RGB888Image.getCPtr(inputImage), RGB888Image.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(RGB888Image inputImage, RGB888Image outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_15(RGB888Image.getCPtr(inputImage), RGB888Image.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(RGB161616Image inputImage, RGB161616Image outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_16(RGB161616Image.getCPtr(inputImage), RGB161616Image.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(RGB161616Image inputImage, RGB161616Image outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_17(RGB161616Image.getCPtr(inputImage), RGB161616Image.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(HSV888Image inputImage, HSV888Image outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_18(HSV888Image.getCPtr(inputImage), HSV888Image.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(HSV888Image inputImage, HSV888Image outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_19(HSV888Image.getCPtr(inputImage), HSV888Image.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(HSV161616Image inputImage, HSV161616Image outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_20(HSV161616Image.getCPtr(inputImage), HSV161616Image.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(HSV161616Image inputImage, HSV161616Image outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_21(HSV161616Image.getCPtr(inputImage), HSV161616Image.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(YUV888Image inputImage, YUV888Image outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_22(YUV888Image.getCPtr(inputImage), YUV888Image.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(YUV888Image inputImage, YUV888Image outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_23(YUV888Image.getCPtr(inputImage), YUV888Image.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(YUV161616Image inputImage, YUV161616Image outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_24(YUV161616Image.getCPtr(inputImage), YUV161616Image.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(YUV161616Image inputImage, YUV161616Image outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_25(YUV161616Image.getCPtr(inputImage), YUV161616Image.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(ComplexFloatImage inputImage, ComplexFloatImage outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_26(ComplexFloatImage.getCPtr(inputImage), ComplexFloatImage.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(ComplexFloatImage inputImage, ComplexFloatImage outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_27(ComplexFloatImage.getCPtr(inputImage), ComplexFloatImage.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(ComplexDoubleImage inputImage, ComplexDoubleImage outputImage, AxisType xAxis, AxisType yAxis) {
    VisionLabPINVOKE.MapAxis__SWIG_28(ComplexDoubleImage.getCPtr(inputImage), ComplexDoubleImage.getCPtr(outputImage), (int)xAxis, (int)yAxis);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MapAxis(ComplexDoubleImage inputImage, ComplexDoubleImage outputImage, AxisMapping axisMapping) {
    VisionLabPINVOKE.MapAxis__SWIG_29(ComplexDoubleImage.getCPtr(inputImage), ComplexDoubleImage.getCPtr(outputImage), (int)axisMapping);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(ByteImage image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_1(ByteImage.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(Int8Image image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_2(Int8Image.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(Int16Image image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_3(Int16Image.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(Int32Image image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_4(Int32Image.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(FloatImage image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_5(FloatImage.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(DoubleImage image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_6(DoubleImage.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(RGB888Image image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_7(RGB888Image.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(RGB161616Image image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_8(RGB161616Image.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(HSV888Image image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_9(HSV888Image.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(HSV161616Image image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_10(HSV161616Image.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(YUV888Image image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_11(YUV888Image.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(YUV161616Image image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_12(YUV161616Image.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(ComplexFloatImage image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_13(ComplexFloatImage.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mirror(ComplexDoubleImage image, MirrorOperation op) {
    VisionLabPINVOKE.Mirror__SWIG_14(ComplexDoubleImage.getCPtr(image), (int)op);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(ByteImage src, ByteImage dest, double k1, double k2, double k3, byte borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_2(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), k1, k2, k3, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(ByteImage src, ByteImage dest, double k1, double k2, double k3, byte borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), k1, k2, k3, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(Int8Image src, Int8Image dest, double k1, double k2, double k3, char borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_4(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), k1, k2, k3, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(Int8Image src, Int8Image dest, double k1, double k2, double k3, char borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_5(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), k1, k2, k3, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(Int16Image src, Int16Image dest, double k1, double k2, double k3, short borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_6(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), k1, k2, k3, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(Int16Image src, Int16Image dest, double k1, double k2, double k3, short borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_7(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), k1, k2, k3, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(Int32Image src, Int32Image dest, double k1, double k2, double k3, int borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_8(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), k1, k2, k3, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(Int32Image src, Int32Image dest, double k1, double k2, double k3, int borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_9(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), k1, k2, k3, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(FloatImage src, FloatImage dest, double k1, double k2, double k3, float borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_10(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), k1, k2, k3, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(FloatImage src, FloatImage dest, double k1, double k2, double k3, float borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_11(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), k1, k2, k3, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(DoubleImage src, DoubleImage dest, double k1, double k2, double k3, double borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_12(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), k1, k2, k3, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(DoubleImage src, DoubleImage dest, double k1, double k2, double k3, double borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_13(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), k1, k2, k3, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(RGB888Image src, RGB888Image dest, double k1, double k2, double k3, RGB888Pixel borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_14(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), k1, k2, k3, RGB888Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(RGB888Image src, RGB888Image dest, double k1, double k2, double k3, RGB888Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_15(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), k1, k2, k3, RGB888Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(RGB161616Image src, RGB161616Image dest, double k1, double k2, double k3, RGB161616Pixel borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_16(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), k1, k2, k3, RGB161616Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(RGB161616Image src, RGB161616Image dest, double k1, double k2, double k3, RGB161616Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_17(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), k1, k2, k3, RGB161616Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(HSV888Image src, HSV888Image dest, double k1, double k2, double k3, HSV888Pixel borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_18(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), k1, k2, k3, HSV888Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(HSV888Image src, HSV888Image dest, double k1, double k2, double k3, HSV888Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_19(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), k1, k2, k3, HSV888Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(HSV161616Image src, HSV161616Image dest, double k1, double k2, double k3, HSV161616Pixel borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_20(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), k1, k2, k3, HSV161616Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(HSV161616Image src, HSV161616Image dest, double k1, double k2, double k3, HSV161616Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_21(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), k1, k2, k3, HSV161616Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(YUV888Image src, YUV888Image dest, double k1, double k2, double k3, YUV888Pixel borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_22(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), k1, k2, k3, YUV888Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(YUV888Image src, YUV888Image dest, double k1, double k2, double k3, YUV888Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_23(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), k1, k2, k3, YUV888Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(YUV161616Image src, YUV161616Image dest, double k1, double k2, double k3, YUV161616Pixel borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_24(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), k1, k2, k3, YUV161616Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(YUV161616Image src, YUV161616Image dest, double k1, double k2, double k3, YUV161616Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_25(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), k1, k2, k3, YUV161616Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(ComplexFloatImage src, ComplexFloatImage dest, double k1, double k2, double k3, SWIGTYPE_p_std__complexT_float_t borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_26(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), k1, k2, k3, SWIGTYPE_p_std__complexT_float_t.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(ComplexFloatImage src, ComplexFloatImage dest, double k1, double k2, double k3, SWIGTYPE_p_std__complexT_float_t borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_27(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), k1, k2, k3, SWIGTYPE_p_std__complexT_float_t.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(ComplexDoubleImage src, ComplexDoubleImage dest, double k1, double k2, double k3, SWIGTYPE_p_std__complexT_double_t borderValue) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_28(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), k1, k2, k3, SWIGTYPE_p_std__complexT_double_t.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpticalCorrection(ComplexDoubleImage src, ComplexDoubleImage dest, double k1, double k2, double k3, SWIGTYPE_p_std__complexT_double_t borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.OpticalCorrection__SWIG_29(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), k1, k2, k3, SWIGTYPE_p_std__complexT_double_t.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int PixelPtrTabFromImage(ByteImage image, SWIGTYPE_p_std__vectorT_unsigned_char_p_t tab, byte pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_2(ByteImage.getCPtr(image), SWIGTYPE_p_std__vectorT_unsigned_char_p_t.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(ByteImage image, SWIGTYPE_p_std__vectorT_unsigned_char_p_t tab, byte low, byte high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_3(ByteImage.getCPtr(image), SWIGTYPE_p_std__vectorT_unsigned_char_p_t.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(Int8Image image, SWIGTYPE_p_std__vectorT_char_p_t tab, char pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_4(Int8Image.getCPtr(image), SWIGTYPE_p_std__vectorT_char_p_t.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(Int8Image image, SWIGTYPE_p_std__vectorT_char_p_t tab, char low, char high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_5(Int8Image.getCPtr(image), SWIGTYPE_p_std__vectorT_char_p_t.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(Int16Image image, SWIGTYPE_p_std__vectorT_short_p_t tab, short pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_6(Int16Image.getCPtr(image), SWIGTYPE_p_std__vectorT_short_p_t.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(Int16Image image, SWIGTYPE_p_std__vectorT_short_p_t tab, short low, short high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_7(Int16Image.getCPtr(image), SWIGTYPE_p_std__vectorT_short_p_t.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(Int32Image image, SWIGTYPE_p_std__vectorT_int_p_t tab, int pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_8(Int32Image.getCPtr(image), SWIGTYPE_p_std__vectorT_int_p_t.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(Int32Image image, SWIGTYPE_p_std__vectorT_int_p_t tab, int low, int high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_9(Int32Image.getCPtr(image), SWIGTYPE_p_std__vectorT_int_p_t.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(FloatImage image, SWIGTYPE_p_std__vectorT_float_p_t tab, float pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_10(FloatImage.getCPtr(image), SWIGTYPE_p_std__vectorT_float_p_t.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(FloatImage image, SWIGTYPE_p_std__vectorT_float_p_t tab, float low, float high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_11(FloatImage.getCPtr(image), SWIGTYPE_p_std__vectorT_float_p_t.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(DoubleImage image, SWIGTYPE_p_std__vectorT_double_p_t tab, double pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_12(DoubleImage.getCPtr(image), SWIGTYPE_p_std__vectorT_double_p_t.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(DoubleImage image, SWIGTYPE_p_std__vectorT_double_p_t tab, double low, double high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_13(DoubleImage.getCPtr(image), SWIGTYPE_p_std__vectorT_double_p_t.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(RGB888Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__RGB888Pixel_p_t tab, RGB888Pixel pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_14(RGB888Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__RGB888Pixel_p_t.getCPtr(tab), RGB888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(RGB888Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__RGB888Pixel_p_t tab, RGB888Pixel low, RGB888Pixel high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_15(RGB888Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__RGB888Pixel_p_t.getCPtr(tab), RGB888Pixel.getCPtr(low), RGB888Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(RGB161616Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__RGB161616Pixel_p_t tab, RGB161616Pixel pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_16(RGB161616Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__RGB161616Pixel_p_t.getCPtr(tab), RGB161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(RGB161616Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__RGB161616Pixel_p_t tab, RGB161616Pixel low, RGB161616Pixel high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_17(RGB161616Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__RGB161616Pixel_p_t.getCPtr(tab), RGB161616Pixel.getCPtr(low), RGB161616Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(HSV888Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__HSV888Pixel_p_t tab, HSV888Pixel pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_18(HSV888Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__HSV888Pixel_p_t.getCPtr(tab), HSV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(HSV888Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__HSV888Pixel_p_t tab, HSV888Pixel low, HSV888Pixel high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_19(HSV888Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__HSV888Pixel_p_t.getCPtr(tab), HSV888Pixel.getCPtr(low), HSV888Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(HSV161616Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__HSV161616Pixel_p_t tab, HSV161616Pixel pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_20(HSV161616Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__HSV161616Pixel_p_t.getCPtr(tab), HSV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(HSV161616Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__HSV161616Pixel_p_t tab, HSV161616Pixel low, HSV161616Pixel high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_21(HSV161616Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__HSV161616Pixel_p_t.getCPtr(tab), HSV161616Pixel.getCPtr(low), HSV161616Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(YUV888Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__YUV888Pixel_p_t tab, YUV888Pixel pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_22(YUV888Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__YUV888Pixel_p_t.getCPtr(tab), YUV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(YUV888Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__YUV888Pixel_p_t tab, YUV888Pixel low, YUV888Pixel high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_23(YUV888Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__YUV888Pixel_p_t.getCPtr(tab), YUV888Pixel.getCPtr(low), YUV888Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(YUV161616Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__YUV161616Pixel_p_t tab, YUV161616Pixel pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_24(YUV161616Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__YUV161616Pixel_p_t.getCPtr(tab), YUV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(YUV161616Image image, SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__YUV161616Pixel_p_t tab, YUV161616Pixel low, YUV161616Pixel high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_25(YUV161616Image.getCPtr(image), SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__YUV161616Pixel_p_t.getCPtr(tab), YUV161616Pixel.getCPtr(low), YUV161616Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(ComplexFloatImage image, SWIGTYPE_p_std__vectorT_std__complexT_float_t_p_t tab, SWIGTYPE_p_std__complexT_float_t pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_26(ComplexFloatImage.getCPtr(image), SWIGTYPE_p_std__vectorT_std__complexT_float_t_p_t.getCPtr(tab), SWIGTYPE_p_std__complexT_float_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(ComplexFloatImage image, SWIGTYPE_p_std__vectorT_std__complexT_float_t_p_t tab, SWIGTYPE_p_std__complexT_float_t low, SWIGTYPE_p_std__complexT_float_t high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_27(ComplexFloatImage.getCPtr(image), SWIGTYPE_p_std__vectorT_std__complexT_float_t_p_t.getCPtr(tab), SWIGTYPE_p_std__complexT_float_t.getCPtr(low), SWIGTYPE_p_std__complexT_float_t.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(ComplexDoubleImage image, SWIGTYPE_p_std__vectorT_std__complexT_double_t_p_t tab, SWIGTYPE_p_std__complexT_double_t pixel) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_28(ComplexDoubleImage.getCPtr(image), SWIGTYPE_p_std__vectorT_std__complexT_double_t_p_t.getCPtr(tab), SWIGTYPE_p_std__complexT_double_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PixelPtrTabFromImage(ComplexDoubleImage image, SWIGTYPE_p_std__vectorT_std__complexT_double_t_p_t tab, SWIGTYPE_p_std__complexT_double_t low, SWIGTYPE_p_std__complexT_double_t high) {
    int ret = VisionLabPINVOKE.PixelPtrTabFromImage__SWIG_29(ComplexDoubleImage.getCPtr(image), SWIGTYPE_p_std__vectorT_std__complexT_double_t_p_t.getCPtr(tab), SWIGTYPE_p_std__complexT_double_t.getCPtr(low), SWIGTYPE_p_std__complexT_double_t.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Reduce2(ByteImage src, ByteImage dest) {
    VisionLabPINVOKE.Reduce2__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(Int8Image src, Int8Image dest) {
    VisionLabPINVOKE.Reduce2__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(Int16Image src, Int16Image dest) {
    VisionLabPINVOKE.Reduce2__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(Int32Image src, Int32Image dest) {
    VisionLabPINVOKE.Reduce2__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(FloatImage src, FloatImage dest) {
    VisionLabPINVOKE.Reduce2__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(DoubleImage src, DoubleImage dest) {
    VisionLabPINVOKE.Reduce2__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(RGB888Image src, RGB888Image dest) {
    VisionLabPINVOKE.Reduce2__SWIG_7(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(RGB161616Image src, RGB161616Image dest) {
    VisionLabPINVOKE.Reduce2__SWIG_8(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(HSV888Image src, HSV888Image dest) {
    VisionLabPINVOKE.Reduce2__SWIG_9(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(HSV161616Image src, HSV161616Image dest) {
    VisionLabPINVOKE.Reduce2__SWIG_10(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(YUV888Image src, YUV888Image dest) {
    VisionLabPINVOKE.Reduce2__SWIG_11(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(YUV161616Image src, YUV161616Image dest) {
    VisionLabPINVOKE.Reduce2__SWIG_12(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(ComplexFloatImage src, ComplexFloatImage dest) {
    VisionLabPINVOKE.Reduce2__SWIG_13(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Reduce2(ComplexDoubleImage src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.Reduce2__SWIG_14(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(ByteImage image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_1(ByteImage.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(Int8Image image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_2(Int8Image.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(Int16Image image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_3(Int16Image.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(Int32Image image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_4(Int32Image.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(FloatImage image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_5(FloatImage.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(DoubleImage image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_6(DoubleImage.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(RGB888Image image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_7(RGB888Image.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(RGB161616Image image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_8(RGB161616Image.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(HSV888Image image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_9(HSV888Image.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(HSV161616Image image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_10(HSV161616Image.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(YUV888Image image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_11(YUV888Image.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(YUV161616Image image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_12(YUV161616Image.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(ComplexFloatImage image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_13(ComplexFloatImage.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Resample(ComplexDoubleImage image, int rate) {
    VisionLabPINVOKE.Resample__SWIG_14(ComplexDoubleImage.getCPtr(image), rate);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(ByteImage src, ByteImage dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(Int8Image src, Int8Image dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(Int16Image src, Int16Image dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(Int32Image src, Int32Image dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(FloatImage src, FloatImage dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(DoubleImage src, DoubleImage dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(RGB888Image src, RGB888Image dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_7(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(RGB161616Image src, RGB161616Image dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_8(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(HSV888Image src, HSV888Image dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_9(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(HSV161616Image src, HSV161616Image dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_10(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(YUV888Image src, YUV888Image dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_11(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(YUV161616Image src, YUV161616Image dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_12(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(ComplexFloatImage src, ComplexFloatImage dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_13(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROI(ComplexDoubleImage src, ComplexDoubleImage dest, XYCoord topLeft, HeightWidth hw) {
    VisionLabPINVOKE.ROI__SWIG_14(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), XYCoord.getCPtr(topLeft), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ByteImage src, ByteImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_4(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ByteImage src, ByteImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_5(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ByteImage src, ByteImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_6(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ByteImage src, ByteImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_7(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int8Image src, Int8Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int8Image src, Int8Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_9(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int8Image src, Int8Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_10(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int8Image src, Int8Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_11(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int16Image src, Int16Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_12(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int16Image src, Int16Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_13(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int16Image src, Int16Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_14(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int16Image src, Int16Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_15(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int32Image src, Int32Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_16(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int32Image src, Int32Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_17(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int32Image src, Int32Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_18(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(Int32Image src, Int32Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_19(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(FloatImage src, FloatImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_20(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(FloatImage src, FloatImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_21(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(FloatImage src, FloatImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_22(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(FloatImage src, FloatImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_23(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(DoubleImage src, DoubleImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_24(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(DoubleImage src, DoubleImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_25(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(DoubleImage src, DoubleImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_26(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(DoubleImage src, DoubleImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_27(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(RGB888Image src, RGB888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_28(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(RGB888Image src, RGB888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_29(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(RGB888Image src, RGB888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_30(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(RGB888Image src, RGB888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_31(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(RGB161616Image src, RGB161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_32(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(RGB161616Image src, RGB161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_33(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(RGB161616Image src, RGB161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_34(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(RGB161616Image src, RGB161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_35(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(HSV888Image src, HSV888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_36(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(HSV888Image src, HSV888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_37(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(HSV888Image src, HSV888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_38(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(HSV888Image src, HSV888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_39(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(HSV161616Image src, HSV161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_40(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(HSV161616Image src, HSV161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_41(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(HSV161616Image src, HSV161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_42(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(HSV161616Image src, HSV161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_43(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(YUV888Image src, YUV888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_44(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(YUV888Image src, YUV888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_45(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(YUV888Image src, YUV888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_46(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(YUV888Image src, YUV888Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_47(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(YUV161616Image src, YUV161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_48(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(YUV161616Image src, YUV161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_49(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(YUV161616Image src, YUV161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_50(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(YUV161616Image src, YUV161616Image dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_51(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ComplexFloatImage src, ComplexFloatImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_52(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ComplexFloatImage src, ComplexFloatImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_53(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ComplexFloatImage src, ComplexFloatImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_54(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ComplexFloatImage src, ComplexFloatImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_55(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ComplexDoubleImage src, ComplexDoubleImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, int border) {
    VisionLabPINVOKE.ROIR__SWIG_56(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ComplexDoubleImage src, ComplexDoubleImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien) {
    VisionLabPINVOKE.ROIR__SWIG_57(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ComplexDoubleImage src, ComplexDoubleImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi, int border) {
    VisionLabPINVOKE.ROIR__SWIG_58(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ROIR(ComplexDoubleImage src, ComplexDoubleImage dest, XYCoord middle, XYCoord endpoint1, XYCoord endpoint2, Orientation orien, PixelInterpolation pi) {
    VisionLabPINVOKE.ROIR__SWIG_59(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), XYCoord.getCPtr(middle), XYCoord.getCPtr(endpoint1), XYCoord.getCPtr(endpoint2), (int)orien, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(ByteImage src, ByteImage dest, XYCoord center, double phi, byte borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_2(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), XYCoord.getCPtr(center), phi, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(ByteImage src, ByteImage dest, XYCoord centre, double phi, byte borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), XYCoord.getCPtr(centre), phi, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(Int8Image src, Int8Image dest, XYCoord center, double phi, char borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_4(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), XYCoord.getCPtr(center), phi, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(Int8Image src, Int8Image dest, XYCoord centre, double phi, char borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_5(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), XYCoord.getCPtr(centre), phi, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(Int16Image src, Int16Image dest, XYCoord center, double phi, short borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_6(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), XYCoord.getCPtr(center), phi, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(Int16Image src, Int16Image dest, XYCoord centre, double phi, short borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_7(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), XYCoord.getCPtr(centre), phi, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(Int32Image src, Int32Image dest, XYCoord center, double phi, int borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_8(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), XYCoord.getCPtr(center), phi, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(Int32Image src, Int32Image dest, XYCoord centre, double phi, int borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_9(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), XYCoord.getCPtr(centre), phi, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(FloatImage src, FloatImage dest, XYCoord center, double phi, float borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_10(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), XYCoord.getCPtr(center), phi, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(FloatImage src, FloatImage dest, XYCoord centre, double phi, float borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_11(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), XYCoord.getCPtr(centre), phi, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(DoubleImage src, DoubleImage dest, XYCoord center, double phi, double borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_12(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), XYCoord.getCPtr(center), phi, borderValue);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(DoubleImage src, DoubleImage dest, XYCoord centre, double phi, double borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_13(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), XYCoord.getCPtr(centre), phi, borderValue, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(RGB888Image src, RGB888Image dest, XYCoord center, double phi, RGB888Pixel borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_14(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), XYCoord.getCPtr(center), phi, RGB888Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(RGB888Image src, RGB888Image dest, XYCoord centre, double phi, RGB888Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_15(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), XYCoord.getCPtr(centre), phi, RGB888Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(RGB161616Image src, RGB161616Image dest, XYCoord center, double phi, RGB161616Pixel borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_16(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), XYCoord.getCPtr(center), phi, RGB161616Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(RGB161616Image src, RGB161616Image dest, XYCoord centre, double phi, RGB161616Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_17(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), XYCoord.getCPtr(centre), phi, RGB161616Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(HSV888Image src, HSV888Image dest, XYCoord center, double phi, HSV888Pixel borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_18(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), XYCoord.getCPtr(center), phi, HSV888Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(HSV888Image src, HSV888Image dest, XYCoord centre, double phi, HSV888Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_19(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), XYCoord.getCPtr(centre), phi, HSV888Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(HSV161616Image src, HSV161616Image dest, XYCoord center, double phi, HSV161616Pixel borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_20(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), XYCoord.getCPtr(center), phi, HSV161616Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(HSV161616Image src, HSV161616Image dest, XYCoord centre, double phi, HSV161616Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_21(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), XYCoord.getCPtr(centre), phi, HSV161616Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(YUV888Image src, YUV888Image dest, XYCoord center, double phi, YUV888Pixel borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_22(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), XYCoord.getCPtr(center), phi, YUV888Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(YUV888Image src, YUV888Image dest, XYCoord centre, double phi, YUV888Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_23(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), XYCoord.getCPtr(centre), phi, YUV888Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(YUV161616Image src, YUV161616Image dest, XYCoord center, double phi, YUV161616Pixel borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_24(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), XYCoord.getCPtr(center), phi, YUV161616Pixel.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(YUV161616Image src, YUV161616Image dest, XYCoord centre, double phi, YUV161616Pixel borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_25(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), XYCoord.getCPtr(centre), phi, YUV161616Pixel.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(ComplexFloatImage src, ComplexFloatImage dest, XYCoord center, double phi, SWIGTYPE_p_std__complexT_float_t borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_26(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), XYCoord.getCPtr(center), phi, SWIGTYPE_p_std__complexT_float_t.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(ComplexFloatImage src, ComplexFloatImage dest, XYCoord centre, double phi, SWIGTYPE_p_std__complexT_float_t borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_27(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), XYCoord.getCPtr(centre), phi, SWIGTYPE_p_std__complexT_float_t.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(ComplexDoubleImage src, ComplexDoubleImage dest, XYCoord center, double phi, SWIGTYPE_p_std__complexT_double_t borderValue) {
    VisionLabPINVOKE.Rotate__SWIG_28(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), XYCoord.getCPtr(center), phi, SWIGTYPE_p_std__complexT_double_t.getCPtr(borderValue));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rotate(ComplexDoubleImage src, ComplexDoubleImage dest, XYCoord centre, double phi, SWIGTYPE_p_std__complexT_double_t borderValue, PixelInterpolation pi) {
    VisionLabPINVOKE.Rotate__SWIG_29(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), XYCoord.getCPtr(centre), phi, SWIGTYPE_p_std__complexT_double_t.getCPtr(borderValue), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static XYCoord RotateFull(ByteImage src, ByteImage dest, double phi, byte borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_2(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), phi, borderValue), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(ByteImage src, ByteImage dest, double phi, byte borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), phi, borderValue, (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(Int8Image src, Int8Image dest, double phi, char borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_4(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), phi, borderValue), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(Int8Image src, Int8Image dest, double phi, char borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_5(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), phi, borderValue, (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(Int16Image src, Int16Image dest, double phi, short borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_6(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), phi, borderValue), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(Int16Image src, Int16Image dest, double phi, short borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_7(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), phi, borderValue, (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(Int32Image src, Int32Image dest, double phi, int borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_8(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), phi, borderValue), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(Int32Image src, Int32Image dest, double phi, int borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_9(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), phi, borderValue, (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(FloatImage src, FloatImage dest, double phi, float borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_10(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), phi, borderValue), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(FloatImage src, FloatImage dest, double phi, float borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_11(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), phi, borderValue, (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(DoubleImage src, DoubleImage dest, double phi, double borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_12(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), phi, borderValue), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(DoubleImage src, DoubleImage dest, double phi, double borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_13(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), phi, borderValue, (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(RGB888Image src, RGB888Image dest, double phi, RGB888Pixel borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_14(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), phi, RGB888Pixel.getCPtr(borderValue)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(RGB888Image src, RGB888Image dest, double phi, RGB888Pixel borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_15(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), phi, RGB888Pixel.getCPtr(borderValue), (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(RGB161616Image src, RGB161616Image dest, double phi, RGB161616Pixel borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_16(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), phi, RGB161616Pixel.getCPtr(borderValue)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(RGB161616Image src, RGB161616Image dest, double phi, RGB161616Pixel borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_17(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), phi, RGB161616Pixel.getCPtr(borderValue), (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(HSV888Image src, HSV888Image dest, double phi, HSV888Pixel borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_18(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), phi, HSV888Pixel.getCPtr(borderValue)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(HSV888Image src, HSV888Image dest, double phi, HSV888Pixel borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_19(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), phi, HSV888Pixel.getCPtr(borderValue), (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(HSV161616Image src, HSV161616Image dest, double phi, HSV161616Pixel borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_20(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), phi, HSV161616Pixel.getCPtr(borderValue)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(HSV161616Image src, HSV161616Image dest, double phi, HSV161616Pixel borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_21(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), phi, HSV161616Pixel.getCPtr(borderValue), (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(YUV888Image src, YUV888Image dest, double phi, YUV888Pixel borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_22(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), phi, YUV888Pixel.getCPtr(borderValue)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(YUV888Image src, YUV888Image dest, double phi, YUV888Pixel borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_23(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), phi, YUV888Pixel.getCPtr(borderValue), (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(YUV161616Image src, YUV161616Image dest, double phi, YUV161616Pixel borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_24(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), phi, YUV161616Pixel.getCPtr(borderValue)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(YUV161616Image src, YUV161616Image dest, double phi, YUV161616Pixel borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_25(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), phi, YUV161616Pixel.getCPtr(borderValue), (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(ComplexFloatImage src, ComplexFloatImage dest, double phi, SWIGTYPE_p_std__complexT_float_t borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_26(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), phi, SWIGTYPE_p_std__complexT_float_t.getCPtr(borderValue)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(ComplexFloatImage src, ComplexFloatImage dest, double phi, SWIGTYPE_p_std__complexT_float_t borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_27(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), phi, SWIGTYPE_p_std__complexT_float_t.getCPtr(borderValue), (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(ComplexDoubleImage src, ComplexDoubleImage dest, double phi, SWIGTYPE_p_std__complexT_double_t borderValue) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_28(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), phi, SWIGTYPE_p_std__complexT_double_t.getCPtr(borderValue)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XYCoord RotateFull(ComplexDoubleImage src, ComplexDoubleImage dest, double phi, SWIGTYPE_p_std__complexT_double_t borderValue, PixelInterpolation pi) {
    XYCoord ret = new XYCoord(VisionLabPINVOKE.RotateFull__SWIG_29(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), phi, SWIGTYPE_p_std__complexT_double_t.getCPtr(borderValue), (int)pi), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetAllPixels(ByteImage image, byte value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_1(ByteImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(Int8Image image, char value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_2(Int8Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(Int16Image image, short value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_3(Int16Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(Int32Image image, int value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_4(Int32Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(FloatImage image, float value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_5(FloatImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(DoubleImage image, double value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_6(DoubleImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(RGB888Image image, RGB888Pixel value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_7(RGB888Image.getCPtr(image), RGB888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(RGB161616Image image, RGB161616Pixel value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_8(RGB161616Image.getCPtr(image), RGB161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(HSV888Image image, HSV888Pixel value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_9(HSV888Image.getCPtr(image), HSV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(HSV161616Image image, HSV161616Pixel value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_10(HSV161616Image.getCPtr(image), HSV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(YUV888Image image, YUV888Pixel value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_11(YUV888Image.getCPtr(image), YUV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(YUV161616Image image, YUV161616Pixel value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_12(YUV161616Image.getCPtr(image), YUV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(ComplexFloatImage image, SWIGTYPE_p_std__complexT_float_t value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_13(ComplexFloatImage.getCPtr(image), SWIGTYPE_p_std__complexT_float_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetAllPixels(ComplexDoubleImage image, SWIGTYPE_p_std__complexT_double_t value) {
    VisionLabPINVOKE.SetAllPixels__SWIG_14(ComplexDoubleImage.getCPtr(image), SWIGTYPE_p_std__complexT_double_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(ByteImage image, byte value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_2(ByteImage.getCPtr(image), value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(ByteImage image, byte value) {
    VisionLabPINVOKE.SetBorders__SWIG_3(ByteImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(Int8Image image, char value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_4(Int8Image.getCPtr(image), value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(Int8Image image, char value) {
    VisionLabPINVOKE.SetBorders__SWIG_5(Int8Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(Int16Image image, short value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_6(Int16Image.getCPtr(image), value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(Int16Image image, short value) {
    VisionLabPINVOKE.SetBorders__SWIG_7(Int16Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(Int32Image image, int value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_8(Int32Image.getCPtr(image), value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(Int32Image image, int value) {
    VisionLabPINVOKE.SetBorders__SWIG_9(Int32Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(FloatImage image, float value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_10(FloatImage.getCPtr(image), value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(FloatImage image, float value) {
    VisionLabPINVOKE.SetBorders__SWIG_11(FloatImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(DoubleImage image, double value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_12(DoubleImage.getCPtr(image), value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(DoubleImage image, double value) {
    VisionLabPINVOKE.SetBorders__SWIG_13(DoubleImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(RGB888Image image, RGB888Pixel value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_14(RGB888Image.getCPtr(image), RGB888Pixel.getCPtr(value), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(RGB888Image image, RGB888Pixel value) {
    VisionLabPINVOKE.SetBorders__SWIG_15(RGB888Image.getCPtr(image), RGB888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(RGB161616Image image, RGB161616Pixel value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_16(RGB161616Image.getCPtr(image), RGB161616Pixel.getCPtr(value), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(RGB161616Image image, RGB161616Pixel value) {
    VisionLabPINVOKE.SetBorders__SWIG_17(RGB161616Image.getCPtr(image), RGB161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(HSV888Image image, HSV888Pixel value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_18(HSV888Image.getCPtr(image), HSV888Pixel.getCPtr(value), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(HSV888Image image, HSV888Pixel value) {
    VisionLabPINVOKE.SetBorders__SWIG_19(HSV888Image.getCPtr(image), HSV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(HSV161616Image image, HSV161616Pixel value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_20(HSV161616Image.getCPtr(image), HSV161616Pixel.getCPtr(value), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(HSV161616Image image, HSV161616Pixel value) {
    VisionLabPINVOKE.SetBorders__SWIG_21(HSV161616Image.getCPtr(image), HSV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(YUV888Image image, YUV888Pixel value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_22(YUV888Image.getCPtr(image), YUV888Pixel.getCPtr(value), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(YUV888Image image, YUV888Pixel value) {
    VisionLabPINVOKE.SetBorders__SWIG_23(YUV888Image.getCPtr(image), YUV888Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(YUV161616Image image, YUV161616Pixel value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_24(YUV161616Image.getCPtr(image), YUV161616Pixel.getCPtr(value), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(YUV161616Image image, YUV161616Pixel value) {
    VisionLabPINVOKE.SetBorders__SWIG_25(YUV161616Image.getCPtr(image), YUV161616Pixel.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(ComplexFloatImage image, SWIGTYPE_p_std__complexT_float_t value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_26(ComplexFloatImage.getCPtr(image), SWIGTYPE_p_std__complexT_float_t.getCPtr(value), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(ComplexFloatImage image, SWIGTYPE_p_std__complexT_float_t value) {
    VisionLabPINVOKE.SetBorders__SWIG_27(ComplexFloatImage.getCPtr(image), SWIGTYPE_p_std__complexT_float_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(ComplexDoubleImage image, SWIGTYPE_p_std__complexT_double_t value, Border borders) {
    VisionLabPINVOKE.SetBorders__SWIG_28(ComplexDoubleImage.getCPtr(image), SWIGTYPE_p_std__complexT_double_t.getCPtr(value), (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetBorders(ComplexDoubleImage image, SWIGTYPE_p_std__complexT_double_t value) {
    VisionLabPINVOKE.SetBorders__SWIG_29(ComplexDoubleImage.getCPtr(image), SWIGTYPE_p_std__complexT_double_t.getCPtr(value));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(ByteImage src, ByteImage dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(Int8Image src, Int8Image dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(Int16Image src, Int16Image dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(Int32Image src, Int32Image dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(FloatImage src, FloatImage dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(DoubleImage src, DoubleImage dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(RGB888Image src, RGB888Image dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_7(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(RGB161616Image src, RGB161616Image dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_8(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(HSV888Image src, HSV888Image dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_9(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(HSV161616Image src, HSV161616Image dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_10(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(YUV888Image src, YUV888Image dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_11(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(YUV161616Image src, YUV161616Image dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_12(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(ComplexFloatImage src, ComplexFloatImage dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_13(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SwapQuadrants(ComplexDoubleImage src, ComplexDoubleImage dest) {
    VisionLabPINVOKE.SwapQuadrants__SWIG_14(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(ByteImage src, ByteImage dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(Int8Image src, Int8Image dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(Int16Image src, Int16Image dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(Int32Image src, Int32Image dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(FloatImage src, FloatImage dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(DoubleImage src, DoubleImage dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(RGB888Image src, RGB888Image dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_7(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(RGB161616Image src, RGB161616Image dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_8(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(HSV888Image src, HSV888Image dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_9(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(HSV161616Image src, HSV161616Image dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_10(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(YUV888Image src, YUV888Image dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_11(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(YUV161616Image src, YUV161616Image dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_12(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(ComplexFloatImage src, ComplexFloatImage dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_13(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TranslateCyclic(ComplexDoubleImage src, ComplexDoubleImage dest, XYCoord vector) {
    VisionLabPINVOKE.TranslateCyclic__SWIG_14(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), XYCoord.getCPtr(vector));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(ByteImage src, ByteImage dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, byte border) {
    VisionLabPINVOKE.Warp__SWIG_2(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(ByteImage src, ByteImage dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, byte border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_3(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(Int8Image src, Int8Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, char border) {
    VisionLabPINVOKE.Warp__SWIG_4(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(Int8Image src, Int8Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, char border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_5(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(Int16Image src, Int16Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, short border) {
    VisionLabPINVOKE.Warp__SWIG_6(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(Int16Image src, Int16Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, short border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_7(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(Int32Image src, Int32Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, int border) {
    VisionLabPINVOKE.Warp__SWIG_8(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(Int32Image src, Int32Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, int border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_9(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(FloatImage src, FloatImage dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, float border) {
    VisionLabPINVOKE.Warp__SWIG_10(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(FloatImage src, FloatImage dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, float border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_11(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(DoubleImage src, DoubleImage dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, double border) {
    VisionLabPINVOKE.Warp__SWIG_12(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(DoubleImage src, DoubleImage dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, double border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_13(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, border, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(RGB888Image src, RGB888Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, RGB888Pixel border) {
    VisionLabPINVOKE.Warp__SWIG_14(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, RGB888Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(RGB888Image src, RGB888Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, RGB888Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_15(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, RGB888Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(RGB161616Image src, RGB161616Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, RGB161616Pixel border) {
    VisionLabPINVOKE.Warp__SWIG_16(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, RGB161616Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(RGB161616Image src, RGB161616Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, RGB161616Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_17(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, RGB161616Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(HSV888Image src, HSV888Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, HSV888Pixel border) {
    VisionLabPINVOKE.Warp__SWIG_18(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, HSV888Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(HSV888Image src, HSV888Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, HSV888Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_19(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, HSV888Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(HSV161616Image src, HSV161616Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, HSV161616Pixel border) {
    VisionLabPINVOKE.Warp__SWIG_20(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, HSV161616Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(HSV161616Image src, HSV161616Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, HSV161616Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_21(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, HSV161616Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(YUV888Image src, YUV888Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, YUV888Pixel border) {
    VisionLabPINVOKE.Warp__SWIG_22(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, YUV888Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(YUV888Image src, YUV888Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, YUV888Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_23(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, YUV888Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(YUV161616Image src, YUV161616Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, YUV161616Pixel border) {
    VisionLabPINVOKE.Warp__SWIG_24(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, YUV161616Pixel.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(YUV161616Image src, YUV161616Image dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, YUV161616Pixel border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_25(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, YUV161616Pixel.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(ComplexFloatImage src, ComplexFloatImage dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, SWIGTYPE_p_std__complexT_float_t border) {
    VisionLabPINVOKE.Warp__SWIG_26(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, SWIGTYPE_p_std__complexT_float_t.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(ComplexFloatImage src, ComplexFloatImage dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, SWIGTYPE_p_std__complexT_float_t border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_27(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, SWIGTYPE_p_std__complexT_float_t.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(ComplexDoubleImage src, ComplexDoubleImage dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, SWIGTYPE_p_std__complexT_double_t border) {
    VisionLabPINVOKE.Warp__SWIG_28(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, SWIGTYPE_p_std__complexT_double_t.getCPtr(border));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Warp(ComplexDoubleImage src, ComplexDoubleImage dest, TransformDirection dir, Coord2D leftTop, Coord2D rightTop, Coord2D leftBottom, Coord2D rightBottom, int height, int width, SWIGTYPE_p_std__complexT_double_t border, PixelInterpolation pi) {
    VisionLabPINVOKE.Warp__SWIG_29(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), (int)dir, Coord2D.getCPtr(leftTop), Coord2D.getCPtr(rightTop), Coord2D.getCPtr(leftBottom), Coord2D.getCPtr(rightBottom), height, width, SWIGTYPE_p_std__complexT_double_t.getCPtr(border), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XYCoordTabFromImage(ByteImage image, vector_XYCoord tab, byte pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_2(ByteImage.getCPtr(image), vector_XYCoord.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(ByteImage image, vector_XYCoord tab, byte low, byte high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_3(ByteImage.getCPtr(image), vector_XYCoord.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(Int8Image image, vector_XYCoord tab, char pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_4(Int8Image.getCPtr(image), vector_XYCoord.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(Int8Image image, vector_XYCoord tab, char low, char high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_5(Int8Image.getCPtr(image), vector_XYCoord.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(Int16Image image, vector_XYCoord tab, short pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_6(Int16Image.getCPtr(image), vector_XYCoord.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(Int16Image image, vector_XYCoord tab, short low, short high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_7(Int16Image.getCPtr(image), vector_XYCoord.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(Int32Image image, vector_XYCoord tab, int pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_8(Int32Image.getCPtr(image), vector_XYCoord.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(Int32Image image, vector_XYCoord tab, int low, int high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_9(Int32Image.getCPtr(image), vector_XYCoord.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(FloatImage image, vector_XYCoord tab, float pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_10(FloatImage.getCPtr(image), vector_XYCoord.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(FloatImage image, vector_XYCoord tab, float low, float high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_11(FloatImage.getCPtr(image), vector_XYCoord.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(DoubleImage image, vector_XYCoord tab, double pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_12(DoubleImage.getCPtr(image), vector_XYCoord.getCPtr(tab), pixel);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(DoubleImage image, vector_XYCoord tab, double low, double high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_13(DoubleImage.getCPtr(image), vector_XYCoord.getCPtr(tab), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(RGB888Image image, vector_XYCoord tab, RGB888Pixel pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_14(RGB888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), RGB888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(RGB888Image image, vector_XYCoord tab, RGB888Pixel low, RGB888Pixel high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_15(RGB888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), RGB888Pixel.getCPtr(low), RGB888Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(RGB161616Image image, vector_XYCoord tab, RGB161616Pixel pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_16(RGB161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), RGB161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(RGB161616Image image, vector_XYCoord tab, RGB161616Pixel low, RGB161616Pixel high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_17(RGB161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), RGB161616Pixel.getCPtr(low), RGB161616Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(HSV888Image image, vector_XYCoord tab, HSV888Pixel pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_18(HSV888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), HSV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(HSV888Image image, vector_XYCoord tab, HSV888Pixel low, HSV888Pixel high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_19(HSV888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), HSV888Pixel.getCPtr(low), HSV888Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(HSV161616Image image, vector_XYCoord tab, HSV161616Pixel pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_20(HSV161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), HSV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(HSV161616Image image, vector_XYCoord tab, HSV161616Pixel low, HSV161616Pixel high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_21(HSV161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), HSV161616Pixel.getCPtr(low), HSV161616Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(YUV888Image image, vector_XYCoord tab, YUV888Pixel pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_22(YUV888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), YUV888Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(YUV888Image image, vector_XYCoord tab, YUV888Pixel low, YUV888Pixel high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_23(YUV888Image.getCPtr(image), vector_XYCoord.getCPtr(tab), YUV888Pixel.getCPtr(low), YUV888Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(YUV161616Image image, vector_XYCoord tab, YUV161616Pixel pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_24(YUV161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), YUV161616Pixel.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(YUV161616Image image, vector_XYCoord tab, YUV161616Pixel low, YUV161616Pixel high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_25(YUV161616Image.getCPtr(image), vector_XYCoord.getCPtr(tab), YUV161616Pixel.getCPtr(low), YUV161616Pixel.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(ComplexFloatImage image, vector_XYCoord tab, SWIGTYPE_p_std__complexT_float_t pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_26(ComplexFloatImage.getCPtr(image), vector_XYCoord.getCPtr(tab), SWIGTYPE_p_std__complexT_float_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(ComplexFloatImage image, vector_XYCoord tab, SWIGTYPE_p_std__complexT_float_t low, SWIGTYPE_p_std__complexT_float_t high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_27(ComplexFloatImage.getCPtr(image), vector_XYCoord.getCPtr(tab), SWIGTYPE_p_std__complexT_float_t.getCPtr(low), SWIGTYPE_p_std__complexT_float_t.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(ComplexDoubleImage image, vector_XYCoord tab, SWIGTYPE_p_std__complexT_double_t pixel) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_28(ComplexDoubleImage.getCPtr(image), vector_XYCoord.getCPtr(tab), SWIGTYPE_p_std__complexT_double_t.getCPtr(pixel));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XYCoordTabFromImage(ComplexDoubleImage image, vector_XYCoord tab, SWIGTYPE_p_std__complexT_double_t low, SWIGTYPE_p_std__complexT_double_t high) {
    int ret = VisionLabPINVOKE.XYCoordTabFromImage__SWIG_29(ComplexDoubleImage.getCPtr(image), vector_XYCoord.getCPtr(tab), SWIGTYPE_p_std__complexT_double_t.getCPtr(low), SWIGTYPE_p_std__complexT_double_t.getCPtr(high));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Zoom(ByteImage src, ByteImage dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_4(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(ByteImage src, ByteImage dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_5(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(ByteImage src, ByteImage dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_6(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(ByteImage src, ByteImage dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_7(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int8Image src, Int8Image dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int8Image src, Int8Image dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_9(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int8Image src, Int8Image dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_10(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int8Image src, Int8Image dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_11(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int16Image src, Int16Image dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_12(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int16Image src, Int16Image dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_13(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int16Image src, Int16Image dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_14(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int16Image src, Int16Image dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_15(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int32Image src, Int32Image dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_16(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int32Image src, Int32Image dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_17(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int32Image src, Int32Image dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_18(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(Int32Image src, Int32Image dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_19(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(FloatImage src, FloatImage dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_20(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(FloatImage src, FloatImage dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_21(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(FloatImage src, FloatImage dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_22(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(FloatImage src, FloatImage dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_23(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(DoubleImage src, DoubleImage dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_24(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(DoubleImage src, DoubleImage dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_25(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(DoubleImage src, DoubleImage dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_26(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(DoubleImage src, DoubleImage dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_27(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(RGB888Image src, RGB888Image dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_28(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(RGB888Image src, RGB888Image dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_29(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(RGB888Image src, RGB888Image dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_30(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(RGB888Image src, RGB888Image dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_31(RGB888Image.getCPtr(src), RGB888Image.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(RGB161616Image src, RGB161616Image dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_32(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(RGB161616Image src, RGB161616Image dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_33(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(RGB161616Image src, RGB161616Image dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_34(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(RGB161616Image src, RGB161616Image dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_35(RGB161616Image.getCPtr(src), RGB161616Image.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(HSV888Image src, HSV888Image dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_36(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(HSV888Image src, HSV888Image dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_37(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(HSV888Image src, HSV888Image dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_38(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(HSV888Image src, HSV888Image dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_39(HSV888Image.getCPtr(src), HSV888Image.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(HSV161616Image src, HSV161616Image dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_40(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(HSV161616Image src, HSV161616Image dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_41(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(HSV161616Image src, HSV161616Image dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_42(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(HSV161616Image src, HSV161616Image dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_43(HSV161616Image.getCPtr(src), HSV161616Image.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(YUV888Image src, YUV888Image dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_44(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(YUV888Image src, YUV888Image dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_45(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(YUV888Image src, YUV888Image dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_46(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(YUV888Image src, YUV888Image dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_47(YUV888Image.getCPtr(src), YUV888Image.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(YUV161616Image src, YUV161616Image dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_48(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(YUV161616Image src, YUV161616Image dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_49(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(YUV161616Image src, YUV161616Image dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_50(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(YUV161616Image src, YUV161616Image dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_51(YUV161616Image.getCPtr(src), YUV161616Image.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(ComplexFloatImage src, ComplexFloatImage dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_52(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(ComplexFloatImage src, ComplexFloatImage dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_53(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(ComplexFloatImage src, ComplexFloatImage dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_54(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(ComplexFloatImage src, ComplexFloatImage dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_55(ComplexFloatImage.getCPtr(src), ComplexFloatImage.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(ComplexDoubleImage src, ComplexDoubleImage dest, double factorX, double factorY) {
    VisionLabPINVOKE.Zoom__SWIG_56(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), factorX, factorY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(ComplexDoubleImage src, ComplexDoubleImage dest, HeightWidth hw) {
    VisionLabPINVOKE.Zoom__SWIG_57(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), HeightWidth.getCPtr(hw));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(ComplexDoubleImage src, ComplexDoubleImage dest, double factorX, double factorY, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_58(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), factorX, factorY, (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Zoom(ComplexDoubleImage src, ComplexDoubleImage dest, HeightWidth hw, PixelInterpolation pi) {
    VisionLabPINVOKE.Zoom__SWIG_59(ComplexDoubleImage.getCPtr(src), ComplexDoubleImage.getCPtr(dest), HeightWidth.getCPtr(hw), (int)pi);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Abs(ByteImage image) {
    VisionLabPINVOKE.Abs__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Abs(Int8Image image) {
    VisionLabPINVOKE.Abs__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Abs(Int16Image image) {
    VisionLabPINVOKE.Abs__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Abs(Int32Image image) {
    VisionLabPINVOKE.Abs__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Abs(FloatImage image) {
    VisionLabPINVOKE.Abs__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Abs(DoubleImage image) {
    VisionLabPINVOKE.Abs__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static byte AveragePixel(ByteImage image) {
    byte ret = VisionLabPINVOKE.AveragePixel__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char AveragePixel(Int8Image image) {
    char ret = VisionLabPINVOKE.AveragePixel__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static short AveragePixel(Int16Image image) {
    short ret = VisionLabPINVOKE.AveragePixel__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int AveragePixel(Int32Image image) {
    int ret = VisionLabPINVOKE.AveragePixel__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float AveragePixel(FloatImage image) {
    float ret = VisionLabPINVOKE.AveragePixel__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double AveragePixel(DoubleImage image) {
    double ret = VisionLabPINVOKE.AveragePixel__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Binning(ByteImage src, ByteImage dest, byte height, byte width, BinningMode mode) {
    VisionLabPINVOKE.Binning__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), height, width, (int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Binning(Int8Image src, Int8Image dest, char height, char width, BinningMode mode) {
    VisionLabPINVOKE.Binning__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), height, width, (int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Binning(Int16Image src, Int16Image dest, short height, short width, BinningMode mode) {
    VisionLabPINVOKE.Binning__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), height, width, (int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Binning(Int32Image src, Int32Image dest, int height, int width, BinningMode mode) {
    VisionLabPINVOKE.Binning__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), height, width, (int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Binning(FloatImage src, FloatImage dest, float height, float width, BinningMode mode) {
    VisionLabPINVOKE.Binning__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), height, width, (int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Binning(DoubleImage src, DoubleImage dest, double height, double width, BinningMode mode) {
    VisionLabPINVOKE.Binning__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), height, width, (int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Binning(ByteImage src, ByteImage dest, int height, int width, BinningMode mode) {
    VisionLabPINVOKE.Binning__SWIG_7(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), height, width, (int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Binning(Int8Image src, Int8Image dest, int height, int width, BinningMode mode) {
    VisionLabPINVOKE.Binning__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), height, width, (int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Binning(Int16Image src, Int16Image dest, int height, int width, BinningMode mode) {
    VisionLabPINVOKE.Binning__SWIG_9(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), height, width, (int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Binning(FloatImage src, FloatImage dest, int height, int width, BinningMode mode) {
    VisionLabPINVOKE.Binning__SWIG_10(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), height, width, (int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Binning(DoubleImage src, DoubleImage dest, int height, int width, BinningMode mode) {
    VisionLabPINVOKE.Binning__SWIG_11(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), height, width, (int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ClipPixelValue(ByteImage image, byte low, byte high) {
    VisionLabPINVOKE.ClipPixelValue__SWIG_1(ByteImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ClipPixelValue(Int8Image image, char low, char high) {
    VisionLabPINVOKE.ClipPixelValue__SWIG_2(Int8Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ClipPixelValue(Int16Image image, short low, short high) {
    VisionLabPINVOKE.ClipPixelValue__SWIG_3(Int16Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ClipPixelValue(Int32Image image, int low, int high) {
    VisionLabPINVOKE.ClipPixelValue__SWIG_4(Int32Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ClipPixelValue(FloatImage image, float low, float high) {
    VisionLabPINVOKE.ClipPixelValue__SWIG_5(FloatImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ClipPixelValue(DoubleImage image, double low, double high) {
    VisionLabPINVOKE.ClipPixelValue__SWIG_6(DoubleImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretch(ByteImage image, byte low, byte high) {
    VisionLabPINVOKE.ContrastStretch__SWIG_1(ByteImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretch(Int8Image image, char low, char high) {
    VisionLabPINVOKE.ContrastStretch__SWIG_2(Int8Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretch(Int16Image image, short low, short high) {
    VisionLabPINVOKE.ContrastStretch__SWIG_3(Int16Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretch(Int32Image image, int low, int high) {
    VisionLabPINVOKE.ContrastStretch__SWIG_4(Int32Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretch(FloatImage image, float low, float high) {
    VisionLabPINVOKE.ContrastStretch__SWIG_5(FloatImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ContrastStretch(DoubleImage image, double low, double high) {
    VisionLabPINVOKE.ContrastStretch__SWIG_6(DoubleImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CosineWindow(ByteImage image, double multiplier) {
    VisionLabPINVOKE.CosineWindow__SWIG_1(ByteImage.getCPtr(image), multiplier);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CosineWindow(Int8Image image, double multiplier) {
    VisionLabPINVOKE.CosineWindow__SWIG_2(Int8Image.getCPtr(image), multiplier);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CosineWindow(Int16Image image, double multiplier) {
    VisionLabPINVOKE.CosineWindow__SWIG_3(Int16Image.getCPtr(image), multiplier);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CosineWindow(Int32Image image, double multiplier) {
    VisionLabPINVOKE.CosineWindow__SWIG_4(Int32Image.getCPtr(image), multiplier);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CosineWindow(FloatImage image, double multiplier) {
    VisionLabPINVOKE.CosineWindow__SWIG_5(FloatImage.getCPtr(image), multiplier);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CosineWindow(DoubleImage image, double multiplier) {
    VisionLabPINVOKE.CosineWindow__SWIG_6(DoubleImage.getCPtr(image), multiplier);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int CountLabels(ByteImage image, byte low, byte high) {
    int ret = VisionLabPINVOKE.CountLabels__SWIG_1(ByteImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountLabels(Int8Image image, char low, char high) {
    int ret = VisionLabPINVOKE.CountLabels__SWIG_2(Int8Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountLabels(Int16Image image, short low, short high) {
    int ret = VisionLabPINVOKE.CountLabels__SWIG_3(Int16Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountLabels(Int32Image image, int low, int high) {
    int ret = VisionLabPINVOKE.CountLabels__SWIG_4(Int32Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountLabels(FloatImage image, float low, float high) {
    int ret = VisionLabPINVOKE.CountLabels__SWIG_5(FloatImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountLabels(DoubleImage image, double low, double high) {
    int ret = VisionLabPINVOKE.CountLabels__SWIG_6(DoubleImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixels(ByteImage image, byte low, byte high) {
    int ret = VisionLabPINVOKE.CountPixels__SWIG_1(ByteImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixels(Int8Image image, char low, char high) {
    int ret = VisionLabPINVOKE.CountPixels__SWIG_2(Int8Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixels(Int16Image image, short low, short high) {
    int ret = VisionLabPINVOKE.CountPixels__SWIG_3(Int16Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixels(Int32Image image, int low, int high) {
    int ret = VisionLabPINVOKE.CountPixels__SWIG_4(Int32Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixels(FloatImage image, float low, float high) {
    int ret = VisionLabPINVOKE.CountPixels__SWIG_5(FloatImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CountPixels(DoubleImage image, double low, double high) {
    int ret = VisionLabPINVOKE.CountPixels__SWIG_6(DoubleImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FindFirstEdges(ByteImage src, ByteImage dest, byte minEdge, ViewPoint viewPoint) {
    VisionLabPINVOKE.FindFirstEdges__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), minEdge, (int)viewPoint);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindFirstEdges(Int8Image src, Int8Image dest, char minEdge, ViewPoint viewPoint) {
    VisionLabPINVOKE.FindFirstEdges__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), minEdge, (int)viewPoint);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindFirstEdges(Int16Image src, Int16Image dest, short minEdge, ViewPoint viewPoint) {
    VisionLabPINVOKE.FindFirstEdges__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), minEdge, (int)viewPoint);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindFirstEdges(Int32Image src, Int32Image dest, int minEdge, ViewPoint viewPoint) {
    VisionLabPINVOKE.FindFirstEdges__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), minEdge, (int)viewPoint);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindFirstEdges(FloatImage src, FloatImage dest, float minEdge, ViewPoint viewPoint) {
    VisionLabPINVOKE.FindFirstEdges__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), minEdge, (int)viewPoint);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindFirstEdges(DoubleImage src, DoubleImage dest, double minEdge, ViewPoint viewPoint) {
    VisionLabPINVOKE.FindFirstEdges__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), minEdge, (int)viewPoint);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindFirstTransitions(ByteImage src, ByteImage dest, byte threshold, ViewPoint viewPoint, ObjectBrightness objectBrightness) {
    VisionLabPINVOKE.FindFirstTransitions__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), threshold, (int)viewPoint, (int)objectBrightness);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindFirstTransitions(Int8Image src, Int8Image dest, char threshold, ViewPoint viewPoint, ObjectBrightness objectBrightness) {
    VisionLabPINVOKE.FindFirstTransitions__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), threshold, (int)viewPoint, (int)objectBrightness);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindFirstTransitions(Int16Image src, Int16Image dest, short threshold, ViewPoint viewPoint, ObjectBrightness objectBrightness) {
    VisionLabPINVOKE.FindFirstTransitions__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), threshold, (int)viewPoint, (int)objectBrightness);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindFirstTransitions(Int32Image src, Int32Image dest, int threshold, ViewPoint viewPoint, ObjectBrightness objectBrightness) {
    VisionLabPINVOKE.FindFirstTransitions__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), threshold, (int)viewPoint, (int)objectBrightness);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindFirstTransitions(FloatImage src, FloatImage dest, float threshold, ViewPoint viewPoint, ObjectBrightness objectBrightness) {
    VisionLabPINVOKE.FindFirstTransitions__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), threshold, (int)viewPoint, (int)objectBrightness);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindFirstTransitions(DoubleImage src, DoubleImage dest, double threshold, ViewPoint viewPoint, ObjectBrightness objectBrightness) {
    VisionLabPINVOKE.FindFirstTransitions__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), threshold, (int)viewPoint, (int)objectBrightness);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShape(ByteImage image, XYCoord centre, double sigma, double max) {
    VisionLabPINVOKE.GaussianShape__SWIG_1(ByteImage.getCPtr(image), XYCoord.getCPtr(centre), sigma, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShape(Int8Image image, XYCoord centre, double sigma, double max) {
    VisionLabPINVOKE.GaussianShape__SWIG_2(Int8Image.getCPtr(image), XYCoord.getCPtr(centre), sigma, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShape(Int16Image image, XYCoord centre, double sigma, double max) {
    VisionLabPINVOKE.GaussianShape__SWIG_3(Int16Image.getCPtr(image), XYCoord.getCPtr(centre), sigma, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShape(Int32Image image, XYCoord centre, double sigma, double max) {
    VisionLabPINVOKE.GaussianShape__SWIG_4(Int32Image.getCPtr(image), XYCoord.getCPtr(centre), sigma, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShape(FloatImage image, XYCoord centre, double sigma, double max) {
    VisionLabPINVOKE.GaussianShape__SWIG_5(FloatImage.getCPtr(image), XYCoord.getCPtr(centre), sigma, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShape(DoubleImage image, XYCoord centre, double sigma, double max) {
    VisionLabPINVOKE.GaussianShape__SWIG_6(DoubleImage.getCPtr(image), XYCoord.getCPtr(centre), sigma, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShapeR(ByteImage image, XYCoord centre, double r, double max) {
    VisionLabPINVOKE.GaussianShapeR__SWIG_1(ByteImage.getCPtr(image), XYCoord.getCPtr(centre), r, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShapeR(Int8Image image, XYCoord centre, double r, double max) {
    VisionLabPINVOKE.GaussianShapeR__SWIG_2(Int8Image.getCPtr(image), XYCoord.getCPtr(centre), r, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShapeR(Int16Image image, XYCoord centre, double r, double max) {
    VisionLabPINVOKE.GaussianShapeR__SWIG_3(Int16Image.getCPtr(image), XYCoord.getCPtr(centre), r, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShapeR(Int32Image image, XYCoord centre, double r, double max) {
    VisionLabPINVOKE.GaussianShapeR__SWIG_4(Int32Image.getCPtr(image), XYCoord.getCPtr(centre), r, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShapeR(FloatImage image, XYCoord centre, double r, double max) {
    VisionLabPINVOKE.GaussianShapeR__SWIG_5(FloatImage.getCPtr(image), XYCoord.getCPtr(centre), r, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GaussianShapeR(DoubleImage image, XYCoord centre, double r, double max) {
    VisionLabPINVOKE.GaussianShapeR__SWIG_6(DoubleImage.getCPtr(image), XYCoord.getCPtr(centre), r, max);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(ByteImage src, ByteImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(ByteImage src, Int8Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_2(ByteImage.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(ByteImage src, Int16Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_3(ByteImage.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(ByteImage src, Int32Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_4(ByteImage.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(ByteImage src, FloatImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_5(ByteImage.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(ByteImage src, DoubleImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_6(ByteImage.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int8Image src, ByteImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_7(Int8Image.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int8Image src, Int8Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int8Image src, Int16Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_9(Int8Image.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int8Image src, Int32Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_10(Int8Image.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int8Image src, FloatImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_11(Int8Image.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int8Image src, DoubleImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_12(Int8Image.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int16Image src, ByteImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_13(Int16Image.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int16Image src, Int8Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_14(Int16Image.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int16Image src, Int16Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_15(Int16Image.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int16Image src, Int32Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_16(Int16Image.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int16Image src, FloatImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_17(Int16Image.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int16Image src, DoubleImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_18(Int16Image.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int32Image src, ByteImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_19(Int32Image.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int32Image src, Int8Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_20(Int32Image.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int32Image src, Int16Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_21(Int32Image.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int32Image src, Int32Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_22(Int32Image.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int32Image src, FloatImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_23(Int32Image.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(Int32Image src, DoubleImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_24(Int32Image.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(FloatImage src, ByteImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_25(FloatImage.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(FloatImage src, Int8Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_26(FloatImage.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(FloatImage src, Int16Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_27(FloatImage.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(FloatImage src, Int32Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_28(FloatImage.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(FloatImage src, FloatImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_29(FloatImage.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(FloatImage src, DoubleImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_30(FloatImage.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(DoubleImage src, ByteImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_31(DoubleImage.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(DoubleImage src, Int8Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_32(DoubleImage.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(DoubleImage src, Int16Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_33(DoubleImage.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(DoubleImage src, Int32Image dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_34(DoubleImage.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(DoubleImage src, FloatImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_35(DoubleImage.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OrdImageConversion(DoubleImage src, DoubleImage dest) {
    VisionLabPINVOKE.OrdImageConversion__SWIG_36(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Difference(ByteImage dest, ByteImage src) {
    VisionLabPINVOKE.Difference__SWIG_1(ByteImage.getCPtr(dest), ByteImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Difference(Int8Image dest, Int8Image src) {
    VisionLabPINVOKE.Difference__SWIG_2(Int8Image.getCPtr(dest), Int8Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Difference(Int16Image dest, Int16Image src) {
    VisionLabPINVOKE.Difference__SWIG_3(Int16Image.getCPtr(dest), Int16Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Difference(Int32Image dest, Int32Image src) {
    VisionLabPINVOKE.Difference__SWIG_4(Int32Image.getCPtr(dest), Int32Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Difference(FloatImage dest, FloatImage src) {
    VisionLabPINVOKE.Difference__SWIG_5(FloatImage.getCPtr(dest), FloatImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Difference(DoubleImage dest, DoubleImage src) {
    VisionLabPINVOKE.Difference__SWIG_6(DoubleImage.getCPtr(dest), DoubleImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Gamma(ByteImage image, double gamma) {
    VisionLabPINVOKE.Gamma__SWIG_1(ByteImage.getCPtr(image), gamma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Gamma(Int8Image image, double gamma) {
    VisionLabPINVOKE.Gamma__SWIG_2(Int8Image.getCPtr(image), gamma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Gamma(Int16Image image, double gamma) {
    VisionLabPINVOKE.Gamma__SWIG_3(Int16Image.getCPtr(image), gamma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Gamma(Int32Image image, double gamma) {
    VisionLabPINVOKE.Gamma__SWIG_4(Int32Image.getCPtr(image), gamma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Gamma(FloatImage image, double gamma) {
    VisionLabPINVOKE.Gamma__SWIG_5(FloatImage.getCPtr(image), gamma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Gamma(DoubleImage image, double gamma) {
    VisionLabPINVOKE.Gamma__SWIG_6(DoubleImage.getCPtr(image), gamma);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double InFocusValue(ByteImage image, int lowestFreqNr) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_2(ByteImage.getCPtr(image), lowestFreqNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double InFocusValue(ByteImage image) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_3(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double InFocusValue(Int8Image image, int lowestFreqNr) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_4(Int8Image.getCPtr(image), lowestFreqNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double InFocusValue(Int8Image image) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_5(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double InFocusValue(Int16Image image, int lowestFreqNr) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_6(Int16Image.getCPtr(image), lowestFreqNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double InFocusValue(Int16Image image) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_7(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double InFocusValue(Int32Image image, int lowestFreqNr) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_8(Int32Image.getCPtr(image), lowestFreqNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double InFocusValue(Int32Image image) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_9(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double InFocusValue(FloatImage image, int lowestFreqNr) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_10(FloatImage.getCPtr(image), lowestFreqNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double InFocusValue(FloatImage image) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_11(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double InFocusValue(DoubleImage image, int lowestFreqNr) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_12(DoubleImage.getCPtr(image), lowestFreqNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double InFocusValue(DoubleImage image) {
    double ret = VisionLabPINVOKE.InFocusValue__SWIG_13(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Invert(ByteImage image) {
    VisionLabPINVOKE.Invert__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Invert(Int8Image image) {
    VisionLabPINVOKE.Invert__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Invert(Int16Image image) {
    VisionLabPINVOKE.Invert__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Invert(Int32Image image) {
    VisionLabPINVOKE.Invert__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Invert(FloatImage image) {
    VisionLabPINVOKE.Invert__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Invert(DoubleImage image) {
    VisionLabPINVOKE.Invert__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool IsTheSame(ByteImage i1, ByteImage i2, byte diff) {
    bool ret = VisionLabPINVOKE.IsTheSame__SWIG_2(ByteImage.getCPtr(i1), ByteImage.getCPtr(i2), diff);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsTheSame(Int8Image i1, Int8Image i2, char diff) {
    bool ret = VisionLabPINVOKE.IsTheSame__SWIG_3(Int8Image.getCPtr(i1), Int8Image.getCPtr(i2), diff);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsTheSame(Int16Image i1, Int16Image i2, short diff) {
    bool ret = VisionLabPINVOKE.IsTheSame__SWIG_4(Int16Image.getCPtr(i1), Int16Image.getCPtr(i2), diff);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsTheSame(Int32Image i1, Int32Image i2, int diff) {
    bool ret = VisionLabPINVOKE.IsTheSame__SWIG_5(Int32Image.getCPtr(i1), Int32Image.getCPtr(i2), diff);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsTheSame(FloatImage i1, FloatImage i2, float diff) {
    bool ret = VisionLabPINVOKE.IsTheSame__SWIG_6(FloatImage.getCPtr(i1), FloatImage.getCPtr(i2), diff);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsTheSame(DoubleImage i1, DoubleImage i2, double diff) {
    bool ret = VisionLabPINVOKE.IsTheSame__SWIG_7(DoubleImage.getCPtr(i1), DoubleImage.getCPtr(i2), diff);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static byte LowestButZeroPixel(ByteImage image) {
    byte ret = VisionLabPINVOKE.LowestButZeroPixel__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char LowestButZeroPixel(Int8Image image) {
    char ret = VisionLabPINVOKE.LowestButZeroPixel__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static short LowestButZeroPixel(Int16Image image) {
    short ret = VisionLabPINVOKE.LowestButZeroPixel__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int LowestButZeroPixel(Int32Image image) {
    int ret = VisionLabPINVOKE.LowestButZeroPixel__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float LowestButZeroPixel(FloatImage image) {
    float ret = VisionLabPINVOKE.LowestButZeroPixel__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double LowestButZeroPixel(DoubleImage image) {
    double ret = VisionLabPINVOKE.LowestButZeroPixel__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Max(ByteImage dest, ByteImage src) {
    VisionLabPINVOKE.Max__SWIG_1(ByteImage.getCPtr(dest), ByteImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Max(Int8Image dest, Int8Image src) {
    VisionLabPINVOKE.Max__SWIG_2(Int8Image.getCPtr(dest), Int8Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Max(Int16Image dest, Int16Image src) {
    VisionLabPINVOKE.Max__SWIG_3(Int16Image.getCPtr(dest), Int16Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Max(Int32Image dest, Int32Image src) {
    VisionLabPINVOKE.Max__SWIG_4(Int32Image.getCPtr(dest), Int32Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Max(FloatImage dest, FloatImage src) {
    VisionLabPINVOKE.Max__SWIG_5(FloatImage.getCPtr(dest), FloatImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Max(DoubleImage dest, DoubleImage src) {
    VisionLabPINVOKE.Max__SWIG_6(DoubleImage.getCPtr(dest), DoubleImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static byte MaxLabel(ByteImage image) {
    byte ret = VisionLabPINVOKE.MaxLabel__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char MaxLabel(Int8Image image) {
    char ret = VisionLabPINVOKE.MaxLabel__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static short MaxLabel(Int16Image image) {
    short ret = VisionLabPINVOKE.MaxLabel__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int MaxLabel(Int32Image image) {
    int ret = VisionLabPINVOKE.MaxLabel__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float MaxLabel(FloatImage image) {
    float ret = VisionLabPINVOKE.MaxLabel__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double MaxLabel(DoubleImage image) {
    double ret = VisionLabPINVOKE.MaxLabel__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static byte MaxPixel(ByteImage image) {
    byte ret = VisionLabPINVOKE.MaxPixel__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char MaxPixel(Int8Image image) {
    char ret = VisionLabPINVOKE.MaxPixel__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static short MaxPixel(Int16Image image) {
    short ret = VisionLabPINVOKE.MaxPixel__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int MaxPixel(Int32Image image) {
    int ret = VisionLabPINVOKE.MaxPixel__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float MaxPixel(FloatImage image) {
    float ret = VisionLabPINVOKE.MaxPixel__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double MaxPixel(DoubleImage image) {
    double ret = VisionLabPINVOKE.MaxPixel__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Mean(ByteImage dest, ByteImage src) {
    VisionLabPINVOKE.Mean__SWIG_1(ByteImage.getCPtr(dest), ByteImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mean(Int8Image dest, Int8Image src) {
    VisionLabPINVOKE.Mean__SWIG_2(Int8Image.getCPtr(dest), Int8Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mean(Int16Image dest, Int16Image src) {
    VisionLabPINVOKE.Mean__SWIG_3(Int16Image.getCPtr(dest), Int16Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mean(Int32Image dest, Int32Image src) {
    VisionLabPINVOKE.Mean__SWIG_4(Int32Image.getCPtr(dest), Int32Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mean(FloatImage dest, FloatImage src) {
    VisionLabPINVOKE.Mean__SWIG_5(FloatImage.getCPtr(dest), FloatImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Mean(DoubleImage dest, DoubleImage src) {
    VisionLabPINVOKE.Mean__SWIG_6(DoubleImage.getCPtr(dest), DoubleImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Min(ByteImage dest, ByteImage src) {
    VisionLabPINVOKE.Min__SWIG_1(ByteImage.getCPtr(dest), ByteImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Min(Int8Image dest, Int8Image src) {
    VisionLabPINVOKE.Min__SWIG_2(Int8Image.getCPtr(dest), Int8Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Min(Int16Image dest, Int16Image src) {
    VisionLabPINVOKE.Min__SWIG_3(Int16Image.getCPtr(dest), Int16Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Min(Int32Image dest, Int32Image src) {
    VisionLabPINVOKE.Min__SWIG_4(Int32Image.getCPtr(dest), Int32Image.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Min(FloatImage dest, FloatImage src) {
    VisionLabPINVOKE.Min__SWIG_5(FloatImage.getCPtr(dest), FloatImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Min(DoubleImage dest, DoubleImage src) {
    VisionLabPINVOKE.Min__SWIG_6(DoubleImage.getCPtr(dest), DoubleImage.getCPtr(src));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static byte MinLabel(ByteImage image) {
    byte ret = VisionLabPINVOKE.MinLabel__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char MinLabel(Int8Image image) {
    char ret = VisionLabPINVOKE.MinLabel__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static short MinLabel(Int16Image image) {
    short ret = VisionLabPINVOKE.MinLabel__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int MinLabel(Int32Image image) {
    int ret = VisionLabPINVOKE.MinLabel__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float MinLabel(FloatImage image) {
    float ret = VisionLabPINVOKE.MinLabel__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double MinLabel(DoubleImage image) {
    double ret = VisionLabPINVOKE.MinLabel__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void MinMaxLabel(ByteImage image, ref byte minP, ref byte maxP) {
    VisionLabPINVOKE.MinMaxLabel__SWIG_1(ByteImage.getCPtr(image), ref minP, ref maxP);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinMaxLabel(Int8Image image, SWIGTYPE_p_char minP, SWIGTYPE_p_char maxP) {
    VisionLabPINVOKE.MinMaxLabel__SWIG_2(Int8Image.getCPtr(image), SWIGTYPE_p_char.getCPtr(minP), SWIGTYPE_p_char.getCPtr(maxP));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinMaxLabel(Int16Image image, ref short minP, ref short maxP) {
    VisionLabPINVOKE.MinMaxLabel__SWIG_3(Int16Image.getCPtr(image), ref minP, ref maxP);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinMaxLabel(Int32Image image, ref int minP, ref int maxP) {
    VisionLabPINVOKE.MinMaxLabel__SWIG_4(Int32Image.getCPtr(image), ref minP, ref maxP);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinMaxLabel(FloatImage image, ref float minP, ref float maxP) {
    VisionLabPINVOKE.MinMaxLabel__SWIG_5(FloatImage.getCPtr(image), ref minP, ref maxP);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinMaxLabel(DoubleImage image, ref double minP, ref double maxP) {
    VisionLabPINVOKE.MinMaxLabel__SWIG_6(DoubleImage.getCPtr(image), ref minP, ref maxP);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinMaxPixel(ByteImage image, ref byte minP, ref byte maxP) {
    VisionLabPINVOKE.MinMaxPixel__SWIG_1(ByteImage.getCPtr(image), ref minP, ref maxP);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinMaxPixel(Int8Image image, SWIGTYPE_p_char minP, SWIGTYPE_p_char maxP) {
    VisionLabPINVOKE.MinMaxPixel__SWIG_2(Int8Image.getCPtr(image), SWIGTYPE_p_char.getCPtr(minP), SWIGTYPE_p_char.getCPtr(maxP));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinMaxPixel(Int16Image image, ref short minP, ref short maxP) {
    VisionLabPINVOKE.MinMaxPixel__SWIG_3(Int16Image.getCPtr(image), ref minP, ref maxP);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinMaxPixel(Int32Image image, ref int minP, ref int maxP) {
    VisionLabPINVOKE.MinMaxPixel__SWIG_4(Int32Image.getCPtr(image), ref minP, ref maxP);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinMaxPixel(FloatImage image, ref float minP, ref float maxP) {
    VisionLabPINVOKE.MinMaxPixel__SWIG_5(FloatImage.getCPtr(image), ref minP, ref maxP);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MinMaxPixel(DoubleImage image, ref double minP, ref double maxP) {
    VisionLabPINVOKE.MinMaxPixel__SWIG_6(DoubleImage.getCPtr(image), ref minP, ref maxP);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static byte MinPixel(ByteImage image) {
    byte ret = VisionLabPINVOKE.MinPixel__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char MinPixel(Int8Image image) {
    char ret = VisionLabPINVOKE.MinPixel__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static short MinPixel(Int16Image image) {
    short ret = VisionLabPINVOKE.MinPixel__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int MinPixel(Int32Image image) {
    int ret = VisionLabPINVOKE.MinPixel__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float MinPixel(FloatImage image) {
    float ret = VisionLabPINVOKE.MinPixel__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double MinPixel(DoubleImage image) {
    double ret = VisionLabPINVOKE.MinPixel__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Noise(ByteImage image, double probability, byte low, byte high) {
    VisionLabPINVOKE.Noise__SWIG_1(ByteImage.getCPtr(image), probability, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Noise(Int8Image image, double probability, char low, char high) {
    VisionLabPINVOKE.Noise__SWIG_2(Int8Image.getCPtr(image), probability, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Noise(Int16Image image, double probability, short low, short high) {
    VisionLabPINVOKE.Noise__SWIG_3(Int16Image.getCPtr(image), probability, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Noise(Int32Image image, double probability, int low, int high) {
    VisionLabPINVOKE.Noise__SWIG_4(Int32Image.getCPtr(image), probability, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Noise(FloatImage image, double probability, float low, float high) {
    VisionLabPINVOKE.Noise__SWIG_5(FloatImage.getCPtr(image), probability, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Noise(DoubleImage image, double probability, double low, double high) {
    VisionLabPINVOKE.Noise__SWIG_6(DoubleImage.getCPtr(image), probability, low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PolarStretch(ByteImage src, ByteImage dest, Coord2D centerPos, double beginAngle, double endAngle, int angleSteps, int maxRadius, byte borderValue, PixelInterpolation pixelInterpolation) {
    VisionLabPINVOKE.PolarStretch__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), Coord2D.getCPtr(centerPos), beginAngle, endAngle, angleSteps, maxRadius, borderValue, (int)pixelInterpolation);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PolarStretch(Int8Image src, Int8Image dest, Coord2D centerPos, double beginAngle, double endAngle, int angleSteps, int maxRadius, char borderValue, PixelInterpolation pixelInterpolation) {
    VisionLabPINVOKE.PolarStretch__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), Coord2D.getCPtr(centerPos), beginAngle, endAngle, angleSteps, maxRadius, borderValue, (int)pixelInterpolation);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PolarStretch(Int16Image src, Int16Image dest, Coord2D centerPos, double beginAngle, double endAngle, int angleSteps, int maxRadius, short borderValue, PixelInterpolation pixelInterpolation) {
    VisionLabPINVOKE.PolarStretch__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), Coord2D.getCPtr(centerPos), beginAngle, endAngle, angleSteps, maxRadius, borderValue, (int)pixelInterpolation);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PolarStretch(Int32Image src, Int32Image dest, Coord2D centerPos, double beginAngle, double endAngle, int angleSteps, int maxRadius, int borderValue, PixelInterpolation pixelInterpolation) {
    VisionLabPINVOKE.PolarStretch__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), Coord2D.getCPtr(centerPos), beginAngle, endAngle, angleSteps, maxRadius, borderValue, (int)pixelInterpolation);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PolarStretch(FloatImage src, FloatImage dest, Coord2D centerPos, double beginAngle, double endAngle, int angleSteps, int maxRadius, float borderValue, PixelInterpolation pixelInterpolation) {
    VisionLabPINVOKE.PolarStretch__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), Coord2D.getCPtr(centerPos), beginAngle, endAngle, angleSteps, maxRadius, borderValue, (int)pixelInterpolation);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PolarStretch(DoubleImage src, DoubleImage dest, Coord2D centerPos, double beginAngle, double endAngle, int angleSteps, int maxRadius, double borderValue, PixelInterpolation pixelInterpolation) {
    VisionLabPINVOKE.PolarStretch__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), Coord2D.getCPtr(centerPos), beginAngle, endAngle, angleSteps, maxRadius, borderValue, (int)pixelInterpolation);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(ByteImage imageX, ByteImage imageY) {
    VisionLabPINVOKE.Pow__SWIG_2(ByteImage.getCPtr(imageX), ByteImage.getCPtr(imageY));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(Int8Image imageX, Int8Image imageY) {
    VisionLabPINVOKE.Pow__SWIG_3(Int8Image.getCPtr(imageX), Int8Image.getCPtr(imageY));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(Int16Image imageX, Int16Image imageY) {
    VisionLabPINVOKE.Pow__SWIG_4(Int16Image.getCPtr(imageX), Int16Image.getCPtr(imageY));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(Int32Image imageX, Int32Image imageY) {
    VisionLabPINVOKE.Pow__SWIG_5(Int32Image.getCPtr(imageX), Int32Image.getCPtr(imageY));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(FloatImage imageX, FloatImage imageY) {
    VisionLabPINVOKE.Pow__SWIG_6(FloatImage.getCPtr(imageX), FloatImage.getCPtr(imageY));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(DoubleImage imageX, DoubleImage imageY) {
    VisionLabPINVOKE.Pow__SWIG_7(DoubleImage.getCPtr(imageX), DoubleImage.getCPtr(imageY));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(ByteImage image, byte value) {
    VisionLabPINVOKE.Pow__SWIG_8(ByteImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(Int8Image image, char value) {
    VisionLabPINVOKE.Pow__SWIG_9(Int8Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(Int16Image image, short value) {
    VisionLabPINVOKE.Pow__SWIG_10(Int16Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(Int32Image image, int value) {
    VisionLabPINVOKE.Pow__SWIG_11(Int32Image.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(FloatImage image, float value) {
    VisionLabPINVOKE.Pow__SWIG_12(FloatImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Pow(DoubleImage image, double value) {
    VisionLabPINVOKE.Pow__SWIG_13(DoubleImage.getCPtr(image), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RampPattern(ByteImage image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.RampPattern__SWIG_1(ByteImage.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RampPattern(Int8Image image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.RampPattern__SWIG_2(Int8Image.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RampPattern(Int16Image image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.RampPattern__SWIG_3(Int16Image.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RampPattern(Int32Image image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.RampPattern__SWIG_4(Int32Image.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RampPattern(FloatImage image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.RampPattern__SWIG_5(FloatImage.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RampPattern(DoubleImage image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.RampPattern__SWIG_6(DoubleImage.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double RATS(ByteImage image, byte minEdge, ref byte thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_2(ByteImage.getCPtr(image), minEdge, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATS(ByteImage image, ByteImage roi, byte minEdge, ref byte thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_3(ByteImage.getCPtr(image), ByteImage.getCPtr(roi), minEdge, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATS(Int8Image image, char minEdge, SWIGTYPE_p_char thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_4(Int8Image.getCPtr(image), minEdge, SWIGTYPE_p_char.getCPtr(thres));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATS(Int8Image image, Int8Image roi, char minEdge, SWIGTYPE_p_char thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_5(Int8Image.getCPtr(image), Int8Image.getCPtr(roi), minEdge, SWIGTYPE_p_char.getCPtr(thres));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATS(Int16Image image, short minEdge, ref short thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_6(Int16Image.getCPtr(image), minEdge, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATS(Int16Image image, Int16Image roi, short minEdge, ref short thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_7(Int16Image.getCPtr(image), Int16Image.getCPtr(roi), minEdge, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATS(Int32Image image, int minEdge, ref int thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_8(Int32Image.getCPtr(image), minEdge, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATS(Int32Image image, Int32Image roi, int minEdge, ref int thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_9(Int32Image.getCPtr(image), Int32Image.getCPtr(roi), minEdge, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATS(FloatImage image, float minEdge, ref float thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_10(FloatImage.getCPtr(image), minEdge, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATS(FloatImage image, FloatImage roi, float minEdge, ref float thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_11(FloatImage.getCPtr(image), FloatImage.getCPtr(roi), minEdge, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATS(DoubleImage image, double minEdge, ref double thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_12(DoubleImage.getCPtr(image), minEdge, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATS(DoubleImage image, DoubleImage roi, double minEdge, ref double thres) {
    double ret = VisionLabPINVOKE.RATS__SWIG_13(DoubleImage.getCPtr(image), DoubleImage.getCPtr(roi), minEdge, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATSLocal(ByteImage image, ByteImage mask, byte minEdge, double minAvgEdges, int nrLevels) {
    double ret = VisionLabPINVOKE.RATSLocal__SWIG_1(ByteImage.getCPtr(image), ByteImage.getCPtr(mask), minEdge, minAvgEdges, nrLevels);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATSLocal(Int8Image image, Int8Image mask, char minEdge, double minAvgEdges, int nrLevels) {
    double ret = VisionLabPINVOKE.RATSLocal__SWIG_2(Int8Image.getCPtr(image), Int8Image.getCPtr(mask), minEdge, minAvgEdges, nrLevels);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATSLocal(Int16Image image, Int16Image mask, short minEdge, double minAvgEdges, int nrLevels) {
    double ret = VisionLabPINVOKE.RATSLocal__SWIG_3(Int16Image.getCPtr(image), Int16Image.getCPtr(mask), minEdge, minAvgEdges, nrLevels);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATSLocal(Int32Image image, Int32Image mask, int minEdge, double minAvgEdges, int nrLevels) {
    double ret = VisionLabPINVOKE.RATSLocal__SWIG_4(Int32Image.getCPtr(image), Int32Image.getCPtr(mask), minEdge, minAvgEdges, nrLevels);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATSLocal(FloatImage image, FloatImage mask, float minEdge, double minAvgEdges, int nrLevels) {
    double ret = VisionLabPINVOKE.RATSLocal__SWIG_5(FloatImage.getCPtr(image), FloatImage.getCPtr(mask), minEdge, minAvgEdges, nrLevels);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RATSLocal(DoubleImage image, DoubleImage mask, double minEdge, double minAvgEdges, int nrLevels) {
    double ret = VisionLabPINVOKE.RATSLocal__SWIG_6(DoubleImage.getCPtr(image), DoubleImage.getCPtr(mask), minEdge, minAvgEdges, nrLevels);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void RemoveSelectedLabels(ByteImage image, byte low, byte high) {
    VisionLabPINVOKE.RemoveSelectedLabels__SWIG_1(ByteImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveSelectedLabels(Int8Image image, char low, char high) {
    VisionLabPINVOKE.RemoveSelectedLabels__SWIG_2(Int8Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveSelectedLabels(Int16Image image, short low, short high) {
    VisionLabPINVOKE.RemoveSelectedLabels__SWIG_3(Int16Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveSelectedLabels(Int32Image image, int low, int high) {
    VisionLabPINVOKE.RemoveSelectedLabels__SWIG_4(Int32Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveSelectedLabels(FloatImage image, float low, float high) {
    VisionLabPINVOKE.RemoveSelectedLabels__SWIG_5(FloatImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveSelectedLabels(DoubleImage image, double low, double high) {
    VisionLabPINVOKE.RemoveSelectedLabels__SWIG_6(DoubleImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(ByteImage image, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab, vector_uchar pTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_2(ByteImage.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab), vector_uchar.getCPtr(pTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(Int8Image image, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab, vector_char pTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_3(Int8Image.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab), vector_char.getCPtr(pTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(Int16Image image, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab, vector_short pTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_4(Int16Image.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab), vector_short.getCPtr(pTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(Int32Image image, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab, vector_int pTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_5(Int32Image.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab), vector_int.getCPtr(pTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(FloatImage image, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab, vector_float pTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_6(FloatImage.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab), vector_float.getCPtr(pTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(DoubleImage image, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab, vector_double pTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_7(DoubleImage.getCPtr(image), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab), vector_double.getCPtr(pTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(ByteImage src, ByteImage dest, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_8(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(Int8Image src, Int8Image dest, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_9(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(Int16Image src, Int16Image dest, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_10(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(Int32Image src, Int32Image dest, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_11(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(FloatImage src, FloatImage dest, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_12(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ResampleLine(DoubleImage src, DoubleImage dest, Coord2D start, Coord2D end, int nrPixels, vector_Coord2D cTab) {
    VisionLabPINVOKE.ResampleLine__SWIG_13(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), Coord2D.getCPtr(start), Coord2D.getCPtr(end), nrPixels, vector_Coord2D.getCPtr(cTab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetMultiToValue(ByteImage image, SWIGTYPE_p_std__setT_unsigned_char_t selectSet, byte value) {
    VisionLabPINVOKE.SetMultiToValue__SWIG_1(ByteImage.getCPtr(image), SWIGTYPE_p_std__setT_unsigned_char_t.getCPtr(selectSet), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetMultiToValue(Int8Image image, SWIGTYPE_p_std__setT_char_t selectSet, char value) {
    VisionLabPINVOKE.SetMultiToValue__SWIG_2(Int8Image.getCPtr(image), SWIGTYPE_p_std__setT_char_t.getCPtr(selectSet), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetMultiToValue(Int16Image image, SWIGTYPE_p_std__setT_short_t selectSet, short value) {
    VisionLabPINVOKE.SetMultiToValue__SWIG_3(Int16Image.getCPtr(image), SWIGTYPE_p_std__setT_short_t.getCPtr(selectSet), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetMultiToValue(Int32Image image, SWIGTYPE_p_std__setT_int_t selectSet, int value) {
    VisionLabPINVOKE.SetMultiToValue__SWIG_4(Int32Image.getCPtr(image), SWIGTYPE_p_std__setT_int_t.getCPtr(selectSet), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetMultiToValue(FloatImage image, SWIGTYPE_p_std__setT_float_t selectSet, float value) {
    VisionLabPINVOKE.SetMultiToValue__SWIG_5(FloatImage.getCPtr(image), SWIGTYPE_p_std__setT_float_t.getCPtr(selectSet), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetMultiToValue(DoubleImage image, SWIGTYPE_p_std__setT_double_t selectSet, double value) {
    VisionLabPINVOKE.SetMultiToValue__SWIG_6(DoubleImage.getCPtr(image), SWIGTYPE_p_std__setT_double_t.getCPtr(selectSet), value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(ByteImage image, byte low, byte high, byte value, Border borders) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_2(ByteImage.getCPtr(image), low, high, value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(ByteImage image, byte low, byte high, byte value) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_3(ByteImage.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(Int8Image image, char low, char high, char value, Border borders) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_4(Int8Image.getCPtr(image), low, high, value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(Int8Image image, char low, char high, char value) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_5(Int8Image.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(Int16Image image, short low, short high, short value, Border borders) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_6(Int16Image.getCPtr(image), low, high, value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(Int16Image image, short low, short high, short value) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_7(Int16Image.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(Int32Image image, int low, int high, int value, Border borders) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_8(Int32Image.getCPtr(image), low, high, value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(Int32Image image, int low, int high, int value) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_9(Int32Image.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(FloatImage image, float low, float high, float value, Border borders) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_10(FloatImage.getCPtr(image), low, high, value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(FloatImage image, float low, float high, float value) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_11(FloatImage.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(DoubleImage image, double low, double high, double value, Border borders) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_12(DoubleImage.getCPtr(image), low, high, value, (int)borders);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedBorders(DoubleImage image, double low, double high, double value) {
    VisionLabPINVOKE.SetSelectedBorders__SWIG_13(DoubleImage.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedToValue(ByteImage image, byte low, byte high, byte value) {
    VisionLabPINVOKE.SetSelectedToValue__SWIG_1(ByteImage.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedToValue(Int8Image image, char low, char high, char value) {
    VisionLabPINVOKE.SetSelectedToValue__SWIG_2(Int8Image.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedToValue(Int16Image image, short low, short high, short value) {
    VisionLabPINVOKE.SetSelectedToValue__SWIG_3(Int16Image.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedToValue(Int32Image image, int low, int high, int value) {
    VisionLabPINVOKE.SetSelectedToValue__SWIG_4(Int32Image.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedToValue(FloatImage image, float low, float high, float value) {
    VisionLabPINVOKE.SetSelectedToValue__SWIG_5(FloatImage.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetSelectedToValue(DoubleImage image, double low, double high, double value) {
    VisionLabPINVOKE.SetSelectedToValue__SWIG_6(DoubleImage.getCPtr(image), low, high, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SinusPattern(ByteImage image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.SinusPattern__SWIG_1(ByteImage.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SinusPattern(Int8Image image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.SinusPattern__SWIG_2(Int8Image.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SinusPattern(Int16Image image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.SinusPattern__SWIG_3(Int16Image.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SinusPattern(Int32Image image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.SinusPattern__SWIG_4(Int32Image.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SinusPattern(FloatImage image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.SinusPattern__SWIG_5(FloatImage.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SinusPattern(DoubleImage image, int periodx, int periody, double amplitude) {
    VisionLabPINVOKE.SinusPattern__SWIG_6(DoubleImage.getCPtr(image), periodx, periody, amplitude);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double StandardDeviation(ByteImage image) {
    double ret = VisionLabPINVOKE.StandardDeviation__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double StandardDeviation(Int8Image image) {
    double ret = VisionLabPINVOKE.StandardDeviation__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double StandardDeviation(Int16Image image) {
    double ret = VisionLabPINVOKE.StandardDeviation__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double StandardDeviation(Int32Image image) {
    double ret = VisionLabPINVOKE.StandardDeviation__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double StandardDeviation(FloatImage image) {
    double ret = VisionLabPINVOKE.StandardDeviation__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double StandardDeviation(DoubleImage image) {
    double ret = VisionLabPINVOKE.StandardDeviation__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SumColumns(ByteImage src, ByteImage dest) {
    VisionLabPINVOKE.SumColumns__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SumColumns(Int8Image src, Int8Image dest) {
    VisionLabPINVOKE.SumColumns__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SumColumns(Int16Image src, Int16Image dest) {
    VisionLabPINVOKE.SumColumns__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SumColumns(Int32Image src, Int32Image dest) {
    VisionLabPINVOKE.SumColumns__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SumColumns(FloatImage src, FloatImage dest) {
    VisionLabPINVOKE.SumColumns__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SumColumns(DoubleImage src, DoubleImage dest) {
    VisionLabPINVOKE.SumColumns__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double SumFloatPixels(ByteImage image) {
    double ret = VisionLabPINVOKE.SumFloatPixels__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double SumFloatPixels(Int8Image image) {
    double ret = VisionLabPINVOKE.SumFloatPixels__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double SumFloatPixels(Int16Image image) {
    double ret = VisionLabPINVOKE.SumFloatPixels__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double SumFloatPixels(Int32Image image) {
    double ret = VisionLabPINVOKE.SumFloatPixels__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double SumFloatPixels(FloatImage image) {
    double ret = VisionLabPINVOKE.SumFloatPixels__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double SumFloatPixels(DoubleImage image) {
    double ret = VisionLabPINVOKE.SumFloatPixels__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SumRows(ByteImage src, ByteImage dest) {
    VisionLabPINVOKE.SumRows__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SumRows(Int8Image src, Int8Image dest) {
    VisionLabPINVOKE.SumRows__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SumRows(Int16Image src, Int16Image dest) {
    VisionLabPINVOKE.SumRows__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SumRows(Int32Image src, Int32Image dest) {
    VisionLabPINVOKE.SumRows__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SumRows(FloatImage src, FloatImage dest) {
    VisionLabPINVOKE.SumRows__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SumRows(DoubleImage src, DoubleImage dest) {
    VisionLabPINVOKE.SumRows__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold(ByteImage image, byte low, byte high) {
    VisionLabPINVOKE.Threshold__SWIG_1(ByteImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold(Int8Image image, char low, char high) {
    VisionLabPINVOKE.Threshold__SWIG_2(Int8Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold(Int16Image image, short low, short high) {
    VisionLabPINVOKE.Threshold__SWIG_3(Int16Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold(Int32Image image, int low, int high) {
    VisionLabPINVOKE.Threshold__SWIG_4(Int32Image.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold(FloatImage image, float low, float high) {
    VisionLabPINVOKE.Threshold__SWIG_5(FloatImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Threshold(DoubleImage image, double low, double high) {
    VisionLabPINVOKE.Threshold__SWIG_6(DoubleImage.getCPtr(image), low, high);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdLocal(ByteImage image, ByteImage mask, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdLocal__SWIG_1(ByteImage.getCPtr(image), ByteImage.getCPtr(mask), (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdLocal(Int8Image image, Int8Image mask, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdLocal__SWIG_2(Int8Image.getCPtr(image), Int8Image.getCPtr(mask), (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdLocal(Int16Image image, Int16Image mask, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdLocal__SWIG_3(Int16Image.getCPtr(image), Int16Image.getCPtr(mask), (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdLocal(Int32Image image, Int32Image mask, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdLocal__SWIG_4(Int32Image.getCPtr(image), Int32Image.getCPtr(mask), (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdLocal(FloatImage image, FloatImage mask, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdLocal__SWIG_5(FloatImage.getCPtr(image), FloatImage.getCPtr(mask), (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdLocal(DoubleImage image, DoubleImage mask, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdLocal__SWIG_6(DoubleImage.getCPtr(image), DoubleImage.getCPtr(mask), (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static byte ThresholdOnHighest(ByteImage image) {
    byte ret = VisionLabPINVOKE.ThresholdOnHighest__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char ThresholdOnHighest(Int8Image image) {
    char ret = VisionLabPINVOKE.ThresholdOnHighest__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static short ThresholdOnHighest(Int16Image image) {
    short ret = VisionLabPINVOKE.ThresholdOnHighest__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ThresholdOnHighest(Int32Image image) {
    int ret = VisionLabPINVOKE.ThresholdOnHighest__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float ThresholdOnHighest(FloatImage image) {
    float ret = VisionLabPINVOKE.ThresholdOnHighest__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdOnHighest(DoubleImage image) {
    double ret = VisionLabPINVOKE.ThresholdOnHighest__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static byte ThresholdOnLowest(ByteImage image) {
    byte ret = VisionLabPINVOKE.ThresholdOnLowest__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char ThresholdOnLowest(Int8Image image) {
    char ret = VisionLabPINVOKE.ThresholdOnLowest__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static short ThresholdOnLowest(Int16Image image) {
    short ret = VisionLabPINVOKE.ThresholdOnLowest__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ThresholdOnLowest(Int32Image image) {
    int ret = VisionLabPINVOKE.ThresholdOnLowest__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float ThresholdOnLowest(FloatImage image) {
    float ret = VisionLabPINVOKE.ThresholdOnLowest__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdOnLowest(DoubleImage image) {
    double ret = VisionLabPINVOKE.ThresholdOnLowest__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static byte ThresholdOnLowestButZero(ByteImage image) {
    byte ret = VisionLabPINVOKE.ThresholdOnLowestButZero__SWIG_1(ByteImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char ThresholdOnLowestButZero(Int8Image image) {
    char ret = VisionLabPINVOKE.ThresholdOnLowestButZero__SWIG_2(Int8Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static short ThresholdOnLowestButZero(Int16Image image) {
    short ret = VisionLabPINVOKE.ThresholdOnLowestButZero__SWIG_3(Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ThresholdOnLowestButZero(Int32Image image) {
    int ret = VisionLabPINVOKE.ThresholdOnLowestButZero__SWIG_4(Int32Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float ThresholdOnLowestButZero(FloatImage image) {
    float ret = VisionLabPINVOKE.ThresholdOnLowestButZero__SWIG_5(FloatImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdOnLowestButZero(DoubleImage image) {
    double ret = VisionLabPINVOKE.ThresholdOnLowestButZero__SWIG_6(DoubleImage.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(ByteImage image, byte minEdge, ObjectBrightness arg2, ref byte thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_2(ByteImage.getCPtr(image), minEdge, (int)arg2, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(ByteImage image, ByteImage roi, byte minEdge, ObjectBrightness arg3, ref byte thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_3(ByteImage.getCPtr(image), ByteImage.getCPtr(roi), minEdge, (int)arg3, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(Int8Image image, char minEdge, ObjectBrightness arg2, SWIGTYPE_p_char thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_4(Int8Image.getCPtr(image), minEdge, (int)arg2, SWIGTYPE_p_char.getCPtr(thres));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(Int8Image image, Int8Image roi, char minEdge, ObjectBrightness arg3, SWIGTYPE_p_char thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_5(Int8Image.getCPtr(image), Int8Image.getCPtr(roi), minEdge, (int)arg3, SWIGTYPE_p_char.getCPtr(thres));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(Int16Image image, short minEdge, ObjectBrightness arg2, ref short thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_6(Int16Image.getCPtr(image), minEdge, (int)arg2, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(Int16Image image, Int16Image roi, short minEdge, ObjectBrightness arg3, ref short thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_7(Int16Image.getCPtr(image), Int16Image.getCPtr(roi), minEdge, (int)arg3, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(Int32Image image, int minEdge, ObjectBrightness arg2, ref int thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_8(Int32Image.getCPtr(image), minEdge, (int)arg2, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(Int32Image image, Int32Image roi, int minEdge, ObjectBrightness arg3, ref int thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_9(Int32Image.getCPtr(image), Int32Image.getCPtr(roi), minEdge, (int)arg3, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(FloatImage image, float minEdge, ObjectBrightness arg2, ref float thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_10(FloatImage.getCPtr(image), minEdge, (int)arg2, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(FloatImage image, FloatImage roi, float minEdge, ObjectBrightness arg3, ref float thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_11(FloatImage.getCPtr(image), FloatImage.getCPtr(roi), minEdge, (int)arg3, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(DoubleImage image, double minEdge, ObjectBrightness arg2, ref double thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_12(DoubleImage.getCPtr(image), minEdge, (int)arg2, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATS(DoubleImage image, DoubleImage roi, double minEdge, ObjectBrightness arg3, ref double thres) {
    double ret = VisionLabPINVOKE.ThresholdRATS__SWIG_13(DoubleImage.getCPtr(image), DoubleImage.getCPtr(roi), minEdge, (int)arg3, ref thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATSLocal(ByteImage image, byte minEdge, double minAvgEdges, int nrLevels, ObjectBrightness arg4) {
    double ret = VisionLabPINVOKE.ThresholdRATSLocal__SWIG_1(ByteImage.getCPtr(image), minEdge, minAvgEdges, nrLevels, (int)arg4);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATSLocal(Int8Image image, char minEdge, double minAvgEdges, int nrLevels, ObjectBrightness arg4) {
    double ret = VisionLabPINVOKE.ThresholdRATSLocal__SWIG_2(Int8Image.getCPtr(image), minEdge, minAvgEdges, nrLevels, (int)arg4);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATSLocal(Int16Image image, short minEdge, double minAvgEdges, int nrLevels, ObjectBrightness arg4) {
    double ret = VisionLabPINVOKE.ThresholdRATSLocal__SWIG_3(Int16Image.getCPtr(image), minEdge, minAvgEdges, nrLevels, (int)arg4);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATSLocal(Int32Image image, int minEdge, double minAvgEdges, int nrLevels, ObjectBrightness arg4) {
    double ret = VisionLabPINVOKE.ThresholdRATSLocal__SWIG_4(Int32Image.getCPtr(image), minEdge, minAvgEdges, nrLevels, (int)arg4);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATSLocal(FloatImage image, float minEdge, double minAvgEdges, int nrLevels, ObjectBrightness arg4) {
    double ret = VisionLabPINVOKE.ThresholdRATSLocal__SWIG_5(FloatImage.getCPtr(image), minEdge, minAvgEdges, nrLevels, (int)arg4);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ThresholdRATSLocal(DoubleImage image, double minEdge, double minAvgEdges, int nrLevels, ObjectBrightness arg4) {
    double ret = VisionLabPINVOKE.ThresholdRATSLocal__SWIG_6(DoubleImage.getCPtr(image), minEdge, minAvgEdges, nrLevels, (int)arg4);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ThresholdSimple(ByteImage image, byte thres, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdSimple__SWIG_1(ByteImage.getCPtr(image), thres, (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdSimple(Int8Image image, char thres, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdSimple__SWIG_2(Int8Image.getCPtr(image), thres, (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdSimple(Int16Image image, short thres, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdSimple__SWIG_3(Int16Image.getCPtr(image), thres, (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdSimple(Int32Image image, int thres, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdSimple__SWIG_4(Int32Image.getCPtr(image), thres, (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdSimple(FloatImage image, float thres, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdSimple__SWIG_5(FloatImage.getCPtr(image), thres, (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ThresholdSimple(DoubleImage image, double thres, ObjectBrightness arg2) {
    VisionLabPINVOKE.ThresholdSimple__SWIG_6(DoubleImage.getCPtr(image), thres, (int)arg2);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsColumns(ByteImage src, ByteImage dest, byte thres) {
    VisionLabPINVOKE.TransitionsColumns__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsColumns(Int8Image src, Int8Image dest, char thres) {
    VisionLabPINVOKE.TransitionsColumns__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsColumns(Int16Image src, Int16Image dest, short thres) {
    VisionLabPINVOKE.TransitionsColumns__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsColumns(Int32Image src, Int32Image dest, int thres) {
    VisionLabPINVOKE.TransitionsColumns__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsColumns(FloatImage src, FloatImage dest, float thres) {
    VisionLabPINVOKE.TransitionsColumns__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsColumns(DoubleImage src, DoubleImage dest, double thres) {
    VisionLabPINVOKE.TransitionsColumns__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsRows(ByteImage src, ByteImage dest, byte thres) {
    VisionLabPINVOKE.TransitionsRows__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsRows(Int8Image src, Int8Image dest, char thres) {
    VisionLabPINVOKE.TransitionsRows__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsRows(Int16Image src, Int16Image dest, short thres) {
    VisionLabPINVOKE.TransitionsRows__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsRows(Int32Image src, Int32Image dest, int thres) {
    VisionLabPINVOKE.TransitionsRows__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsRows(FloatImage src, FloatImage dest, float thres) {
    VisionLabPINVOKE.TransitionsRows__SWIG_5(FloatImage.getCPtr(src), FloatImage.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TransitionsRows(DoubleImage src, DoubleImage dest, double thres) {
    VisionLabPINVOKE.TransitionsRows__SWIG_6(DoubleImage.getCPtr(src), DoubleImage.getCPtr(dest), thres);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindOccludedBlob(ByteImage src, ByteImage pat, ByteImage dest, float occlusion, int maxDistance, float margin) {
    VisionLabPINVOKE.FindOccludedBlob__SWIG_1(ByteImage.getCPtr(src), ByteImage.getCPtr(pat), ByteImage.getCPtr(dest), occlusion, maxDistance, margin);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindOccludedBlob(Int8Image src, Int8Image pat, Int8Image dest, float occlusion, int maxDistance, float margin) {
    VisionLabPINVOKE.FindOccludedBlob__SWIG_2(Int8Image.getCPtr(src), Int8Image.getCPtr(pat), Int8Image.getCPtr(dest), occlusion, maxDistance, margin);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindOccludedBlob(Int16Image src, Int16Image pat, Int16Image dest, float occlusion, int maxDistance, float margin) {
    VisionLabPINVOKE.FindOccludedBlob__SWIG_3(Int16Image.getCPtr(src), Int16Image.getCPtr(pat), Int16Image.getCPtr(dest), occlusion, maxDistance, margin);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FindOccludedBlob(Int32Image src, Int32Image pat, Int32Image dest, float occlusion, int maxDistance, float margin) {
    VisionLabPINVOKE.FindOccludedBlob__SWIG_4(Int32Image.getCPtr(src), Int32Image.getCPtr(pat), Int32Image.getCPtr(dest), occlusion, maxDistance, margin);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int FindBlob(ByteImage src, ByteImage pat, ByteImage dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio, int fillSampleSize, int randomSampleSize) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_4(ByteImage.getCPtr(src), ByteImage.getCPtr(pat), ByteImage.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio, fillSampleSize, randomSampleSize);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(ByteImage src, ByteImage pat, ByteImage dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio, int fillSampleSize) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_5(ByteImage.getCPtr(src), ByteImage.getCPtr(pat), ByteImage.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio, fillSampleSize);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(ByteImage src, ByteImage pat, ByteImage dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_6(ByteImage.getCPtr(src), ByteImage.getCPtr(pat), ByteImage.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(ByteImage src, ByteImage pat, ByteImage dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_7(ByteImage.getCPtr(src), ByteImage.getCPtr(pat), ByteImage.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int8Image src, Int8Image pat, Int8Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio, int fillSampleSize, int randomSampleSize) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_8(Int8Image.getCPtr(src), Int8Image.getCPtr(pat), Int8Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio, fillSampleSize, randomSampleSize);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int8Image src, Int8Image pat, Int8Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio, int fillSampleSize) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_9(Int8Image.getCPtr(src), Int8Image.getCPtr(pat), Int8Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio, fillSampleSize);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int8Image src, Int8Image pat, Int8Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_10(Int8Image.getCPtr(src), Int8Image.getCPtr(pat), Int8Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int8Image src, Int8Image pat, Int8Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_11(Int8Image.getCPtr(src), Int8Image.getCPtr(pat), Int8Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int16Image src, Int16Image pat, Int16Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio, int fillSampleSize, int randomSampleSize) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_12(Int16Image.getCPtr(src), Int16Image.getCPtr(pat), Int16Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio, fillSampleSize, randomSampleSize);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int16Image src, Int16Image pat, Int16Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio, int fillSampleSize) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_13(Int16Image.getCPtr(src), Int16Image.getCPtr(pat), Int16Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio, fillSampleSize);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int16Image src, Int16Image pat, Int16Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_14(Int16Image.getCPtr(src), Int16Image.getCPtr(pat), Int16Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int16Image src, Int16Image pat, Int16Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_15(Int16Image.getCPtr(src), Int16Image.getCPtr(pat), Int16Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int32Image src, Int32Image pat, Int32Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio, int fillSampleSize, int randomSampleSize) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_16(Int32Image.getCPtr(src), Int32Image.getCPtr(pat), Int32Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio, fillSampleSize, randomSampleSize);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int32Image src, Int32Image pat, Int32Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio, int fillSampleSize) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_17(Int32Image.getCPtr(src), Int32Image.getCPtr(pat), Int32Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio, fillSampleSize);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int32Image src, Int32Image pat, Int32Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations, float perimeterFillRatio) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_18(Int32Image.getCPtr(src), Int32Image.getCPtr(pat), Int32Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations, perimeterFillRatio);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindBlob(Int32Image src, Int32Image pat, Int32Image dest, Connected connected, float maxError, float beginAngle, float endAngle, int nrOfRotations) {
    int ret = VisionLabPINVOKE.FindBlob__SWIG_19(Int32Image.getCPtr(src), Int32Image.getCPtr(pat), Int32Image.getCPtr(dest), (int)connected, maxError, beginAngle, endAngle, nrOfRotations);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ConvertOrdToRGB888Image(ByteImage src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB888Image__SWIG_1(ByteImage.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToRGB888Image(Int8Image src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB888Image__SWIG_2(Int8Image.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToRGB888Image(Int16Image src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB888Image__SWIG_3(Int16Image.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToRGB888Image(Int32Image src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB888Image__SWIG_4(Int32Image.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToRGB888Image(FloatImage src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB888Image__SWIG_5(FloatImage.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToRGB888Image(DoubleImage src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB888Image__SWIG_6(DoubleImage.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB888ToOrdImage(RGB888Image src, ByteImage dest) {
    VisionLabPINVOKE.ConvertRGB888ToOrdImage__SWIG_1(RGB888Image.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB888ToOrdImage(RGB888Image src, Int8Image dest) {
    VisionLabPINVOKE.ConvertRGB888ToOrdImage__SWIG_2(RGB888Image.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB888ToOrdImage(RGB888Image src, Int16Image dest) {
    VisionLabPINVOKE.ConvertRGB888ToOrdImage__SWIG_3(RGB888Image.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB888ToOrdImage(RGB888Image src, Int32Image dest) {
    VisionLabPINVOKE.ConvertRGB888ToOrdImage__SWIG_4(RGB888Image.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB888ToOrdImage(RGB888Image src, FloatImage dest) {
    VisionLabPINVOKE.ConvertRGB888ToOrdImage__SWIG_5(RGB888Image.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB888ToOrdImage(RGB888Image src, DoubleImage dest) {
    VisionLabPINVOKE.ConvertRGB888ToOrdImage__SWIG_6(RGB888Image.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToRGB161616Image(ByteImage src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB161616Image__SWIG_1(ByteImage.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToRGB161616Image(Int8Image src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB161616Image__SWIG_2(Int8Image.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToRGB161616Image(Int16Image src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB161616Image__SWIG_3(Int16Image.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToRGB161616Image(Int32Image src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB161616Image__SWIG_4(Int32Image.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToRGB161616Image(FloatImage src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB161616Image__SWIG_5(FloatImage.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertOrdToRGB161616Image(DoubleImage src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertOrdToRGB161616Image__SWIG_6(DoubleImage.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB161616ToOrdImage(RGB161616Image src, ByteImage dest) {
    VisionLabPINVOKE.ConvertRGB161616ToOrdImage__SWIG_1(RGB161616Image.getCPtr(src), ByteImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB161616ToOrdImage(RGB161616Image src, Int8Image dest) {
    VisionLabPINVOKE.ConvertRGB161616ToOrdImage__SWIG_2(RGB161616Image.getCPtr(src), Int8Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB161616ToOrdImage(RGB161616Image src, Int16Image dest) {
    VisionLabPINVOKE.ConvertRGB161616ToOrdImage__SWIG_3(RGB161616Image.getCPtr(src), Int16Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB161616ToOrdImage(RGB161616Image src, Int32Image dest) {
    VisionLabPINVOKE.ConvertRGB161616ToOrdImage__SWIG_4(RGB161616Image.getCPtr(src), Int32Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB161616ToOrdImage(RGB161616Image src, FloatImage dest) {
    VisionLabPINVOKE.ConvertRGB161616ToOrdImage__SWIG_5(RGB161616Image.getCPtr(src), FloatImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertRGB161616ToOrdImage(RGB161616Image src, DoubleImage dest) {
    VisionLabPINVOKE.ConvertRGB161616ToOrdImage__SWIG_6(RGB161616Image.getCPtr(src), DoubleImage.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB888Image(ByteImage src, RGB888Image dest, CFAType cfa) {
    VisionLabPINVOKE.ConvertCFAToRGB888Image__SWIG_2(ByteImage.getCPtr(src), RGB888Image.getCPtr(dest), (int)cfa);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB888Image(ByteImage src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertCFAToRGB888Image__SWIG_3(ByteImage.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB888Image(Int8Image src, RGB888Image dest, CFAType cfa) {
    VisionLabPINVOKE.ConvertCFAToRGB888Image__SWIG_4(Int8Image.getCPtr(src), RGB888Image.getCPtr(dest), (int)cfa);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB888Image(Int8Image src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertCFAToRGB888Image__SWIG_5(Int8Image.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB888Image(Int16Image src, RGB888Image dest, CFAType cfa) {
    VisionLabPINVOKE.ConvertCFAToRGB888Image__SWIG_6(Int16Image.getCPtr(src), RGB888Image.getCPtr(dest), (int)cfa);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB888Image(Int16Image src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertCFAToRGB888Image__SWIG_7(Int16Image.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB888Image(Int32Image src, RGB888Image dest, CFAType cfa) {
    VisionLabPINVOKE.ConvertCFAToRGB888Image__SWIG_8(Int32Image.getCPtr(src), RGB888Image.getCPtr(dest), (int)cfa);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB888Image(Int32Image src, RGB888Image dest) {
    VisionLabPINVOKE.ConvertCFAToRGB888Image__SWIG_9(Int32Image.getCPtr(src), RGB888Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB161616Image(ByteImage src, RGB161616Image dest, CFAType cfa) {
    VisionLabPINVOKE.ConvertCFAToRGB161616Image__SWIG_2(ByteImage.getCPtr(src), RGB161616Image.getCPtr(dest), (int)cfa);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB161616Image(ByteImage src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertCFAToRGB161616Image__SWIG_3(ByteImage.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB161616Image(Int8Image src, RGB161616Image dest, CFAType cfa) {
    VisionLabPINVOKE.ConvertCFAToRGB161616Image__SWIG_4(Int8Image.getCPtr(src), RGB161616Image.getCPtr(dest), (int)cfa);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB161616Image(Int8Image src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertCFAToRGB161616Image__SWIG_5(Int8Image.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB161616Image(Int16Image src, RGB161616Image dest, CFAType cfa) {
    VisionLabPINVOKE.ConvertCFAToRGB161616Image__SWIG_6(Int16Image.getCPtr(src), RGB161616Image.getCPtr(dest), (int)cfa);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB161616Image(Int16Image src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertCFAToRGB161616Image__SWIG_7(Int16Image.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB161616Image(Int32Image src, RGB161616Image dest, CFAType cfa) {
    VisionLabPINVOKE.ConvertCFAToRGB161616Image__SWIG_8(Int32Image.getCPtr(src), RGB161616Image.getCPtr(dest), (int)cfa);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ConvertCFAToRGB161616Image(Int32Image src, RGB161616Image dest) {
    VisionLabPINVOKE.ConvertCFAToRGB161616Image__SWIG_9(Int32Image.getCPtr(src), RGB161616Image.getCPtr(dest));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(ByteImage image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_1(ByteImage.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(Int8Image image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_2(Int8Image.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(Int16Image image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_3(Int16Image.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(Int32Image image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_4(Int32Image.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(FloatImage image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_5(FloatImage.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(DoubleImage image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_6(DoubleImage.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(RGB888Image image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_7(RGB888Image.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(RGB161616Image image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_8(RGB161616Image.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(HSV888Image image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_9(HSV888Image.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(HSV161616Image image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_10(HSV161616Image.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(YUV888Image image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_11(YUV888Image.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(YUV161616Image image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_12(YUV161616Image.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(ComplexFloatImage image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_13(ComplexFloatImage.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void TextOnImage(ComplexDoubleImage image, int left, int top, string font, string text) {
    VisionLabPINVOKE.TextOnImage__SWIG_14(ComplexDoubleImage.getCPtr(image), left, top, font, text);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string CheckRefToVar(string varName, string opName) {
    string ret = VisionLabPINVOKE.CheckRefToVar(varName, opName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetImageType(VisLibCmdInt cmdInt, string imageName) {
    string ret = VisionLabPINVOKE.GetImageType__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void CheckIsImage(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsImage__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsNotImage(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsNotImage__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsByteImage(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsByteImage__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsInt8Image(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsInt8Image__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsInt16Image(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsInt16Image__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsInt32Image(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsInt32Image__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsFloatImage(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsFloatImage__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsDoubleImage(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsDoubleImage__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsRGB888Image(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsRGB888Image__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsRGB161616Image(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsRGB161616Image__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsHSV888Image(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsHSV888Image__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsHSV161616Image(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsHSV161616Image__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsYUV888Image(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsYUV888Image__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsYUV161616Image(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsYUV161616Image__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsComplexFloatImage(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsComplexFloatImage__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CheckIsComplexDoubleImage(VisLibCmdInt cmdInt, string imageName) {
    VisionLabPINVOKE.CheckIsComplexDoubleImage__SWIG_0(VisLibCmdInt.getCPtr(cmdInt), imageName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool CheckIsImage(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsImage__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsNotImage(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsNotImage__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsByteImage(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsByteImage__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsInt8Image(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsInt8Image__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsInt16Image(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsInt16Image__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsInt32Image(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsInt32Image__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsFloatImage(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsFloatImage__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsDoubleImage(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsDoubleImage__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsRGB888Image(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsRGB888Image__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsRGB161616Image(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsRGB161616Image__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsHSV888Image(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsHSV888Image__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsHSV161616Image(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsHSV161616Image__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsYUV888Image(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsYUV888Image__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsYUV161616Image(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsYUV161616Image__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsComplexFloatImage(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsComplexFloatImage__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckIsComplexDoubleImage(VisLibCmdInt cmdInt, string imageName, SWIGTYPE_p_std__ostream os) {
    bool ret = VisionLabPINVOKE.CheckIsComplexDoubleImage__SWIG_1(VisLibCmdInt.getCPtr(cmdInt), imageName, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_string EncryptScript(vector_string s, string password) {
    vector_string ret = new vector_string(VisionLabPINVOKE.EncryptScript(vector_string.getCPtr(s), password), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static vector_string DecryptScript(vector_string s, string password) {
    vector_string ret = new vector_string(VisionLabPINVOKE.DecryptScript(vector_string.getCPtr(s), password), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string RemoveTimeMsg(string str) {
    string ret = VisionLabPINVOKE.RemoveTimeMsg(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string EchoModeToStr(EchoMode mode) {
    string ret = VisionLabPINVOKE.EchoModeToStr((int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EchoMode StrToEchoMode(string str) {
    EchoMode ret = (EchoMode)VisionLabPINVOKE.StrToEchoMode(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string LogModeToStr(LogMode mode) {
    string ret = VisionLabPINVOKE.LogModeToStr((int)mode);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static LogMode StrToLogMode(string str) {
    LogMode ret = (LogMode)VisionLabPINVOKE.StrToLogMode(str);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
