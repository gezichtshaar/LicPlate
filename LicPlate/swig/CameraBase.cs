/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CameraBase : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CameraBase(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CameraBase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CameraBase() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VisionLabPINVOKE.delete_CameraBase(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual Image SnapShot(int roiNr) {
    IntPtr cPtr = VisionLabPINVOKE.CameraBase_SnapShot__SWIG_0(swigCPtr, roiNr);
    Image ret = (cPtr == IntPtr.Zero) ? null : new Image(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image SnapShot() {
    IntPtr cPtr = VisionLabPINVOKE.CameraBase_SnapShot__SWIG_1(swigCPtr);
    Image ret = (cPtr == IntPtr.Zero) ? null : new Image(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__Image_p_t SnapShotROIs() {
    SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__Image_p_t ret = new SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__Image_p_t(VisionLabPINVOKE.CameraBase_SnapShotROIs(swigCPtr), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetImageType() {
    string ret = VisionLabPINVOKE.CameraBase_GetImageType(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Reset() {
    VisionLabPINVOKE.CameraBase_Reset(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetMinHeight() {
    int ret = VisionLabPINVOKE.CameraBase_GetMinHeight(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetMinWidth() {
    int ret = VisionLabPINVOKE.CameraBase_GetMinWidth(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetMaxHeight() {
    int ret = VisionLabPINVOKE.CameraBase_GetMaxHeight(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetMaxWidth() {
    int ret = VisionLabPINVOKE.CameraBase_GetMaxWidth(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetMaxNrOfROIs() {
    int ret = VisionLabPINVOKE.CameraBase_GetMaxNrOfROIs(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ClearROITab() {
    VisionLabPINVOKE.CameraBase_ClearROITab(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int NrOfROIs() {
    int ret = VisionLabPINVOKE.CameraBase_NrOfROIs(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int MaxNrOfROIs() {
    int ret = VisionLabPINVOKE.CameraBase_MaxNrOfROIs(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int AddROI(CamROI roi) {
    int ret = VisionLabPINVOKE.CameraBase_AddROI(swigCPtr, CamROI.getCPtr(roi));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetROI(int n, CamROI roi) {
    VisionLabPINVOKE.CameraBase_SetROI(swigCPtr, n, CamROI.getCPtr(roi));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual CamROI GetROI(int n) {
    CamROI ret = new CamROI(VisionLabPINVOKE.CameraBase_GetROI(swigCPtr, n), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetROIsTab(vector_CamROI tab) {
    VisionLabPINVOKE.CameraBase_SetROIsTab(swigCPtr, vector_CamROI.getCPtr(tab));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual vector_CamROI GetROIsTab() {
    vector_CamROI ret = new vector_CamROI(VisionLabPINVOKE.CameraBase_GetROIsTab(swigCPtr), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string SetParam(string param, string value) {
    string ret = VisionLabPINVOKE.CameraBase_SetParam(swigCPtr, param, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int SetIntParam(string param, int value) {
    int ret = VisionLabPINVOKE.CameraBase_SetIntParam(swigCPtr, param, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double SetFloatParam(string param, double value) {
    double ret = VisionLabPINVOKE.CameraBase_SetFloatParam(swigCPtr, param, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string SetStringParam(string param, string value) {
    string ret = VisionLabPINVOKE.CameraBase_SetStringParam(swigCPtr, param, value);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void OnePushParam(string param) {
    VisionLabPINVOKE.CameraBase_OnePushParam(swigCPtr, param);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string GetParam(string param) {
    string ret = VisionLabPINVOKE.CameraBase_GetParam(swigCPtr, param);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetIntParam(string param) {
    int ret = VisionLabPINVOKE.CameraBase_GetIntParam(swigCPtr, param);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetFloatParam(string param) {
    double ret = VisionLabPINVOKE.CameraBase_GetFloatParam(swigCPtr, param);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetStringParam(string param) {
    string ret = VisionLabPINVOKE.CameraBase_GetStringParam(swigCPtr, param);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetParamNames() {
    string ret = VisionLabPINVOKE.CameraBase_GetParamNames(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetParamInfo(string param) {
    string ret = VisionLabPINVOKE.CameraBase_GetParamInfo(swigCPtr, param);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetParamsInfo() {
    string ret = VisionLabPINVOKE.CameraBase_GetParamsInfo(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetParamInfoFromCamera(string param) {
    string ret = VisionLabPINVOKE.CameraBase_GetParamInfoFromCamera(swigCPtr, param);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetParamsInfoFromCamera() {
    string ret = VisionLabPINVOKE.CameraBase_GetParamsInfoFromCamera(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetParams() {
    string ret = VisionLabPINVOKE.CameraBase_GetParams(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual CamParamType GetParamType(string param) {
    CamParamType ret = (CamParamType)VisionLabPINVOKE.CameraBase_GetParamType(swigCPtr, param);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float GetParamMinValue(string param) {
    float ret = VisionLabPINVOKE.CameraBase_GetParamMinValue(swigCPtr, param);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float GetParamMaxValue(string param) {
    float ret = VisionLabPINVOKE.CameraBase_GetParamMaxValue(swigCPtr, param);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void WriteToFile(string fileName) {
    VisionLabPINVOKE.CameraBase_WriteToFile(swigCPtr, fileName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ReadFromFile(string fileName) {
    VisionLabPINVOKE.CameraBase_ReadFromFile(swigCPtr, fileName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

}
