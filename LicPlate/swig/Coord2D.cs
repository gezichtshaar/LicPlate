/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Coord2D : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Coord2D(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Coord2D obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Coord2D() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VisionLabPINVOKE.delete_Coord2D(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Coord2D(double xx, double yy) : this(VisionLabPINVOKE.new_Coord2D__SWIG_0(xx, yy), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Coord2D(double xx) : this(VisionLabPINVOKE.new_Coord2D__SWIG_1(xx), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Coord2D() : this(VisionLabPINVOKE.new_Coord2D__SWIG_2(), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Coord2D(XYCoord xy) : this(VisionLabPINVOKE.new_Coord2D__SWIG_3(XYCoord.getCPtr(xy)), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsEqual_Op(Coord2D c) {
    bool ret = VisionLabPINVOKE.Coord2D_IsEqual_Op(swigCPtr, Coord2D.getCPtr(c));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Not(Coord2D c) {
    bool ret = VisionLabPINVOKE.Coord2D_Not(swigCPtr, Coord2D.getCPtr(c));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Coord2D Add_Op(Coord2D c) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.Coord2D_Add_Op(swigCPtr, Coord2D.getCPtr(c)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Coord2D Subtract_Op(Coord2D c) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.Coord2D_Subtract_Op(swigCPtr, Coord2D.getCPtr(c)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Coord2D Multiply_Op(double f) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.Coord2D_Multiply_Op(swigCPtr, f), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Coord2D Divide_Op(double f) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.Coord2D_Divide_Op(swigCPtr, f), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Coord2D Add(Coord2D c) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.Coord2D_Add(swigCPtr, Coord2D.getCPtr(c)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Coord2D Subtract(Coord2D c) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.Coord2D_Subtract(swigCPtr, Coord2D.getCPtr(c)), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Coord2D Multiply(double f) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.Coord2D_Multiply(swigCPtr, f), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Coord2D Divide(double f) {
    Coord2D ret = new Coord2D(VisionLabPINVOKE.Coord2D_Divide(swigCPtr, f), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SmallerThan(Coord2D arg0) {
    bool ret = VisionLabPINVOKE.Coord2D_SmallerThan(swigCPtr, Coord2D.getCPtr(arg0));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double x {
    set {
      VisionLabPINVOKE.Coord2D_x_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = VisionLabPINVOKE.Coord2D_x_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double y {
    set {
      VisionLabPINVOKE.Coord2D_y_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = VisionLabPINVOKE.Coord2D_y_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
