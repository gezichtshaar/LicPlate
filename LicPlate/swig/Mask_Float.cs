/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Mask_Float : MaskBase {
  private HandleRef swigCPtr;

  internal Mask_Float(IntPtr cPtr, bool cMemoryOwn) : base(VisionLabPINVOKE.Mask_Float_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Mask_Float obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Mask_Float() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VisionLabPINVOKE.delete_Mask_Float(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Mask_Float() : this(VisionLabPINVOKE.new_Mask_Float__SWIG_0(), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Mask_Float(Mask_Float mask) : this(VisionLabPINVOKE.new_Mask_Float__SWIG_1(Mask_Float.getCPtr(mask)), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Mask_Float(int height, int width) : this(VisionLabPINVOKE.new_Mask_Float__SWIG_2(height, width), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Mask_Float(int height, int width, float v) : this(VisionLabPINVOKE.new_Mask_Float__SWIG_3(height, width, v), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Mask_Float(int height, int width, int orgX, int orgY, float v) : this(VisionLabPINVOKE.new_Mask_Float__SWIG_4(height, width, orgX, orgY, v), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public Mask_Float(int height, int width, int orgX, int orgY) : this(VisionLabPINVOKE.new_Mask_Float__SWIG_5(height, width, orgX, orgY), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsEqual_Op(Mask_Float mask) {
    bool ret = VisionLabPINVOKE.Mask_Float_IsEqual_Op(swigCPtr, Mask_Float.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Not(Mask_Float mask) {
    bool ret = VisionLabPINVOKE.Mask_Float_Not(swigCPtr, Mask_Float.getCPtr(mask));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Mask_Float Assign_Op(Mask_Float mask) {
    Mask_Float ret = new Mask_Float(VisionLabPINVOKE.Mask_Float_Assign_Op(swigCPtr, Mask_Float.getCPtr(mask)), false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMask(int height, int width, int orgX, int orgY) {
    VisionLabPINVOKE.Mask_Float_SetMask(swigCPtr, height, width, orgX, orgY);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetMaskValue(int x, int y) {
    float ret = VisionLabPINVOKE.Mask_Float_GetMaskValue(swigCPtr, x, y);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMaskValue(int x, int y, float v) {
    VisionLabPINVOKE.Mask_Float_SetMaskValue(swigCPtr, x, y, v);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_float tab {
    set {
      VisionLabPINVOKE.Mask_Float_tab_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = VisionLabPINVOKE.Mask_Float_tab_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
