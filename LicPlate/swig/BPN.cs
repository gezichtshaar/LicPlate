/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class BPN : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BPN(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BPN obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BPN() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VisionLabPINVOKE.delete_BPN(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public BPN() : this(VisionLabPINVOKE.new_BPN__SWIG_0(), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public BPN(ActivationFunction func, vector_int layerDescrTab, BiasNodes bias, vector_MinMaxInput minMaxInputTab, double minOutput, double maxOutput) : this(VisionLabPINVOKE.new_BPN__SWIG_1((int)func, vector_int.getCPtr(layerDescrTab), (int)bias, vector_MinMaxInput.getCPtr(minMaxInputTab), minOutput, maxOutput), true) {
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Reset(double minRandW, double maxRandW) {
    VisionLabPINVOKE.BPN_Reset(swigCPtr, minRandW, maxRandW);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetNrLayers() {
    int ret = VisionLabPINVOKE.BPN_GetNrLayers(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetSizeLayer(int layerNr) {
    int ret = VisionLabPINVOKE.BPN_GetSizeLayer(swigCPtr, layerNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Layer GetLayer(int layerNr) {
    Layer ret = new Layer(VisionLabPINVOKE.BPN_GetLayer(swigCPtr, layerNr), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetLayer(int layerNr, Layer layer) {
    VisionLabPINVOKE.BPN_SetLayer(swigCPtr, layerNr, Layer.getCPtr(layer));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public int NrInputs() {
    int ret = VisionLabPINVOKE.BPN_NrInputs(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int NrOutputs() {
    int ret = VisionLabPINVOKE.BPN_NrOutputs(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Train(double learnRate, double momentum, vector_double input, vector_double target) {
    double ret = VisionLabPINVOKE.BPN_Train(swigCPtr, learnRate, momentum, vector_double.getCPtr(input), vector_double.getCPtr(target));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double TrainSet(int nrOfEpochs, double learnRate, double momentum, vector_vector_double inputs, vector_vector_double targets, ref double meanError) {
    double ret = VisionLabPINVOKE.BPN_TrainSet(swigCPtr, nrOfEpochs, learnRate, momentum, vector_vector_double.getCPtr(inputs), vector_vector_double.getCPtr(targets), ref meanError);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Produce(vector_double input, vector_double output) {
    VisionLabPINVOKE.BPN_Produce(swigCPtr, vector_double.getCPtr(input), vector_double.getCPtr(output));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public double Evaluate(vector_double input, vector_double target, vector_double output) {
    double ret = VisionLabPINVOKE.BPN_Evaluate(swigCPtr, vector_double.getCPtr(input), vector_double.getCPtr(target), vector_double.getCPtr(output));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double EvaluateSet(vector_vector_double inputs, vector_vector_double targets, vector_vector_double outputs, ref double meanError) {
    double ret = VisionLabPINVOKE.BPN_EvaluateSet(swigCPtr, vector_vector_double.getCPtr(inputs), vector_vector_double.getCPtr(targets), vector_vector_double.getCPtr(outputs), ref meanError);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void WriteToFile(string fileName) {
    VisionLabPINVOKE.BPN_WriteToFile(swigCPtr, fileName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ReadFromFile(string fileName) {
    VisionLabPINVOKE.BPN_ReadFromFile(swigCPtr, fileName);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void WriteToStream(SWIGTYPE_p_std__ostream os) {
    VisionLabPINVOKE.BPN_WriteToStream(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ReadFromStream(SWIGTYPE_p_std__istream arg0) {
    VisionLabPINVOKE.BPN_ReadFromStream(swigCPtr, SWIGTYPE_p_std__istream.getCPtr(arg0));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetLearnRate() {
    double ret = VisionLabPINVOKE.BPN_GetLearnRate(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMomentum() {
    double ret = VisionLabPINVOKE.BPN_GetMomentum(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetLearnError() {
    double ret = VisionLabPINVOKE.BPN_GetLearnError(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetNameLearnSet() {
    string ret = VisionLabPINVOKE.BPN_GetNameLearnSet(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetNameLearnSet(string name) {
    VisionLabPINVOKE.BPN_SetNameLearnSet(swigCPtr, name);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public double learnRate {
    set {
      VisionLabPINVOKE.BPN_learnRate_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = VisionLabPINVOKE.BPN_learnRate_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double momentum {
    set {
      VisionLabPINVOKE.BPN_momentum_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = VisionLabPINVOKE.BPN_momentum_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ActivationFunction func {
    set {
      VisionLabPINVOKE.BPN_func_set(swigCPtr, (int)value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ActivationFunction ret = (ActivationFunction)VisionLabPINVOKE.BPN_func_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_Layer layers {
    set {
      VisionLabPINVOKE.BPN_layers_set(swigCPtr, vector_Layer.getCPtr(value));
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = VisionLabPINVOKE.BPN_layers_get(swigCPtr);
      vector_Layer ret = (cPtr == IntPtr.Zero) ? null : new vector_Layer(cPtr, false);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public BiasNodes bias {
    set {
      VisionLabPINVOKE.BPN_bias_set(swigCPtr, (int)value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      BiasNodes ret = (BiasNodes)VisionLabPINVOKE.BPN_bias_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_MinMaxInput minMaxInputTab {
    set {
      VisionLabPINVOKE.BPN_minMaxInputTab_set(swigCPtr, vector_MinMaxInput.getCPtr(value));
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = VisionLabPINVOKE.BPN_minMaxInputTab_get(swigCPtr);
      vector_MinMaxInput ret = (cPtr == IntPtr.Zero) ? null : new vector_MinMaxInput(cPtr, false);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double minOutput {
    set {
      VisionLabPINVOKE.BPN_minOutput_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = VisionLabPINVOKE.BPN_minOutput_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double maxOutput {
    set {
      VisionLabPINVOKE.BPN_maxOutput_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = VisionLabPINVOKE.BPN_maxOutput_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string type {
    set {
      VisionLabPINVOKE.BPN_type_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = VisionLabPINVOKE.BPN_type_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_QString nameLearnSet {
    set {
      VisionLabPINVOKE.BPN_nameLearnSet_set(swigCPtr, SWIGTYPE_p_QString.getCPtr(value));
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(VisionLabPINVOKE.BPN_nameLearnSet_get(swigCPtr), true);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double learnError {
    set {
      VisionLabPINVOKE.BPN_learnError_set(swigCPtr, value);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = VisionLabPINVOKE.BPN_learnError_get(swigCPtr);
      if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void Init(ActivationFunction func, vector_int layerDescrTab, BiasNodes bias, vector_MinMaxInput minMaxInputTab, double minOutput, double maxOutput) {
    VisionLabPINVOKE.BPN_Init(swigCPtr, (int)func, vector_int.getCPtr(layerDescrTab), (int)bias, vector_MinMaxInput.getCPtr(minMaxInputTab), minOutput, maxOutput);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

}
